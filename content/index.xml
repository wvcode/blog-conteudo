<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>WV Code - Educação e Consultoria</title>
<link>https://blog.wvcode.com.br/</link>
<atom:link href="https://blog.wvcode.com.br/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Mon, 28 Oct 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Teste em Dados - Básico</title>
  <dc:creator>Walter R. Paixão-Côrtes</dc:creator>
  <link>https://blog.wvcode.com.br/posts/testes-001/</link>
  <description><![CDATA[ 





<p>Olá Devs!</p>
<p>Quando trabalhamos com dados, é necessário que, além de desenvolver todas as transformações necessárias para que os dados estejam prontos para serem utilizados na execução de análises, tenhamos uma maneira de validar a correção e validade dos dados segundo as regras que foram determinadas.</p>
<p>Uma maneira automatizada e eficiente de fazer isso é através da criação de testes unitários que validem os dados de acordo com as regras estabelecidas.</p>
<p>Vamos começar???</p>
<section id="obtendo-os-dados" class="level2">
<h2 class="anchored" data-anchor-id="obtendo-os-dados">Obtendo os Dados</h2>
<p>Para este artigo, vamos carregar dados que apresentam alguns erros e vamos construir os testes unitários para valida-los.</p>
<div id="cell-4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://media.githubusercontent.com/media/labeduc/datasets/main/testes/problematic_data.csv'</span>)</span></code></pre></div>
</div>
<p>Aqui podemos ver uma amostra dos dados:</p>
<div id="cell-7" class="cell" data-outputid="b746efec-3b97-46f7-a87c-f3f44b1c5c35" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Unnamed: 0</th>
<th data-quarto-table-cell-role="th">ID</th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Age</th>
<th data-quarto-table-cell-role="th">Salary</th>
<th data-quarto-table-cell-role="th">Join_Date</th>
<th data-quarto-table-cell-role="th">Category</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>16</td>
<td>17</td>
<td>Name17</td>
<td>56</td>
<td>4700</td>
<td>2023-05-31</td>
<td>Category C</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">12</td>
<td>12</td>
<td>13</td>
<td>Name13</td>
<td>74</td>
<td>4300</td>
<td>2023-01-31</td>
<td>Category B</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">42</td>
<td>42</td>
<td>43</td>
<td>Name43</td>
<td>74</td>
<td>7300</td>
<td>2025-07-31</td>
<td>Category A</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>13</td>
<td>14</td>
<td>Name14</td>
<td>35</td>
<td>4400</td>
<td>2023-02-28</td>
<td>Category B</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">17</td>
<td>17</td>
<td>18</td>
<td>Name18</td>
<td>35</td>
<td>4800</td>
<td>2023-06-30</td>
<td>Category A</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Para iniciar o nosso processo de validação, precisamos realizar a primeira inspeção nos dados. Para isso, a biblioteca Pandas nos dá algumas funções bem interessantes.</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A função info() exibe informações sobre o DataFrame, </span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># incluindo o tipo de dados de cada coluna, </span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># valores não nulos e uso de memória.</span></span>
<span id="cb4-4">df.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 50 entries, 0 to 49
Data columns (total 7 columns):
 #   Column      Non-Null Count  Dtype 
---  ------      --------------  ----- 
 0   Unnamed: 0  50 non-null     int64 
 1   ID          50 non-null     int64 
 2   Name        40 non-null     object
 3   Age         50 non-null     object
 4   Salary      50 non-null     int64 
 5   Join_Date   50 non-null     object
 6   Category    50 non-null     object
dtypes: int64(3), object(4)
memory usage: 2.9+ KB</code></pre>
</div>
</div>
<p>Podemos perceber 2 situações que demandam maior verificação:</p>
<ul>
<li>A coluna Name tem 10 valores nulos, o que pode ser um problema para as regra de negócio;</li>
<li>A coluna Age (idade) tem todas as linhas preenchidas, mas seu tipo, em vez de ser um valor do tipo inteiro, é do tipo objeto, o que infica possível problema nos dados.</li>
</ul>
<p>O que a função info não nos mostra é a presença de valores duplicados, ou até mesmo uma linha inteira duplicada. Vamos então aprender como conseguir essas informações.</p>
</section>
<section id="tipos-de-validação" class="level1">
<h1>Tipos de Validação</h1>
<section id="dataset-está-vazio" class="level2">
<h2 class="anchored" data-anchor-id="dataset-está-vazio">Dataset está vazio</h2>
<p>A proprieadade <code>empty</code> do DataFrame nos informa se o DataFrame está vazio ou não. Se o DataFrame estiver vazio, a propriedade retornará <code>True</code>, caso contrário, retornará <code>False</code>.</p>
<div id="cell-14" class="cell" data-outputid="ef76d60a-df62-4187-a42a-2d235e65ffea" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">vazio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.empty</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> vazio <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Não'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> está vazio"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Não está vazio</code></pre>
</div>
</div>
</section>
<section id="coluna-está-vazia" class="level2">
<h2 class="anchored" data-anchor-id="coluna-está-vazia">Coluna está vazia</h2>
<p>A propriedade <code>empty</code> do DataFrame nos informa se a coluna está vazia ou não. Se a coluna estiver vazia, a propriedade retornará <code>True</code>, caso contrário, retornará <code>False</code>.</p>
<div id="cell-17" class="cell" data-outputid="c2b39c5f-6682-4ad0-97cf-637cb484ee12" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">vazio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>].empty</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" Coluna Name </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> vazio <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Não'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> está vazia"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Coluna Name Não está vazia</code></pre>
</div>
</div>
</section>
<section id="verificando-valores-nulos" class="level2">
<h2 class="anchored" data-anchor-id="verificando-valores-nulos">Verificando Valores Nulos</h2>
<p>Este teste visa descobrir se existem dados faltando em nosso dataset. Podemos testar de maneira geral ou coluna a coluna. Para isso, utilizamos a função <code>isnull()</code> que retorna <code>True</code> para valores nulos e <code>False</code> para valores não nulos.</p>
<div id="cell-20" class="cell" data-outputid="78c614f7-5697-4792-ef36-452f6ea81775" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Testando se existe algum valor nulo</span></span>
<span id="cb10-2">valores_nulos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.isnull().values.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>()</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> valores_nulos <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Náo'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Existem Valores Nulos."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Existem Valores Nulos.</code></pre>
</div>
</div>
<div id="cell-21" class="cell" data-outputid="9e25d2c8-8ffb-44e7-af8a-785da01bb62a" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O teste pode ser feito para uma coluna específica</span></span>
<span id="cb12-2">valores_nulos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>].isnull().values.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>()</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"A coluna Name </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tem'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> valores_nulos <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'não tem'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> valores nulos."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>A coluna Name tem valores nulos.</code></pre>
</div>
</div>
<div id="cell-22" class="cell" data-outputid="2acefee9-9cb7-48fb-c52a-58276e8eb0ed" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O teste pode ser feito para uma coluna específica</span></span>
<span id="cb14-2">valores_nulos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>].isnull().values.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>()</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"A coluna Age </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tem'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> valores_nulos <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'não tem'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> valores nulos."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>A coluna Age não tem valores nulos.</code></pre>
</div>
</div>
</section>
<section id="verificando-os-tipos-de-dados" class="level2">
<h2 class="anchored" data-anchor-id="verificando-os-tipos-de-dados">Verificando os tipos de dados</h2>
<p>Este teste visa verificar se o tipo de dados de uma coluna em todas as linhas do seu dataset é consistente com o objetivo de uso desta coluna. Por exemplo, vimos nos exemplos de dados, que a coluna Age está identificada com o tipo de dados objeto, o que certamente nos causará problemas se quisermos calcular a média de idade de nosso dataset, pois é um indicativo de que em alguma linha desta coluna, o valor não é numérico. Podemos fazer uma inspeção manual, já que estamos falando apenas de 50 linhas, mas vamos aprender a fazer isso de maneira automatizada.</p>
<div id="cell-25" class="cell" data-outputid="a36e40c0-cec2-4132-c130-ae593fc7b7f3" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Testando se a coluna Age é do tipo numérico</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A função isna() retorna um DataFrame de valores booleanos que indicam se um elemento é um número ou não.</span></span>
<span id="cb16-3">eh_numero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>].isna().values.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>()</span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"A coluna Age </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'é'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> eh_numero <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'não é'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> do tipo numérico."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>A coluna Age não é do tipo numérico.</code></pre>
</div>
</div>
<p>Mas que valor é este? Vamos usar outra função para descobrir.</p>
<div id="cell-27" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A função unique() retorna uma matriz de valores exclusivos em uma coluna. </span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A função tolist() converte a matriz em uma lista.</span></span>
<span id="cb18-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" Valores únicos de Age: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>tolist()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Valores únicos de Age: ['46', '19', '30', '60', '69', '36', '64', '48', '53', '52', '32', '74', '35', '56', '49', 'Unknown', '57', '44', '54', '28', '41', '39', '62', '21', '71', '42', '38', '22', '59', '55']</code></pre>
</div>
</div>
<p>Ao usar a função <code>unique()</code>, podemos descobrir quais são os valores únicos de uma coluna. Se a coluna tiver um tipo de dados numérico, a função retornará uma lista de valores únicos. Se a coluna tiver um tipo de dados não numérico, a função retornará uma lista de strings. Existem uma ou mais linhas com o valor ‘Unknown’ na coluna Age, o que causa o comportamento que vimos anteriormente. Esse é mais um dos problemas a serem corrigidos, que o nosso teste unitário vai nos ajudar a identificar.</p>
</section>
</section>
<section id="outros-tipos-de-validação" class="level1">
<h1>Outros Tipos de Validação</h1>
<p>Veja abaixo alguns outros tipos de validação comum em testes de dados</p>
<section id="teste-contra-valores" class="level2">
<h2 class="anchored" data-anchor-id="teste-contra-valores">Teste contra valores</h2>
<p>Neste tipo de teste, verificamos se as colunas do nosso dataset respeitam, por exemplo, valores mínimos, máximos, conjunto especificos e limitados de opções, se obedecem a uma lógica dependente de outras colunas, etc.</p>
<section id="apenas-maiores-de-40-anos" class="level3">
<h3 class="anchored" data-anchor-id="apenas-maiores-de-40-anos">Apenas maiores de 40 anos</h3>
<div id="cell-34" class="cell" data-outputid="2b5a007d-cec3-4554-ad3f-93a0cb21e0e0" data-execution_count="12">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Primeiro vamos corrigir os unknown</span></span>
<span id="cb20-2"></span>
<span id="cb20-3">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Unknown'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> x)).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb20-4"></span>
<span id="cb20-5"></span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Agora fazemos a validação</span></span>
<span id="cb20-7"></span>
<span id="cb20-8">menores_de_quarenta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age &lt; 40'</span>).empty</span>
<span id="cb20-9"></span>
<span id="cb20-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Não Temos'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> menores_de_quarenta <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Temos'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> menores de quarenta"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Temos menores de quarenta</code></pre>
</div>
</div>
</section>
<section id="verifica-contra-lista-de-valores" class="level3">
<h3 class="anchored" data-anchor-id="verifica-contra-lista-de-valores">Verifica contra Lista de Valores</h3>
<div id="cell-36" class="cell" data-outputid="ee152e76-f5d5-44ea-933c-4fcd6152b8de" data-execution_count="13">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb22-2">categoria_invalida <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Category'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Category A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Category B'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Category C'</span>])).empty</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Não tem'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> categoria_invalida <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tem'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> categorias invalidas."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Tem categorias invalidas.</code></pre>
</div>
</div>
</section>
</section>
<section id="eda" class="level2">
<h2 class="anchored" data-anchor-id="eda">EDA</h2>
<p><code>EDA</code> é a sigla para <code>Exploratory Data Analysis</code>, que em português significa <code>Análise Exploratória de Dados</code>. Este tipo de teste visa verificar se os dados estão de acordo com o esperado, ou seja, se estão dentro de um intervalo esperado, se não há outliers, se a distribuição dos dados está correta, etc. Ou seja, é uma análise mais aprofundada dos dados, que fazem validações mais complexas e de cunho estatístico.</p>
<p>Para nos ajudar com essa análise, podemos utilizar a função <code>describe()</code> do Pandas, que nos dá um resumo estatístico dos dados.</p>
<div id="cell-40" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">df.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Unnamed: 0</th>
<th data-quarto-table-cell-role="th">ID</th>
<th data-quarto-table-cell-role="th">Age</th>
<th data-quarto-table-cell-role="th">Salary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>50.00000</td>
<td>50.00000</td>
<td>50.000000</td>
<td>50.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean</td>
<td>24.50000</td>
<td>25.50000</td>
<td>46.320000</td>
<td>5310.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">std</td>
<td>14.57738</td>
<td>14.57738</td>
<td>14.618188</td>
<td>1653.351574</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">min</td>
<td>0.00000</td>
<td>1.00000</td>
<td>19.000000</td>
<td>2000.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25%</td>
<td>12.25000</td>
<td>13.25000</td>
<td>36.500000</td>
<td>4025.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50%</td>
<td>24.50000</td>
<td>25.50000</td>
<td>46.000000</td>
<td>5350.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75%</td>
<td>36.75000</td>
<td>37.75000</td>
<td>56.000000</td>
<td>6675.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">max</td>
<td>49.00000</td>
<td>50.00000</td>
<td>74.000000</td>
<td>8000.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Como podemos ver, a função <code>describe()</code> nos dá um resumo estatístico dos dados numéricos, como a média, desvio padrão, mínimo, máximo, etc. Com essas informações, podemos fazer validações mais complexas, como verificar se a média de idade está dentro de um intervalo esperado, se a distribuição dos dados está correta, etc. Mas, como podemos ver, a coluna Age não está sendo considerada como numérica, o que nos impede de fazer essas validações. Vamos corrigir isso.</p>
<div id="cell-42" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A correção aplicada foi a substituição dos valores 'Unknown' por 40 e a conversão para inteiro.</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Por que 40? Porque é um valor que não altera a média e a mediana dos dados.</span></span>
<span id="cb25-3"></span>
<span id="cb25-4">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Unknown'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> x).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span></code></pre></div>
</div>
<div id="cell-43" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Unnamed: 0</th>
<th data-quarto-table-cell-role="th">ID</th>
<th data-quarto-table-cell-role="th">Age</th>
<th data-quarto-table-cell-role="th">Salary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>50.00000</td>
<td>50.00000</td>
<td>50.000000</td>
<td>50.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean</td>
<td>24.50000</td>
<td>25.50000</td>
<td>46.320000</td>
<td>5310.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">std</td>
<td>14.57738</td>
<td>14.57738</td>
<td>14.618188</td>
<td>1653.351574</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">min</td>
<td>0.00000</td>
<td>1.00000</td>
<td>19.000000</td>
<td>2000.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25%</td>
<td>12.25000</td>
<td>13.25000</td>
<td>36.500000</td>
<td>4025.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50%</td>
<td>24.50000</td>
<td>25.50000</td>
<td>46.000000</td>
<td>5350.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75%</td>
<td>36.75000</td>
<td>37.75000</td>
<td>56.000000</td>
<td>6675.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">max</td>
<td>49.00000</td>
<td>50.00000</td>
<td>74.000000</td>
<td>8000.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Bom, agora que temos isso resolvido, vamos ao próximo passo: rodar o EDA. O EDA pode ser feito manualmente, mas vamos aprender a fazer isso de maneira automatizada. Para essa análise mais automatizada, vamos usar três ferramentas: <code>jupyter-summarytools</code>, <code>sweetviz</code> e <code>dtale</code>.</p>
<section id="jupyter-summarytools" class="level3">
<h3 class="anchored" data-anchor-id="jupyter-summarytools">Jupyter-summarytools</h3>
<p>É a versão mais bonita do <code>describe()</code>. Ele nos dá um resumo estatístico dos dados, mas de uma maneira mais visual e interativa. Para instalar, basta rodar o comando <code>!pip install jupyter-summarytools</code> no seu Jupyter Notebook.</p>
<div id="cell-47" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> summarytools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dfSummary</span>
<span id="cb27-2"></span>
<span id="cb27-3">dfSummary(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<style type="text/css">
#T_e3ff2 thead>tr>th {
  text-align: left;
}
#T_e3ff2_row0_col0, #T_e3ff2_row1_col0, #T_e3ff2_row2_col0, #T_e3ff2_row3_col0, #T_e3ff2_row4_col0, #T_e3ff2_row5_col0, #T_e3ff2_row6_col0 {
  text-align: left;
  font-size: 12px;
  vertical-align: middle;
  width: 5%;
  max-width: 50px;
  min-width: 20px;
}
#T_e3ff2_row0_col1, #T_e3ff2_row1_col1, #T_e3ff2_row2_col1, #T_e3ff2_row3_col1, #T_e3ff2_row4_col1, #T_e3ff2_row5_col1, #T_e3ff2_row6_col1 {
  text-align: left;
  font-size: 12px;
  vertical-align: middle;
  width: 15%;
  max-width: 200px;
  min-width: 100px;
  word-break: break-word;
}
#T_e3ff2_row0_col2, #T_e3ff2_row1_col2, #T_e3ff2_row2_col2, #T_e3ff2_row3_col2, #T_e3ff2_row4_col2, #T_e3ff2_row5_col2, #T_e3ff2_row6_col2 {
  text-align: left;
  font-size: 12px;
  vertical-align: middle;
  width: 30%;
  min-width: 100px;
}
#T_e3ff2_row0_col3, #T_e3ff2_row1_col3, #T_e3ff2_row2_col3, #T_e3ff2_row3_col3, #T_e3ff2_row4_col3, #T_e3ff2_row5_col3, #T_e3ff2_row6_col3 {
  text-align: left;
  font-size: 12px;
  vertical-align: middle;
  width: 25%;
  min-width: 100px;
}
#T_e3ff2_row0_col4, #T_e3ff2_row1_col4, #T_e3ff2_row2_col4, #T_e3ff2_row3_col4, #T_e3ff2_row4_col4, #T_e3ff2_row5_col4, #T_e3ff2_row6_col4 {
  text-align: left;
  font-size: 12px;
  vertical-align: middle;
  width: 20%;
  min-width: 150px;
}
#T_e3ff2_row0_col5, #T_e3ff2_row1_col5, #T_e3ff2_row2_col5, #T_e3ff2_row3_col5, #T_e3ff2_row4_col5, #T_e3ff2_row5_col5, #T_e3ff2_row6_col5 {
  text-align: left;
  font-size: 12px;
  vertical-align: middle;
  width: 10%;
}
</style>

<div id="T_e3ff2" class="quarto-float quarto-figure quarto-figure-center anchored" data-quarto-postprocess="true">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="T_e3ff2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1: <strong>Data Frame Summary</strong><br>
df<br>
Dimensions: 50 x 7<br>
Duplicates: 0
</figcaption>
<div aria-describedby="T_e3ff2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table id="T_e3ff2" class="caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<colgroup>
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th id="T_e3ff2_level0_col0" class="col_heading level0 col0" data-quarto-table-cell-role="th">No</th>
<th id="T_e3ff2_level0_col1" class="col_heading level0 col1" data-quarto-table-cell-role="th">Variable</th>
<th id="T_e3ff2_level0_col2" class="col_heading level0 col2" data-quarto-table-cell-role="th">Stats / Values</th>
<th id="T_e3ff2_level0_col3" class="col_heading level0 col3" data-quarto-table-cell-role="th">Freqs / (% of Valid)</th>
<th id="T_e3ff2_level0_col4" class="col_heading level0 col4" data-quarto-table-cell-role="th">Graph</th>
<th id="T_e3ff2_level0_col5" class="col_heading level0 col5" data-quarto-table-cell-role="th">Missing</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td id="T_e3ff2_row0_col0" class="data row0 col0">1</td>
<td id="T_e3ff2_row0_col1" class="data row0 col1"><strong>Unnamed: 0</strong><br>
[int64]</td>
<td id="T_e3ff2_row0_col2" class="data row0 col2">Mean (sd) : 24.5 (14.6)<br>
min &lt; med &lt; max:<br>
0.0 &lt; 24.5 &lt; 49.0<br>
IQR (CV) : 24.5 (1.7)</td>
<td id="T_e3ff2_row0_col3" class="data row0 col3">50 distinct values</td>
<td id="T_e3ff2_row0_col4" class="data row0 col4"><img src="https://blog.wvcode.com.br/posts/testes-001/data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAKoAAABGCAYAAABc8A97AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABxklEQVR4nO3XQU7CYBBA4fkbJSCkDSHCAbwBSw7hYT0EJ2DhxhU7EtKUUDEarCcAKTXqS963baczixcSUtM0If132V8fIF3i5rsXUkqDiOhd+f0sIj6vnO06T91Nvbvr/HvTNIdTD8+GmlIaTCaTxzzPx223Ho/H27quH0aj0UuWZR+/OU/dTb37J+Z3u12ZUno6Fet3v6i9PM/Hi8XiUBTFW5vF6/V6vFqt7ufz+fNsNivbzHadp+6m3t11vqqq/nK5HG+3215EXBVqREQURfE2nU5f2ywvy3IQETEcDlvPdp2n7qbe/RPzETE499A/U0IwVCEYqhAMVQiGKgRDFYKhCsFQhWCoQjBUIRiqEAxVCIYqBEMVgqEKwVCFYKhCMFQhGKoQDFUIhioEQxWCoQrBUIVgqEIwVCEYqhAMVQiGKgRDFYKhCsFQhWCoQjBUIRiqEAxVCIYqBEMVgqEKwVCFYKhCMFQhGKoQDFUIhioEQxWCoQrBUIVgqEIwVCEYqhAMVQiGKgRDFYKhCsFQhWCoQjBUIRiqEAxVCIYqBEMVgqEK4eaSl6qq6rf98H6/70dE1HXd32w2d785T91Nvbvr/CV9fQGSljnmc7n3zQAAAABJRU5ErkJggg==" class="img-fluid figure-img"></td>
<td id="T_e3ff2_row0_col5" class="data row0 col5">0<br>
(0.0%)</td>
</tr>
<tr class="even">
<td id="T_e3ff2_row1_col0" class="data row1 col0">2</td>
<td id="T_e3ff2_row1_col1" class="data row1 col1"><strong>ID</strong><br>
[int64]</td>
<td id="T_e3ff2_row1_col2" class="data row1 col2">Mean (sd) : 25.5 (14.6)<br>
min &lt; med &lt; max:<br>
1.0 &lt; 25.5 &lt; 50.0<br>
IQR (CV) : 24.5 (1.7)</td>
<td id="T_e3ff2_row1_col3" class="data row1 col3">50 distinct values</td>
<td id="T_e3ff2_row1_col4" class="data row1 col4"><img src="https://blog.wvcode.com.br/posts/testes-001/data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAKoAAABGCAYAAABc8A97AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABxklEQVR4nO3XQU7CYBBA4fkbJSCkDSHCAbwBSw7hYT0EJ2DhxhU7EtKUUDEarCcAKTXqS963baczixcSUtM0If132V8fIF3i5rsXUkqDiOhd+f0sIj6vnO06T91Nvbvr/HvTNIdTD8+GmlIaTCaTxzzPx223Ho/H27quH0aj0UuWZR+/OU/dTb37J+Z3u12ZUno6Fet3v6i9PM/Hi8XiUBTFW5vF6/V6vFqt7ufz+fNsNivbzHadp+6m3t11vqqq/nK5HG+3215EXBVqREQURfE2nU5f2ywvy3IQETEcDlvPdp2n7qbe/RPzETE499A/U0IwVCEYqhAMVQiGKgRDFYKhCsFQhWCoQjBUIRiqEAxVCIYqBEMVgqEKwVCFYKhCMFQhGKoQDFUIhioEQxWCoQrBUIVgqEIwVCEYqhAMVQiGKgRDFYKhCsFQhWCoQjBUIRiqEAxVCIYqBEMVgqEKwVCFYKhCMFQhGKoQDFUIhioEQxWCoQrBUIVgqEIwVCEYqhAMVQiGKgRDFYKhCsFQhWCoQjBUIRiqEAxVCIYqBEMVgqEK4eaSl6qq6rf98H6/70dE1HXd32w2d785T91Nvbvr/CV9fQGSljnmc7n3zQAAAABJRU5ErkJggg==" class="img-fluid figure-img"></td>
<td id="T_e3ff2_row1_col5" class="data row1 col5">0<br>
(0.0%)</td>
</tr>
<tr class="odd">
<td id="T_e3ff2_row2_col0" class="data row2 col0">3</td>
<td id="T_e3ff2_row2_col1" class="data row2 col1"><strong>Name</strong><br>
[object]</td>
<td id="T_e3ff2_row2_col2" class="data row2 col2">1. nan<br>
2. Name1<br>
3. Name38<br>
4. Name28<br>
5. Name29<br>
6. Name31<br>
7. Name32<br>
8. Name33<br>
9. Name34<br>
10. Name36<br>
11. other</td>
<td id="T_e3ff2_row2_col3" class="data row2 col3">10 (20.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
31 (62.0%)</td>
<td id="T_e3ff2_row2_col4" class="data row2 col4"><img src="https://blog.wvcode.com.br/posts/testes-001/data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAJsAAAD+CAYAAAAtWHdlAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAADuklEQVR4nO3cQUrjYACG4b9DEd20FKGH6SHmsHOI3KZIs1Bx01mog7r3zWCeZ+cqRV5SE/7PzfV6HVD4tfQHYD3ERkZsZMRGRmxkxEZGbGTERkZsZDZjjLsxxs1C13+5Xq9PC12b2Pb+/v73brc7LHHxeZ4fNpvNH8Gtw3a32x1Op9PTfr9/Li98uVxup2k6nM/nmzGG2FZgO8YY+/3++Xg8Pi5w/bsFrslCPCCQERsZsZERGxmxkREbGbGRERsZsZERGxmxkREbGbGRERuZ7RivZ8vqCy9xTZa1nef5YZqmw1jgbNk8zw9jjJf6uizDBoHMxr/MovL1zuZOw7f5tK6yduI7/XpfV51Op6e36Jb6+40f7t+66u1naye+jZe6ZMRGRmxkxEZGbGTERkZsZMRGRmxkxEZGbGTERkZsZBYbvLA+HwcvBih8K8fCyRi8kHFnI2PwQsbghYzBCxkvdcmIjYzYyIiNjNjIiI2M2MiIjYzYyIiNjNjIiI2M2MgYvJAxeCHjWDgZgxcyHhDI+BolY11FxrqKjHUVGQ8IZMRGRmxkxEZGbGTERkZsZMRGRmxkxEZGbGTERkZsZKyryFhXkXEsnIx1FRl3NjIGL2QMXsgYvJDxUpeM2MiIjYzYyIiNjNjIiI2M2MiIjYzYyIiNjNjIiI2MwQsZgxcyjoWTMXgh485GxuCFjMELGYMXMl7qkhEbGbGRERsZsZERGxmxkREbGbGRERsZsZERGxmxkREbGesqMtZVZGwQyFhXkXFnI2NdRca6iox1FRkvdcmIjYzYyIiNjNjIiI2M2MiIjYzYyIiNjNjIiI2M2MgYvJAxeCHjWDgZgxcy7mxkDF7IGLyQMXgh46UuGbGRERsZsZERGxmxkREbGbGRERsZsZERGxmxkREbGYMXMgYvZBwLJ2PwQsYDAhlfo2Ssq8hYV5GxriLjAYGM2MiIjYzYyIiNjNjIiI2M2MiIjYzYyIiNjNjIiI2MdRUZ6yoyjoWTsa4i485GxuCFjMELGYMXMl7qkhEbGbGRERsZsZERGxmxkREbGbGRERsZsZERGxmxkTF4IWPwQsaxcDIGL2S+3tnorebb5NPghd6aRkbb98HLhx0CkcvlcjtN0+F8Pt+MMX5+bGO8Dl6Ox+Pj0h9mpVYzMvJSl4zYyIiNjNjIiI2M2MiIjYzYyIiNjNjIiI2M2MiIjYzBy4LW9nv/OHhZzVGX/8maRkaOhS9vNcfCDV7IeEAgIzYyYiMjNjJiIyM2MmIjIzYyYiPzF4xg33yOeCIqAAAAAElFTkSuQmCC" class="img-fluid figure-img"></td>
<td id="T_e3ff2_row2_col5" class="data row2 col5">10<br>
(20.0%)</td>
</tr>
<tr class="even">
<td id="T_e3ff2_row3_col0" class="data row3 col0">4</td>
<td id="T_e3ff2_row3_col1" class="data row3 col1"><strong>Age</strong><br>
[int64]</td>
<td id="T_e3ff2_row3_col2" class="data row3 col2">Mean (sd) : 46.3 (14.6)<br>
min &lt; med &lt; max:<br>
19.0 &lt; 46.0 &lt; 74.0<br>
IQR (CV) : 19.5 (3.2)</td>
<td id="T_e3ff2_row3_col3" class="data row3 col3">30 distinct values</td>
<td id="T_e3ff2_row3_col4" class="data row3 col4"><img src="https://blog.wvcode.com.br/posts/testes-001/data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAKoAAABGCAYAAABc8A97AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAACf0lEQVR4nO3bQYriQBiG4apJK1EhQQTdeYGBWbj0EHPYOcIsPIE3cCeIREx3MMbMeqDp1qqU5iveZx8rkBe7y8pv27Y1QN/9ePUNAPd4e/UN4H/W2pExZujxEZe2bT+6up++INQesdaOZrPZ7yzLpq6fcTqdjtbaP7HFSqj9MsyybLperz/yPK8evbgoinSz2UwPh8PQGEOoCCvP82o+n787Xj7q9GZ6gs0UJBAqJBAqJBAqJBAqJBAqJBAqJBAqJBAqJBAqJBAqJBAqJBAqJBAqJBAqJBAqJBAqJBAqJBAqJEQ7M8XYcVyiDJWx4/hEGaph7Dg6sYZqjGHsOCZspiAh6m9UH03TDIwxmbXW5XI2Yh0j1E+UZTmo6/rXcrlMkiR5+H9cNmLdI9RPXC6XtzRNx6vVqlosFsdHrmUjFgahfmEymbhuxtiIdYzNFCQQKiQQKiQQKiQQKiQQKiQQKiR8+zuq53udXkeJHmtnt9tt4Lou3IRs5ctQfd/r9DlK9Fm7ruu0aZqfVVX9Nca4vj2FB4Ru5btvVOf3Ojs4SnRee7fbTbfb7fh6vSYO68JN0FbuOkL1eK/T+yjRZe3j8cgR5ouEaoXNFCQQKiQQKiQQKiQQKiQQKiQQKiQwihKAxwSr99FvrNOzhNoxnwlW36PfmKdnCbVjPhOsvke/MU/PEmogLhOsXR39xjg9y2YKEggVEggVEggVEggVEggVEggVEoL+jup5nMck6ZP1+XkFC9X3OI9J0ufq+/MKFqrPcZ4xTJI+W9+fV/AjVNfjPCZJX6Ovz4vNFCQQKiTc9ae/KIr00Q8+n8+pMcaUZZnu9/vxM69XXVv1vn2vv6evf1x2vLqhBkfLAAAAAElFTkSuQmCC" class="img-fluid figure-img"></td>
<td id="T_e3ff2_row3_col5" class="data row3 col5">0<br>
(0.0%)</td>
</tr>
<tr class="odd">
<td id="T_e3ff2_row4_col0" class="data row4 col0">5</td>
<td id="T_e3ff2_row4_col1" class="data row4 col1"><strong>Salary</strong><br>
[int64]</td>
<td id="T_e3ff2_row4_col2" class="data row4 col2">Mean (sd) : 5310.0 (1653.4)<br>
min &lt; med &lt; max:<br>
2000.0 &lt; 5350.0 &lt; 8000.0<br>
IQR (CV) : 2650.0 (3.2)</td>
<td id="T_e3ff2_row4_col3" class="data row4 col3">48 distinct values</td>
<td id="T_e3ff2_row4_col4" class="data row4 col4"><img src="https://blog.wvcode.com.br/posts/testes-001/data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAKoAAABGCAYAAABc8A97AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAChUlEQVR4nO3dv4riUBiG8e/oKPEPCSKrnc2WC1tYehF7sXsJW3gFFttMZSeIRMyOGGO22VmmGNTkRJMXnl9/5jsJDwNJMHF5nhvQdK26NwDc46XuDVzjnOuZWbfk8paZXTzGn/I8fyuz0HPfpedWMNv3nPmsv3rcjQ3VOdcbj8c/wjAcFV2bZVknSZKvw+HwtdVqpWXm7/f7nXPuZ9FofPbtM9d3tu85811/67gbG6qZdcMwHC0Wi7coio5FFq7X69Fqtfoyn89/T6fTXdHBcRwHy+VytN1uu2ZWNJjS+/ac6zXb95z5rL/nuJscqpmZRVF0nEwmf4qs2e12PTOzwWBQeO0HvZLrzKzcvquYW3a27zmr4JxfPW4upiCBUCGBUCGBUCGBUCGBUCGBUCGh8fdR65JlWcfMQudc0aXh5XLp1DDXe3aTEeonkiTppGn6fTabtdvtdqEnPGmaBlmWfTsej7/MrNCNb5+5vrObjlA/cTqdXoIg6M/n82PRx4H/HiX2z+dz+5lzfWc3HaFeUeZx4PujxGfPrWp2U3ExBQmECgmECgmECgmECgmECgmECgmECgmECgmECgmECgmECgmECgmECgmECgmECgmECgmECgmECgk3fzNV59uTgXdXQ63z7cnAR7f+o9b59mTgv7t+Ll3n25MBMy6mIIJQIYFQIYFQIYFQIYFQIYFQIYFQIYFQIYFQIYFQIYFQIYFQIYFQIYFQIYFQIYFQIYFQIeGhX+7jA7SoysNC5QO0qNLDQuUDtKjSwz/aywdoUQUupiCBUCGBUCGBUCGBUCGBUCGBUCHhrvuocRwHRf/w4XAIzMySJAk2m03/metVZ6vu23f9PX39BVwWjdGl3F3FAAAAAElFTkSuQmCC" class="img-fluid figure-img"></td>
<td id="T_e3ff2_row4_col5" class="data row4 col5">0<br>
(0.0%)</td>
</tr>
<tr class="even">
<td id="T_e3ff2_row5_col0" class="data row5 col0">6</td>
<td id="T_e3ff2_row5_col1" class="data row5 col1"><strong>Join_Date</strong><br>
[object]</td>
<td id="T_e3ff2_row5_col2" class="data row5 col2">1. 2022-01-31<br>
2. 2025-02-28<br>
3. 2024-04-30<br>
4. 2024-05-31<br>
5. 2024-06-30<br>
6. 2024-07-31<br>
7. 2024-08-31<br>
8. 2024-09-30<br>
9. 2024-10-31<br>
10. 2024-11-30<br>
11. other</td>
<td id="T_e3ff2_row5_col3" class="data row5 col3">1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
1 (2.0%)<br>
40 (80.0%)</td>
<td id="T_e3ff2_row5_col4" class="data row5 col4"><img src="https://blog.wvcode.com.br/posts/testes-001/data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAJsAAAD+CAYAAAAtWHdlAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAADjElEQVR4nO3cQUobcRyG4V8kiG4iIniYHKKH7SFymyDJohY36aK2aDeFQt+ByfPsshAHfJkww/9zc7lcBgo3S18A10NsZMRGRmxkxEZGbGTERkZsZMRGZjMz9zNz+/757XK5vC54PazY9unp6ctut3ucmTmfzy+bzear4Pgfbna73eN+v3/d7/ev79Hd/vWn4B9sZ2YeHh6+v3++X/BaWDkPCGTERkZsZMRGRmxkxEZGbGTERkZsZMRGRmxkxEZGbGTERmY7M3M6ne6WvhDWb3s+n18Oh8Pvk7oz87bwNbFSNghkNv5lFhV3NjLWVWSsq8hYV5HxUpeM2MiIjYzYyIiNjNjIiI2M2MiIjYzYyIiNjNjIiI2MwQsZgxcyjoWTMXgh485GxuCFjMELGYMXMl7qkhEbGbGRERsZsZERGxmxkREbGbGRERsZsZERGxmxkTF4IWPwQsaxcDIGL2Q8IJDxNUrGuoqMdRUZ6yoyHhDIiI2M2MiIjYzYyIiNjNjIiI2M2MiIjYzYyIiNjNjIWFeRsa4i41g4GesqMu5sZAxeyBi8kDF4IeOlLhmxkREbGbGRERsZsZERGxmxkREbGbGRERsZsZERGxmDFzIGL2QcCydj8ELGnY2MwQsZgxcyBi9kvNQlIzYyYiMjNjJiIyM2MmIjIzYyYiMjNjJiIyM2MmIjIzYy1lVkrKvI2CCQsa4i485GxrqKjHUVGesqMl7qkhEbGbGRERsZsZERGxmxkREbGbGRERsZsZERGxmxkTF4IWPwQsaxcDIGL2Tc2cgYvJAxeCFj8ELGS10yYiMjNjJiIyM2MmIjIzYyYiMjNjJiIyM2MmIjIzYyBi9kDF7IOBZOxuCFjAcEMr5GyVhXkbGuImNdRcYDAhmxkREbGbGRERsZsZERGxmxkREbGbGRERsZsZERGxnrKjLWVWQcCydjXUXGnY2MwQsZgxcyBi9kvNQlIzYyYiMjNjJiIyM2MmIjIzYyYiMjNjJiIyM2MmIjY/BCxuCFjGPhZAxeyPx5Z2P9Fvv2+jR4Yf2WHDVtfw1ePuwQWKnT6XR3OBwej8fj7cz0sc38HLw8Pz9/q385i1hs1OSlLhmxkREbGbGRERsZsZERGxmxkREbGbGRERsZsZERGxmDlyuy9N/54+DF/9O9AkuOmhwLvz6LHQs3eCHjAYGM2MiIjYzYyIiNjNjIiI2M2MiIjcwPft/THfATJ2MAAAAASUVORK5CYII=" class="img-fluid figure-img"></td>
<td id="T_e3ff2_row5_col5" class="data row5 col5">0<br>
(0.0%)</td>
</tr>
<tr class="odd">
<td id="T_e3ff2_row6_col0" class="data row6 col0">7</td>
<td id="T_e3ff2_row6_col1" class="data row6 col1"><strong>Category</strong><br>
[object]</td>
<td id="T_e3ff2_row6_col2" class="data row6 col2">1. Category A<br>
2. Category B<br>
3. Category C<br>
4. No Category</td>
<td id="T_e3ff2_row6_col3" class="data row6 col3">19 (38.0%)<br>
15 (30.0%)<br>
13 (26.0%)<br>
3 (6.0%)</td>
<td id="T_e3ff2_row6_col4" class="data row6 col4"><img src="https://blog.wvcode.com.br/posts/testes-001/data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAJsAAABcCAYAAAB5jMeAAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAB8klEQVR4nO3bQWrbQACF4VERodlIGIMP40P0sD2EbmOMtUhCNuqi20JMY7/RSN93gjH8yIzQ65ZlKZDwo/YB2A+xEdOVUl5LKS+1DxLyuSzLe+1D7FV/PB5/DcNwqH2QhHmer13X/RZcHf0wDIfz+fw+juNH7cM80+12+zlN0+FyubyUUsRWQV9KKeM4fpxOp7fahwl4rX2APXNBIEZsxIiNGLERIzZixEaM2IgRGzFiI0ZsxIiNGLERIzZi+lL+fn5T+yDPtoffuHb9PM/XaZoOZQef38zzfC2lfNY+x175LJyYzpSPFBcEYlr/G/W32JCm11XWUm1pdl1lLdWe1tdVm39dsyUuCMSIjRixESM2YsRGjNiIERsxYiNGbMSIjRixESM2YsRGjNiIaXbK1+KZ967pKZ9pXltsEIgx5SOmhSebp9dGrH5dZUG1HateV1lQbUsL66rmbsn8m5e6xIiNGLERIzZixEaM2IgRGzFiI0ZsxIiNGLERIzZixEaM2IhZ9bpqrefi/6x+XWVBtR02CMRYVxFz75PN04Vvu2tdZeHEI3y5rrJw4lHuXVet8qZKW7zUJUZsxIiNGLERIzZixEaM2IgRGzFiI0ZsxIiNGLERIzZixEbMl+sqCyce5a51lYUTj2CDQIx1FTEuCMT8AbNY2LkzuLoMAAAAAElFTkSuQmCC" class="img-fluid figure-img"></td>
<td id="T_e3ff2_row6_col5" class="data row6 col5">0<br>
(0.0%)</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
</div>
</section>
<section id="sweetviz" class="level3">
<h3 class="anchored" data-anchor-id="sweetviz">Sweetviz</h3>
<p>O Sweetviz é uma ferramenta que nos dá um relatório completo dos dados, com gráficos e tabelas que nos ajudam a entender melhor os dados. Para instalar, basta rodar o comando <code>!pip install sweetviz</code> no seu Jupyter Notebook. Ele é muito fácil de usar, basta rodar o comando <code>sweetviz.analyze([seu_dataframe])</code> e ele vai gerar um relatório completo dos seus dados.</p>
<div id="cell-50" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sweetviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sv</span>
<span id="cb28-2"></span>
<span id="cb28-3">my_report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sv.analyze(df)</span>
<span id="cb28-4"></span>
<span id="cb28-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exibindo o relatório no próprio notebook</span></span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Existem outras opções de saída, como HTML e JSON.</span></span>
<span id="cb28-7">my_report.show_notebook()</span></code></pre></div>
</div>
</section>
<section id="d-tale" class="level3">
<h3 class="anchored" data-anchor-id="d-tale">D-Tale</h3>
<p>O D-Tale é uma ferramenta que nos dá um relatório completo dos dados, com gráficos e tabelas que nos ajudam a entender melhor os dados. Para instalar, basta rodar o comando <code>!pip install dtale</code> no seu Jupyter Notebook. Ele é muito fácil de usar, basta rodar o comando <code>dtale.show([seu_dataframe])</code> e ele vai gerar um relatório completo dos seus dados.</p>
<div id="cell-53" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dtale</span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dtale.app <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dtale_app</span>
<span id="cb29-4"></span>
<span id="cb29-5">dtale_app.USE_COLAB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb29-6"></span>
<span id="cb29-7">dtale.show(df)</span></code></pre></div>
</div>
<p>Infelizmente, não podemos ver o resultado aqui, mas você pode rodar no seu Jupyter Notebook ou Google Colab e ver o resultado.</p>
</section>
</section>
</section>
<section id="criando-os-testes-unitários" class="level1">
<h1>Criando os testes unitários</h1>
<p>Agora que sabemos sobre alguns dos tipos de testes que podemos aplicar aos nossos dados, vamos aprender como organizar isso de uma forma prática.</p>
<p>A idéia é englobar os testes aprendidos em funções que podem ser chamadas a qualquer momento, assim a cada alteração que fazemos no dataset, podemos validar o mesmo.</p>
<p>Em primeiro lugar, englobamos os testes que fizemos em funções.</p>
<div id="cell-57" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> teste_nulos(data_frame, coluna<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb30-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Verifica se o DataFrame ou uma Coluna específica possui valores nulos.</span></span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      Returns:</span></span>
<span id="cb30-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        True se houver valores nulos, False caso contrário.</span></span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb30-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> coluna <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb30-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> data_frame.isnull().values.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>()</span>
<span id="cb30-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb30-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> data_frame[coluna].isnull().values.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>()</span>
<span id="cb30-11"></span>
<span id="cb30-12"></span>
<span id="cb30-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> teste_eh_numero(data_frame, coluna):</span>
<span id="cb30-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Verifica se os valores de uma coluna são numéricos.</span></span>
<span id="cb30-15"></span>
<span id="cb30-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb30-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      True se algum dos valores não é numérico, False caso contrário.</span></span>
<span id="cb30-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb30-19">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pandas.api.types <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> is_numeric_dtype</span>
<span id="cb30-20"></span>
<span id="cb30-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> is_numeric_dtype(data_frame[coluna])</span>
<span id="cb30-22"></span>
<span id="cb30-23"></span>
<span id="cb30-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> teste_vazio(data_frame, coluna<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb30-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Verifica se o DataFrame ou uma Coluna específica está vazio.</span></span>
<span id="cb30-26"></span>
<span id="cb30-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      Returns:</span></span>
<span id="cb30-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        True se estiver vazio, False caso contrário.</span></span>
<span id="cb30-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb30-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> coluna <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb30-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> data_frame.empty</span>
<span id="cb30-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb30-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> data_frame[coluna].empty</span>
<span id="cb30-34"></span>
<span id="cb30-35"></span>
<span id="cb30-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> teste_condicional(data_frame, condicao):</span>
<span id="cb30-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Verifica se o DataFrame atende a uma condição.</span></span>
<span id="cb30-38"></span>
<span id="cb30-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb30-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      True se atender a condicão, False caso contrário.</span></span>
<span id="cb30-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb30-42">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_frame.query(condicao)</span>
<span id="cb30-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span>(result.empty)</span>
<span id="cb30-44"></span>
<span id="cb30-45"></span>
<span id="cb30-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> teste_valores(data_frame, coluna, valores):</span>
<span id="cb30-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Verifica se os valores de uma coluna estão contidos em uma lista.</span></span>
<span id="cb30-48"></span>
<span id="cb30-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb30-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      True se estiver na lista, False caso contrário.</span></span>
<span id="cb30-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb30-52">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_frame[coluna].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> valores).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>()</span>
<span id="cb30-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span></code></pre></div>
</div>
<p>A próxima etapa é criar uma função que irá chamar todas essas funções utilizando o comando <a href="https://www.hashtagtreinamentos.com/assert-em-python?gad_source=1&amp;gclid=CjwKCAjwnK60BhA9EiwAmpHZwyuM4NTnpYRAah1I0XwTUgO6m60fiSbxWIM_RmxkwLHddA-Yl9DqPBoCbrQQAvD_BwE">assert</a></p>
<p>O comando <code>assert</code> é utilizado para verificar se uma expressão é verdadeira. Se a expressão for verdadeira, o programa continua a execução normalmente. Se a expressão for falsa, o programa lança uma exceção do tipo <code>AssertionError</code>.</p>
<div id="cell-59" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_unit_test(data_frame):</span>
<span id="cb31-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb31-3">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> teste_nulos(data_frame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Existem valores nulos'</span></span>
<span id="cb31-4">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> teste_nulos(data_frame, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Existem valores nulos na coluna Name'</span></span>
<span id="cb31-5">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> teste_eh_numero(data_frame, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A coluna Age não é do tipo numérico'</span></span>
<span id="cb31-6">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> teste_vazio(data_frame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O data_frame está vazio'</span></span>
<span id="cb31-7">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> teste_condicional(data_frame, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age &lt; 40'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Não tem menores de quarenta'</span></span>
<span id="cb31-8">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> teste_valores(data_frame, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Category'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Category A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Category B'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Category C'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Categoria Invalida'</span></span>
<span id="cb31-9">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Testes finalizados com sucesso.'</span>)</span>
<span id="cb31-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">AssertionError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb31-11">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(e)</span></code></pre></div>
</div>
<p>Tendo criado a função, agora só resta executa-la, observar as falhas, aplicar as correções e rodar os testes unitários novamente, até que todos passem.</p>
<section id="a-execução" class="level4">
<h4 class="anchored" data-anchor-id="a-execução">1a Execução</h4>
<div id="cell-62" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">run_unit_test(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Existem valores nulos</code></pre>
</div>
</div>
<p>Para determinar isso, podemos apenas chamar a função info() do dataframe, que nos dá informações sobre o dataset, como o número de linhas, colunas, tipos de dados, etc.</p>
<div id="cell-64" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">df.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 50 entries, 0 to 49
Data columns (total 7 columns):
 #   Column      Non-Null Count  Dtype 
---  ------      --------------  ----- 
 0   Unnamed: 0  50 non-null     int64 
 1   ID          50 non-null     int64 
 2   Name        40 non-null     object
 3   Age         50 non-null     int64 
 4   Salary      50 non-null     int64 
 5   Join_Date   50 non-null     object
 6   Category    50 non-null     object
dtypes: int64(4), object(3)
memory usage: 2.9+ KB</code></pre>
</div>
</div>
<p>O campo Name está com problema. Vamos corrigir isso.</p>
<div id="cell-66" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Desconhecido'</span>)</span></code></pre></div>
</div>
<p>Agora, vamos para a segunda execução.</p>
</section>
<section id="a-execução-1" class="level4">
<h4 class="anchored" data-anchor-id="a-execução-1">2a Execução</h4>
<div id="cell-69" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">run_unit_test(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Testes finalizados com sucesso.</code></pre>
</div>
</div>
<p>Agora, é a coluna Age que está com problema. Vamos corrigir isso.</p>
<div id="cell-71" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>])</span></code></pre></div>
</div>
<p>Vamos para a 3a execução.</p>
</section>
<section id="a-execução-2" class="level4">
<h4 class="anchored" data-anchor-id="a-execução-2">3a Execução</h4>
<div id="cell-74" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">run_unit_test(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Testes finalizados com sucesso.</code></pre>
</div>
</div>
<p>Vamos ver os valores possíveis do campo Category.</p>
<div id="cell-76" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Category'</span>].unique().tolist()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>['Category B', 'Category C', 'Category A', 'No Category']</code></pre>
</div>
</div>
<p>Temos um No Category ali que está fazendo o teste falhar. Vamos corrigir isso. Mas qual seria a melhor correção? Trocar o valor por um dos válidos ou corrigir o teste? A resposta dependerá do contexto do negócio. Aqui, vamos assumir que corrigir o teste é a melhor alternativa.</p>
<div id="cell-78" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_unit_test(data_frame):</span>
<span id="cb44-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb44-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> teste_nulos(data_frame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Existem valores nulos"</span></span>
<span id="cb44-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> (</span>
<span id="cb44-5">            teste_nulos(data_frame, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb44-6">        ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Existem valores nulos na coluna Name"</span></span>
<span id="cb44-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> teste_eh_numero(data_frame, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A coluna Age não é do tipo numérico"</span></span>
<span id="cb44-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> teste_vazio(data_frame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"O data_frame está vazio"</span></span>
<span id="cb44-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> (</span>
<span id="cb44-10">            teste_condicional(data_frame, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age &lt; 40"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb44-11">        ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Não tem menores de quarenta"</span></span>
<span id="cb44-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> (</span>
<span id="cb44-13">            teste_valores(</span>
<span id="cb44-14">                data_frame, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Category"</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Category A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Category B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Category C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No Category"</span>]</span>
<span id="cb44-15">            )</span>
<span id="cb44-16">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb44-17">        ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Categoria Invalida"</span></span>
<span id="cb44-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Testes finalizados com sucesso."</span>)</span>
<span id="cb44-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">AssertionError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb44-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(e)</span></code></pre></div>
</div>
</section>
<section id="a-execução-3" class="level4">
<h4 class="anchored" data-anchor-id="a-execução-3">4a Execução</h4>
<div id="cell-80" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">run_unit_test(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Testes finalizados com sucesso.</code></pre>
</div>
</div>
<p>Agora sim, finalizamos o nosso processo de testar os dados. Agora, temos um dataset que está de acordo com as regras de negócio e podemos utilizá-lo para fazer análises.</p>
</section>
</section>
<section id="conclusão" class="level1">
<h1>Conclusão</h1>
<p>Neste artigo, aprendemos como fazer testes unitários em dados utilizando a biblioteca Pandas. Vimos que é possível fazer testes simples, como verificar se o dataset está vazio, se uma coluna está vazia, se existem valores nulos, se os tipos de dados estão corretos, etc. Também vimos que é possível fazer testes mais complexos, como verificar se os valores de uma coluna estão dentro de um intervalo esperado, se obedecem a uma lógica dependente de outras colunas, etc.</p>
<p>Aprendemos também como organizar esses testes em funções e como criar uma função que chama todas essas funções e verifica se os testes passaram ou não. Com isso, podemos garantir que os dados estão de acordo com as regras de negócio e que podemos utilizá-los para fazer análises.</p>
<p>Mas é importante lembrar que os testes unitários não são a única forma de garantir a qualidade dos dados. É importante também fazer uma análise exploratória dos dados, verificar se os dados estão de acordo com o esperado, se não há outliers, se a distribuição dos dados está correta, etc. E, é claro, é importante também fazer validações manuais, para garantir que os dados estão corretos.</p>
<p>Um abraço e até a próxima,</p>
<p>Walter.</p>


</section>

 ]]></description>
  <category>Visualização</category>
  <category>Pandas</category>
  <category>Teste</category>
  <category>ptbr</category>
  <guid>https://blog.wvcode.com.br/posts/testes-001/</guid>
  <pubDate>Mon, 28 Oct 2024 00:00:00 GMT</pubDate>
  <media:content url="https://blog.wvcode.com.br/library/concepts/programming_practice.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>AI na Análise de Dados - Classificação de Texto com a API da OpenAI</title>
  <dc:creator>Walter R. Paixão-Côrtes</dc:creator>
  <link>https://blog.wvcode.com.br/posts/p0004-classif-texto/</link>
  <description><![CDATA[ 





<section id="introdução" class="level2">
<h2 class="anchored" data-anchor-id="introdução">Introdução</h2>
<p>Olá, tudo bem?</p>
<p>A esta altura do ano de 2023, é quase impossível que você não tenha ouvido falar sobre o ChatGPT. E verdade seja dita, o ChatGPT é uma aplicação incrível, que permite sermos mais eficientes em diversas tarefas do dia dia-a-dia! Mas é importante salientar que ele é apenas uma aplicação, o que está por trás do ChatGPT e que chamamos de um LLM (Large Language Model) é o que realmente faz toda a mágica acontecer. Não iremos entrar em detalhes de como o modelo GPT (Generative Pretrained Transformer) funciona (veja os links no final do post), mas vamos explicar como podemos trazer todo esse poder para dentro de nossos códigos Python e criar scripts e aplicações que vão aumentar ainda mais nossa produtividade.</p>
<p>Este será o primeiro de uma série de artigos que visam auxiliar na compreensão de como as IAs podem ser assistentes poderosos para o Analista de Dados.</p>
</section>
<section id="classificação-de-dados" class="level2">
<h2 class="anchored" data-anchor-id="classificação-de-dados">Classificação de Dados</h2>
<p>Classificação de dados é uma tarefa de aprendizado supervisionado que envolve a categorização de uma determinada amostra de dados em uma das várias classes predefinidas. Cada amostra é atribuída a uma e somente uma classe, baseando-se nas características dessa amostra.</p>
<p>Por exemplo, imagine que você tem um conjunto de emails e você quer classificá-los como “spam” ou “não spam”. Nesse caso, “spam” e “não spam” são as classes, e cada email é uma amostra que será classificada em uma dessas classes.</p>
<p>A classificação é geralmente realizada utilizando algoritmos de aprendizado de máquina. Esses algoritmos aprendem a classificar novas amostras baseando-se em um conjunto de treinamento. O conjunto de treinamento é um conjunto de amostras para as quais as classes verdadeiras são conhecidas.</p>
<p>Os algoritmos de classificação incluem árvores de decisão, regressão logística, máquinas de vetores de suporte, redes neurais e muitos outros. A escolha do algoritmo depende de vários fatores, como a natureza dos dados, o número de classes, a necessidade de interpretabilidade e outros.</p>
<section id="mas-e-se-não-temos-conjuntos-de-dados-de-treinamento" class="level3">
<h3 class="anchored" data-anchor-id="mas-e-se-não-temos-conjuntos-de-dados-de-treinamento">Mas e se não temos conjuntos de dados de treinamento?</h3>
<p>Se você não tem um conjunto de dados de treinamento rotulado, ainda existem várias abordagens que você pode usar, tais como:</p>
<ol type="1">
<li><strong>Aprendizado não supervisionado</strong></li>
<li><strong>Aprendizado semi-supervisionado</strong></li>
<li><strong>Aprendizado por reforço</strong></li>
<li><strong>Rotulagem manual</strong></li>
<li><strong>Geração de rótulos sintéticos</strong></li>
<li><strong>Processamento de Linguagem Natural</strong></li>
</ol>
<p>E é nesta última opção que podemos utilizar o GPT para nos ajudar, pois o modelo do GPT é gigantesco, tendo sido treinado com conteúdo de toda a internet.</p>
</section>
<section id="gpt-versus-métodos-mais-tradicionais-de-classificação" class="level3">
<h3 class="anchored" data-anchor-id="gpt-versus-métodos-mais-tradicionais-de-classificação">GPT versus métodos mais tradicionais de classificação</h3>
<p>Os modelos de linguagem como o GPT (Generative Pretrained Transformer) têm várias vantagens e desvantagens, especialmente quando comparados a outros métodos de análise de texto. Aqui estão algumas delas:</p>
<p><strong>Vantagens:</strong></p>
<ol type="1">
<li><p><strong>Compreensão Profunda da Linguagem</strong>: O GPT é treinado em enormes quantidades de texto, o que lhe permite aprender uma rica compreensão da linguagem natural. Isso inclui uma compreensão de sintaxe, semântica, e até mesmo alguns elementos de conhecimento do mundo real.</p></li>
<li><p><strong>Versatilidade</strong>: O GPT pode ser usado para uma ampla gama de tarefas de processamento de linguagem natural, incluindo tradução de texto, geração de texto, resumo de texto, análise de sentimento, resposta a perguntas e muito mais.</p></li>
<li><p><strong>Aprendizado Transferível</strong>: O GPT utiliza o aprendizado transferível, o que significa que o conhecimento aprendido durante o treinamento em um grande conjunto de dados pode ser aplicado a tarefas específicas com relativamente poucos dados de treinamento adicionais. Isso permite ao GPT se adaptar a uma ampla gama de tarefas com um desempenho impressionante.</p></li>
<li><p><strong>Modelagem de Contexto</strong>: A arquitetura do Transformer, utilizada pelo GPT, é especialmente boa para entender o contexto em uma sequência de texto, o que é crucial para muitas tarefas de processamento de linguagem natural.</p></li>
</ol>
<p><strong>Desvantagens:</strong></p>
<ol type="1">
<li><p><strong>Necessidade de Grandes Quantidades de Dados de Treinamento</strong>: O GPT precisa de grandes quantidades de dados de treinamento para aprender efetivamente. Isso pode tornar o treinamento do modelo do zero proibitivamente caro em termos de tempo e recursos computacionais.</p></li>
<li><p><strong>Dificuldade de Interpretação</strong>: O GPT, como muitos modelos de aprendizado profundo, pode ser difícil de interpretar. Ele pode produzir resultados impressionantes, mas pode ser difícil entender por que fez uma determinada previsão.</p></li>
<li><p><strong>Sensibilidade ao Ruído e Erros</strong>: Embora o GPT seja robusto em muitos aspectos, ele pode ser sensível a ruído e erros no texto de entrada. Pequenas mudanças no texto de entrada podem às vezes levar a grandes mudanças nas previsões do modelo.</p></li>
<li><p><strong>Potencial de Viés</strong>: O GPT aprende com os dados em que é treinado, e se esses dados contêm viés, o modelo também pode exibir viés. Isso pode ser um problema significativo quando o modelo é usado em contextos sensíveis.</p></li>
</ol>
</section>
</section>
<section id="ok-o-gpt-é-legal-e-tudo-o-mais-mas-e-daí" class="level2">
<h2 class="anchored" data-anchor-id="ok-o-gpt-é-legal-e-tudo-o-mais-mas-e-daí">Ok, o GPT é legal e tudo o mais… Mas e daí?</h2>
<p>E daí que, graças ao modelo GPT, podemos ter um classificador de texto super calibrado para nos ajudar em nossas tarefas, sem o ônus de treinar tal modelo. E podemos utilizar o GPT a partir da API da OpenAI, de maneira muito simples! Outra vantagem que vale ressaltar é que, ao contrário de modelos tradicionais de classificação, podemos atribuir múltiplas categorias ao nosso texto.</p>
<p>Vamos ver um exemplo?</p>
</section>
<section id="organizando-um-catálogo-de-artigos" class="level2">
<h2 class="anchored" data-anchor-id="organizando-um-catálogo-de-artigos">Organizando um catálogo de artigos</h2>
<p>Imagine o seguinte cenário: temos uma lista de todos os artigos que salvamos no site Medium. O problema desta lista é que o Medium não oferece nenhum tipo de categorização dos artigos. A única maneira de fazer isso é separando em várias listas, o que dificulta principalmente o processo de busca dos artigos. Além, é claro, de pressupor a classificação antes de ler o artigo.</p>
<p>Essa tarefa realmente não é trivial, e seria muito útil poder fazer isso de forma automatizada. E o primeiro problema que temos é que nossa lista tem apenas o título e a url dos artigos. Para que a classificação seja mais precisa, precisamos de pelo menos algum texto que nos ajude a ter mais contexto a respeito do artigo.</p>
<p>Então, vamos criar o nosso script classificador? Esse script vai executar as seguintes tarefas:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
  A[Carregar Lista de Arquivos] --&gt; B
  B[Buscar Título e Resumo&lt;br&gt;dos Artigos] --&gt; C
  C[Classificar Artigos] --&gt; D[Salvar Lista de Artigos]
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<section id="inicializando-o-ambiente" class="level3">
<h3 class="anchored" data-anchor-id="inicializando-o-ambiente">Inicializando o ambiente</h3>
<p>Vamos utilizar as seguintes bibliotecas: - beautifulsoup4 - biblioteca para extrair a informação do HTML que contém a lista de artigos - openai - biblioteca para utilizar a API da openAI - requests - bibliotea para buscar informações da internet</p>
<div id="cell-16" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> openai</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> bs4</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> requests_html <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HTMLSession <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importando o objeto de sessão do html requests</span></span></code></pre></div>
</div>
<p>A próxima etapa é carregar variáveis de ambiente. Lembrando que é necessário ter uma API key para usar a API da OpenAI.</p>
<div id="cell-18" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">load_dotenv()</span>
<span id="cb2-2"></span>
<span id="cb2-3">openai.api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENAI_API_KEY"</span>)</span></code></pre></div>
</div>
<p>Agora, precisamos carregar nossa lista de artigos, que está em um arquivo HTML, que podemos baixar lá no site do Medium. Vamos criar uma função, de forma que poderemos re-utilizar essa parte da rotina sempre que for necessário.</p>
<div id="cell-20" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> retorna_lista(nomearquivo: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb3-2">  html_artigos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bs4.BeautifulSoup(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(nomearquivo, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>))</span>
<span id="cb3-3">  list_artigos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> html_artigos.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"li"</span>)</span>
<span id="cb3-4"></span>
<span id="cb3-5">  artigos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> list_artigos:</span>
<span id="cb3-7">    record <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb3-8">    record <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"titulo"</span>: item.a.text,</span>
<span id="cb3-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"link"</span>: item.a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"href"</span>],</span>
<span id="cb3-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"autores"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb3-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"resumo"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb3-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"categorias"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb3-14">    }</span>
<span id="cb3-15">    artigos.append(record)</span>
<span id="cb3-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> artigos</span></code></pre></div>
</div>
<p>Este código define uma função chamada “retorna_lista” que recebe um único parâmetro chamado “nomearquivo” do tipo string. A função primeiro abre o arquivo especificado pela string “nomearquivo” usando a função “open”, lê o conteúdo e usa o método “find_all” do Beautiful Soup para procurar todos os elementos de lista no documento HTML e armazená-los na variável “list_artigos”. A função, então, inicializa uma lista vazia chamada “artigos”. Em um loop, ela itera sobre cada item da lista na variável “list_artigos” e cria um dicionário chamado “record” com três chaves: “titulo”, “link”, “autores”, “resumo” e “categorias”. Os valores para “titulo” e “link” são extraídos do texto da tag “a” e do atributo “href”, respectivamente. O valor das chaves “autores”, “resumo” e “categorias” são uma string vazia. O dicionário “record” completo é então adicionado à lista “artigos”. Depois que todos os itens da lista são processados, a função retorna a lista “artigos”.</p>
<p>Então, podemos utilizar essa função conforme abaixo:</p>
<div id="cell-23" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">artigos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> retorna_lista(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reading-list-medium.html"</span>)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" Número de Artigos: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(artigos)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Número de Artigos: 1865.</code></pre>
</div>
</div>
<p>Vamos ver como ficou um registro:</p>
<div id="cell-25" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(json.dumps(artigos[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "titulo": "Prompting ChatGPT for Python Code Generation: An Effective Framework",
    "link": "https://medium.com/p/e323b2d24987",
    "autores": null,
    "resumo": null,
    "categorias": null
}</code></pre>
</div>
</div>
<p>Perfeito! Estamos com os artigos preparados para buscarmos os dados extra que nos darão mais contexto para a categorização.</p>
<p>Para fazer isso, vamos utilizar a biblioteca requests-html. Novamente, criaremos uma função para reutilizar depois.</p>
<div id="cell-27" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> retorna_campos(registro: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Declaramos variaveis que contem seletores HTML</span></span>
<span id="cb8-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Esses seletores nos ajudarão a encontrar os elementos HTML que contém o </span></span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># conteúdo referente ao autor, data publicação, titulo e lead</span></span>
<span id="cb8-5">    seletor_autor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb8-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#root &gt; div &gt; div &gt; div:nth-child(3) &gt; div &gt; article &gt; div &gt; div &gt; section &gt; div &gt; div:nth-child(3) &gt; div &gt; div &gt; div:nth-child(2) &gt; div &gt; div &gt; div &gt; div &gt; div &gt; div &gt; div &gt; span &gt; div &gt; div &gt; div &gt; div &gt; div &gt; p &gt; a"</span>, </span>
<span id="cb8-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#root &gt; div &gt; div &gt; div:nth-child(3) &gt; div &gt; article &gt; div &gt; div &gt; section &gt; div &gt; div:nth-child(3) &gt; div &gt; div &gt; div:nth-child(1) &gt; div &gt; div &gt; div &gt; div &gt; div &gt; div &gt; div &gt; span &gt; div &gt; div &gt; div &gt; div &gt; div &gt; p &gt; a"</span>, </span>
<span id="cb8-8">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#root &gt; div &gt; div &gt; div:nth-child(2) &gt; div &gt; article &gt; div &gt; div &gt; section &gt; div &gt; div:nth-child(2) &gt; div &gt; div &gt; div &gt; div &gt; div &gt; div &gt; div &gt; div &gt; div &gt; div &gt; span &gt; div &gt; div &gt; div &gt; div &gt; div &gt; p &gt; a"</span>, </span>
<span id="cb8-9">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#root &gt; div &gt; div &gt; div:nth-child(2) &gt; div &gt; article &gt; div &gt; div &gt; section &gt; div &gt; div:nth-child(3) &gt; div:nth-child(1) &gt; div &gt; div:nth-child(2) &gt; div &gt; div &gt; div &gt; div &gt; div &gt; div &gt; div &gt; span &gt; div &gt; div &gt; div &gt; div &gt; div &gt; p &gt; a"</span></span>
<span id="cb8-10">    ]</span>
<span id="cb8-11">    seletor_titulo_lead <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb8-12">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#root &gt; div &gt; div &gt; div:nth-child(3) &gt; div &gt; article &gt; div &gt; div &gt; section &gt; div &gt; div:nth-child(3) &gt; div &gt; div &gt; div:nth-child(2)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#root &gt; div &gt; div &gt; div:nth-child(2) &gt; div &gt; article &gt; div &gt; div &gt; section &gt; div &gt; div:nth-child(3) &gt; div:nth-child(1) &gt; div &gt; div:nth-child(2)"</span></span>
<span id="cb8-13">    ]</span>
<span id="cb8-14">  </span>
<span id="cb8-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inicializamos o objeto HTMLSession para fazer a coleta da informação dos artigos</span></span>
<span id="cb8-16">    request <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HTMLSession()</span>
<span id="cb8-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb8-18">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(registro[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"link"</span>])</span>
<span id="cb8-19">      conteudo_html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.get(registro[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"link"</span>])</span>
<span id="cb8-20">      autor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not available"</span></span>
<span id="cb8-21">      </span>
<span id="cb8-22">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> seletor_autor:</span>
<span id="cb8-23">        aux_autor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb8-24">        aux_autor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conteudo_html.html.find(item, first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> aux_autor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-26">          autor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aux_autor</span>
<span id="cb8-27">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb8-28"></span>
<span id="cb8-29">      head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not available"</span></span>
<span id="cb8-30">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> seletor_titulo_lead:</span>
<span id="cb8-31">        aux_head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb8-32">        aux_head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conteudo_html.html.find(item, first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> aux_head:</span>
<span id="cb8-34">          aux_lead <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aux_head.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h2'</span>, first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-35">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> aux_lead <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-36">            head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aux_lead.text</span>
<span id="cb8-37">          </span>
<span id="cb8-38">      registro[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"autores"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> autor.text</span>
<span id="cb8-39">      registro[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"resumo"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> head</span>
<span id="cb8-40">        </span>
<span id="cb8-41">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> registro</span>
<span id="cb8-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb8-43">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'URL </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{0}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> com erro. Verifique.'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(registro[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"link"</span>]))</span>
<span id="cb8-44">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
</div>
<p>A função <code>retorna_campos</code> faz o scraping de dados de páginas da web, especificamente páginas de notícias ou artigos de blog do Medium. Ele pega um dicionário de “registro” como entrada, que parece conter um “link” para uma página da web.</p>
<p>Passo-a-Passo:</p>
<ol type="1">
<li><p>Variáveis <code>seletor_autor</code> e <code>seletor_titulo_lead</code> são listas de seletores CSS. Seletores CSS são padrões usados para selecionar os elementos que você deseja estilizar. Aqui, eles são usados para identificar os elementos HTML onde as informações de autor e título/lead estão localizadas no HTML da página.</p></li>
<li><p>A função então inicia uma sessão HTML usando o módulo <code>HTMLSession()</code> do pacote <code>requests_html</code>, que é uma biblioteca Python para fazer solicitações HTTP e para parsing de HTML.</p></li>
<li><p>A função tenta fazer uma solicitação GET para a URL que está no campo “link” do dicionário de entrada.</p></li>
<li><p>Em seguida, a função tenta encontrar o autor do artigo. Para isso, itera sobre a lista <code>seletor_autor</code> e, para cada seletor, tenta encontrar um elemento correspondente na página HTML. Se encontrar um autor, interrompe o loop e guarda o autor encontrado.</p></li>
<li><p>Depois disso, a função tenta encontrar o título do artigo da mesma maneira, usando a lista <code>seletor_titulo_lead</code>.</p></li>
<li><p>Os resultados são então adicionados ao dicionário de entrada no campo “autores” para o autor e “resumo” para o título.</p></li>
<li><p>Se houver algum erro durante o processo, como um link quebrado ou se o seletor CSS não corresponder a nenhum elemento, a função exibe uma mensagem de erro e retorna None.</p></li>
<li><p>Se tudo correr bem, a função retorna o dicionário de entrada, agora com informações adicionais sobre o autor e o resumo do artigo.</p></li>
</ol>
<p>Agora vamos a execução da função para cada artigo em nossa lista. Observe que colocamos um limitador para fazer isso para 10 registros.</p>
<div id="cell-30" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">artigos_comp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-2">i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> artigos:</span>
<span id="cb9-4">    artigos_comp.append(retorna_campos(item))</span>
<span id="cb9-5">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb9-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>https://medium.com/p/e323b2d24987
https://medium.com/p/9e9536ebd839
https://medium.com/p/bb7d31ed2e76
https://medium.com/p/2688e319e2a5
https://medium.com/p/7edae42a20b3
https://medium.com/p/f87419cb14cb
https://medium.com/p/d6169fc81204
https://medium.com/p/74361bc3b92e
https://medium.com/p/9dc1566d960d
https://medium.com/p/3c053357c47f</code></pre>
</div>
</div>
<p>Agora temos os nossos artigos com título, autor e uma lead line, que vai nos ajudar no processo da categorização.</p>
<p>Vamos agora, a nossa rotina de categorização, usando a API do OpenAI.</p>
<div id="cell-32" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> retorna_categorias(titulo, resumo):</span>
<span id="cb11-2">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> openai.Completion.create(</span>
<span id="cb11-3">        engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text-davinci-003"</span>,</span>
<span id="cb11-4">        prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"We have these categories: dbt, Python, DataViz, Tableau, PowerBI, and Generative AI. Given those categories, please classify the following text with those categories: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>titulo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>resumo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. You can use only the categories listed. You can classify with multiple categories. If you think that none of the categories applies, you can tag as Other."</span>,</span>
<span id="cb11-5">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>,</span>
<span id="cb11-6">        max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb11-7">    )</span>
<span id="cb11-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text.strip()</span></code></pre></div>
</div>
<p>Este código define uma função chamada “retorna_categorias” que recebe dois parâmetros: “titulo” e “resumo”. A função utiliza a API OpenAI para classificar o título e o resumo com base em um conjunto de categorias previamente determinadas - dbt, Python, DataViz, Tableau, PowerBI e Generative AI. Em seguida, retorna o resultado da classificação como uma string.</p>
<p>A função retorna então a primeira (e única) escolha da resposta da API OpenAI, que é a string que representa a categoria que foi escolhida como a melhor correspondência para o texto de entrada. O método strip() é usado para remover qualquer espaço em branco inicial ou final da string retornada.</p>
<p>Observação: Para usar este código, o módulo openai precisa ser importado e uma chave de API OpenAI precisa ser obtida.</p>
<div id="cell-34" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">lista_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> artigos_comp:</span>
<span id="cb12-3">  item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"categorias"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> retorna_categorias(item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'titulo'</span>], item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resumo'</span>])</span>
<span id="cb12-4">  lista_final.append(item)</span></code></pre></div>
</div>
<p>Agora que executamos a rotina acima, podemos imprimir os três primeiros registros e verificar que agora, temos categorias.</p>
<div id="cell-36" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(lista_final):</span>
<span id="cb13-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(json.dumps(item, indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb13-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb13-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "titulo": "Prompting ChatGPT for Python Code Generation: An Effective Framework",
    "link": "https://medium.com/p/e323b2d24987",
    "autores": "John Loewen",
    "resumo": "I\u2019ve done the prompt engineering research so you don\u2019t have to",
    "categorias": "Python, Generative AI"
}
{
    "titulo": "Power BI: How I Started Using Python To Automate Tasks",
    "link": "https://medium.com/p/9e9536ebd839",
    "autores": "Gabe Araujo, M.Sc.",
    "resumo": "Not available",
    "categorias": "PowerBI, Python"
}
{
    "titulo": "Chat with your databases using LangChain",
    "link": "https://medium.com/p/bb7d31ed2e76",
    "autores": "Vishnu Sivan",
    "resumo": "Not available",
    "categorias": "Other"
}</code></pre>
</div>
</div>
<p>E aí estão os nossos artigos, devidamente categorizados. Inclusive, podemos ver um artigo que foi classificado como “Other”, indicando que o texto que foi enviado não foi suficiente para classificar com as categorias selecionadas.</p>
<p>Obrigado por ler até aqui! Espero que este script seja útil para vocês!!!</p>
</section>
</section>
<section id="links-úteis" class="level2">
<h2 class="anchored" data-anchor-id="links-úteis">Links Úteis</h2>
<ol type="1">
<li><a href="https://www.openai.com/blog/gpt-3/">Understanding GPT-3: OpenAI’s Language Generation AI: Blog oficial da OpenAI sobre GPT-3</a> - Apresenta uma explicação detalhada do GPT-3 e seu uso potencial</li>
<li><a href="https://www.geeksforgeeks.org/ml-data-classification/">Data Classification in Machine Learning</a> - Este é um artigo do site GeeksforGeeks que explica o conceito básico de classificação de dados em aprendizado de máquina, os diferentes tipos de algoritmos de classificação e como eles funcionam.</li>
<li>Bibliotecas Python utilizadas no artigo:
<ol type="1">
<li><a href="https://requests.readthedocs.io/projects/requests-html/en/latest/">requests-html</a></li>
<li><a href="https://platform.openai.com/docs/api-reference">openai</a></li>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup4</a></li>
</ol></li>
</ol>


</section>

 ]]></description>
  <category>OpenAI API</category>
  <guid>https://blog.wvcode.com.br/posts/p0004-classif-texto/</guid>
  <pubDate>Fri, 16 Jun 2023 00:00:00 GMT</pubDate>
  <media:content url="https://blog.wvcode.com.br/posts/p0004-classif-texto/nlp-text-classif.png" medium="image" type="image/png" height="48" width="144"/>
</item>
<item>
  <title>Power BI no Jupyter!</title>
  <dc:creator>Walter R. Paixão-Côrtes</dc:creator>
  <link>https://blog.wvcode.com.br/posts/p0003-powerbiclient/</link>
  <description><![CDATA[ 





<section id="introdução" class="level2">
<h2 class="anchored" data-anchor-id="introdução">Introdução</h2>
<p>Se você é um entusiasta de visualização de dados, cientista de dados ou analista de negócios em busca de novas maneiras de explorar e compartilhar seus dados, este post é para você. Prepare-se para descobrir como o poder do Power BI pode ser desbloqueado dentro do Jupyter Notebook, ampliando suas possibilidades de análise e proporcionando uma experiência envolvente e interativa.</p>
</section>
<section id="powerbi---rápida-introdução" class="level2">
<h2 class="anchored" data-anchor-id="powerbi---rápida-introdução">PowerBI - Rápida Introdução</h2>
<p>O Power BI é uma poderosa ferramenta de business intelligence desenvolvida pela Microsoft, projetada para ajudar as empresas a visualizar e analisar seus dados de maneira intuitiva e interativa. Com recursos avançados de criação de relatórios, painéis e dashboards personalizados, o Power BI permite que os usuários transformem seus dados em informações acionáveis, facilitando a tomada de decisões informadas em tempo real. E todo esse poder pode ser entregue tanto de forma independente quanto integrada a outros meios, através do que chamamos de embedded reports.</p>
<section id="power-bi-embeddings" class="level3">
<h3 class="anchored" data-anchor-id="power-bi-embeddings">Power BI Embeddings</h3>
<p>As capacidades de embedding do Power BI permitem que os desenvolvedores incorporem relatórios, painéis e visualizações interativas do Power BI diretamente em seus aplicativos, sites ou portais. Essa funcionalidade de integração oferece uma maneira flexível e personalizada de compartilhar informações e insights com usuários finais, proporcionando uma experiência perfeita e integrada. Com as capacidades de embedding do Power BI, os desenvolvedores podem aproveitar as APIs e SDKs disponíveis para incorporar visualizações interativas em seus aplicativos existentes, personalizar a aparência e a funcionalidade, controlar a segurança e permissões de acesso aos dados e até mesmo habilitar recursos como filtragem dinâmica e interação com os dados subjacentes. Essa flexibilidade permite que as organizações integrem as poderosas capacidades analíticas do Power BI diretamente em seus fluxos de trabalho, fornecendo aos usuários acesso direto a informações relevantes e atualizadas, tudo dentro do contexto de sua própria aplicação.</p>
<p>Entre outros conhecimentos, para trabalhar com embeddings, é necessário compreender:</p>
<ol type="1">
<li><p>Linguagens de programação: Ter conhecimentos básicos de programação é fundamental para interagir com as APIs e SDKs do Power BI. Python, JavaScript e .NET são exemplos de linguagens comumente usadas.</p></li>
<li><p>Desenvolvimento web: Familiaridade com desenvolvimento web é importante para incorporar e personalizar visualizações do Power BI. Isso inclui conhecimentos em HTML, CSS e JavaScript para integrar o código do Power BI em aplicativos e sites.</p></li>
<li><p>Autenticação e segurança: Compreender os conceitos de autenticação e autorização é crucial para garantir a segurança dos dados. Isso envolve entender como autenticar usuários no Power BI e definir permissões de acesso adequadas.</p></li>
<li><p>Power BI Desktop e serviço Power BI: Ter conhecimento sobre o Power BI Desktop e o serviço Power BI é essencial. Isso inclui habilidades em criação de relatórios, painéis e visualizações interativas, além de recursos de filtragem e interação.</p></li>
<li><p>Modelagem e transformação de dados: Noções básicas de modelagem e transformação de dados são úteis para preparar os dados antes de incorporá-los. Isso envolve limpeza, filtragem e organização dos dados para criar visualizações eficazes.</p></li>
</ol>
<p>Neste post, exploraremos a integração do Power BI com o Jupyter Notebook, combinando a flexibilidade do ambiente de codificação do Python com a riqueza de recursos do Power BI. Descobriremos como utilizar a biblioteca <code>powerbiclient</code> para trazer o poder do Power BI para dentro de um Jupyter Notebook.</p>
</section>
</section>
<section id="biblioteca-powerbiclient" class="level2">
<h2 class="anchored" data-anchor-id="biblioteca-powerbiclient">Biblioteca <code>powerbiclient</code></h2>
<p>A biblioteca <code>powerbiclient</code> é uma ferramenta poderosa que permite interagir com o serviço do Power BI diretamente por meio de APIs. Essa biblioteca, desenvolvida pela Microsoft, fornece uma interface de programação fácil de usar para criar, publicar, atualizar e gerenciar relatórios, dashboards e conjuntos de dados no Power BI. Com o <code>powerbiclient</code>, os desenvolvedores podem automatizar tarefas, extrair informações e integrar o Power BI a aplicativos, permitindo a criação de soluções personalizadas e aprimorando a capacidade de visualização e análise de dados. Essa biblioteca é uma excelente opção para aqueles que desejam aproveitar ao máximo o ecossistema do Power BI e incorporar suas funcionalidades em seus próprios fluxos de trabalho e aplicativos.</p>
<p>Dentre todas as possibilidades que esta biblioteca oferece, vamos focar em como carregar gráficos interativos em Power BI dentro do nosso notebook Jupyter. E vamos lá, sem demora!</p>
</section>
<section id="preparando-o-ambiente" class="level2">
<h2 class="anchored" data-anchor-id="preparando-o-ambiente">Preparando o ambiente</h2>
<p>Como sempre, o nosso primeiro passo é instalar as bibliotecas que estão faltando.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> pip install powerbiclient</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Nosso</span> próximo passo é inicializar o ambiente, chamando nossas bibliotecas.</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:::</span> {#cell-11 .cell execution_count=4}</span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">```</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">{.python</span> .cell-code}</span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">from</span> powerbiclient import QuickVisualize, get_dataset_config, Report</span>
<span id="cb1-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">from</span> powerbiclient.authentication import DeviceCodeLoginAuthentication</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">import</span> pandas as pd</span></code></pre></div>
<p>:::</p>
<p>Depois disso, vamos ao código de verdade!</p>
</section>
<section id="carregando-os-dados" class="level2">
<h2 class="anchored" data-anchor-id="carregando-os-dados">Carregando os dados</h2>
<p>A primeira tarefa, como em todo o trabalho de um cientista de dados, é carregar os dados em um DataFrame.</p>
<div id="cell-15" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">pokemons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pokemons.csv'</span>)</span></code></pre></div>
</div>
</section>
<section id="autenticando-no-serviço-do-power-bi" class="level2">
<h2 class="anchored" data-anchor-id="autenticando-no-serviço-do-power-bi">Autenticando no Serviço do Power BI</h2>
<p>Em seguida, temos que fazer a autenticação no serviço do Power BI. O Power BI, como todos os aplicativos do Office 365, requer que estejamos autenticados para utiliza-los. Aqui, o processo é simplificado, mas ainda requerido. Esse modo é o mais simples, se estiver interessado em outras maneiras, dê uma olhada mais a fundo na documentação da Microsoft.</p>
<div id="cell-18" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">device_auth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DeviceCodeLoginAuthentication()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Performing device flow authentication. Please follow the instructions below.
To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code A8EL2Y8WJ to authenticate.

Device flow authentication successfully completed.
You are now logged in .

The result should be passed only to trusted code in your notebook.</code></pre>
</div>
</div>
</section>
<section id="visualizando" class="level2">
<h2 class="anchored" data-anchor-id="visualizando">Visualizando!</h2>
<p>O próximo passo é plotar o gráfico usando o Power BI. Neste post vamos explorar a classe <code>QuickVisualize</code> que nos entregará um tipo de sumário dos nossos dados, como em uma Análise Exploratória de Dados. Para isso, enviamos nosso DataFrame, o objeto de autenticação e chamamos a função <code>PBI_visualize</code>.</p>
<div id="cell-21" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Power BI report from your data</span></span>
<span id="cb5-2">PBI_visualize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuickVisualize(get_dataset_config(pokemons), auth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device_auth)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Render the new report</span></span>
<span id="cb5-5">PBI_visualize</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"43ce7f1b3c004463a9409fb5cd45a9d9","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="finalizando" class="level2">
<h2 class="anchored" data-anchor-id="finalizando">Finalizando</h2>
<p>E desta forma, conseguimos trazer o Power BI e todo o seu poder para dentro do nosso notebook! E essa é apenas uma das formas que temos para trabalhar com Power BI dentro do notebook! Se você quiser aprender mais, não deixe de acessar a documentação da biblioteca <code>powerbiclient</code> em <a href="https://github.com/Microsoft/powerbi-jupyter">Power BI - Jupyter</a>.</p>


</section>

 ]]></description>
  <category>Pandas</category>
  <category>Power BI</category>
  <category>Jupyter</category>
  <guid>https://blog.wvcode.com.br/posts/p0003-powerbiclient/</guid>
  <pubDate>Tue, 30 May 2023 00:00:00 GMT</pubDate>
  <media:content url="https://blog.wvcode.com.br/posts/p0003-powerbiclient/jupyterpowerbi.png" medium="image" type="image/png" height="50" width="144"/>
</item>
<item>
  <title>Pandas AI - Converse com seu DataFrame</title>
  <dc:creator>Walter R. Paixão-Côrtes</dc:creator>
  <link>https://blog.wvcode.com.br/posts/p0002-pandasai/</link>
  <description><![CDATA[ 





<section id="introdução" class="level2">
<h2 class="anchored" data-anchor-id="introdução">Introdução</h2>
<p>Desde outubro do ano passado, com a liberação do ChatGPT 3.5, as interfaces conversacionais vem se popularizando de maneira muito rápida. É verdade que interfaces conversacionais não são novidade, e chatbots e assistentes virtuais vem dominando tarefas relacionadas a atendimento de clientes, mas desde o advento do ChatGPT, tem-se expandido para outras áreas de atuação.</p>
<p>Utilizamos o ChatGPT para criarmos resumos de textos longos, para consultar algo que ocorreu no passado, explicar conceitos e por aí vai. Já existem cursos que ensinam como utilizar o ChatGPT para criar campanhas de marketing nas redes sociais e outras tantas funções que são basicamente apoiadas em texto.</p>
<p>Dentro da programação, é possível gerar pequenos trechos de código e até páginas HTML e arquivos CSS inteiros.</p>
<section id="status-outubro2024" class="level3">
<h3 class="anchored" data-anchor-id="status-outubro2024">Status Outubro/2024</h3>
<p>Se você não estava embaixo de uma pedra, certamente já sabe que as LLMs vigentes são muito boas em análise de dados, gerando códigos muito bons, inclusive para alguns casos mais complexos. No entanto, o conteúdo deste artigo ainda tem relevância, pois mostra uma das muitas maneiras de integrar uma LLM ao processo de análise de dados.</p>
</section>
</section>
<section id="e-o-que-isso-tem-a-ver-com-ciências-de-dados" class="level2">
<h2 class="anchored" data-anchor-id="e-o-que-isso-tem-a-ver-com-ciências-de-dados">E o que isso tem a ver com Ciências de Dados?</h2>
<p>Os DataFrames são basicamente textos organizados em tabelas e colunas, que são correlacionados. Portanto, é possível carregar os dados em um modelo LLM (Large Language Model), habilitando a extração da informação destes DataFrames de maneira conversacional, como se estivéssemos dialogando. Mas o que realmente instiga esta nossa área é descobrir se podemos fazer este modelo realizar o trabalho de análise para nós, cientistas e analistas iniciantes (e até mesmo os mais experientes). A resposta mais recente que temos para isso é chamada de <code>Pandas AI</code>.</p>
</section>
<section id="o-que-é-o-pandas-ai" class="level2">
<h2 class="anchored" data-anchor-id="o-que-é-o-pandas-ai">O que é o Pandas AI?</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/p0002-pandasai/pandas-llamas.png" class="img-fluid figure-img"></p>
<figcaption>Pandas e Llamas</figcaption>
</figure>
</div>
<p>O Pandas AI é o melhor amigo do seu DataFrame! Com esta nova biblioteca, podemos dar aos nossos DataFrames a capacidade de serem consultados de maneira simples e eficiente, utilizando uma interface conversacional.</p>
<p>Então, vamos ver como podemos utilizar Pandas AI?</p>
<section id="preparando-o-ambiente" class="level3">
<h3 class="anchored" data-anchor-id="preparando-o-ambiente">Preparando o Ambiente</h3>
<p>A primeira coisa é garantir que seu ambiente tenha todas as bibliotecas necessárias instaladas: <code>Pandas</code>, <code>PandasAI</code>, <code>OpenAI</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> pip install pandas pandasai openai</span></code></pre></div>
<p>Então, vamos iniciar o nosso notebook. Temos que fazer o import das bibliotecas que vamos utilizar na nossa demonstração.</p>
<div id="cell-12" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pandasai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PandasAI</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pandasai.llm.openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span></code></pre></div>
</div>
<p>Observe que carregamos a função <code>load_dotenv</code>, pois iremos precisar carregar a chave de acesso para a API da OpenAI. Para fazer isso, podemos simplesmente executar a função.</p>
<div id="cell-14" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">load_dotenv()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>True</code></pre>
</div>
</div>
<p>O próximo passo é carregar os nossos dados no DataFrame. Como sempre, vamos utilizar o dataset de pokemons.</p>
<div id="cell-16" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">pokemons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pokemons.csv'</span>)</span></code></pre></div>
</div>
<p>Em seguida, vamos inicializar o LLM para que consigamos conversar com o nosso DataFrame.</p>
<div id="cell-18" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI(api_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OPENAI_API_KEY'</span>])</span>
<span id="cb6-2">pandas_ai <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PandasAI(llm)</span></code></pre></div>
</div>
<p>Até agora, tudo correu bem! Agora, podemos executar diversas vezes a função <code>pandas_ai.run</code>, passando nosso DataFrame e um prompt, e ele nos responderá. Vamos testar?</p>
<div id="cell-20" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">pandas_ai.run(pokemons, prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quantos pokemons temos no DataFrame?"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>'Unfortunately, I was not able to answer your question. Please try again. If the problem persists, try rephrasing your question.'</code></pre>
</div>
</div>
<p>Para verificar isso, podemos apenas ver o shape do DataFrame e confirmar:</p>
<div id="cell-22" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">pokemons.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>(1032, 44)</code></pre>
</div>
</div>
<p>De fato, 1032 pokemons. Vamos continuar?</p>
<div id="cell-24" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">pandas_ai.run(pokemons, prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quantos tipos de pokemons existem?"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>'Well, there are actually 18 different types of pokemons out there!'</code></pre>
</div>
</div>
<p>Vamos conferir?</p>
<div id="cell-26" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">tipos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([pokemons[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Type 1'</span>], pokemons[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Type 2'</span>]]).unique().tolist()</span>
<span id="cb13-2"></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tipos))</span>
<span id="cb13-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tipos)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>19
['Grass', 'Fire', 'Water', 'Bug', 'Normal', 'Dark', 'Poison', 'Electric', 'Ground', 'Ice', 'Fairy', 'Steel', 'Fighting', 'Psychic', 'Rock', 'Ghost', 'Dragon', 'Flying', nan]</code></pre>
</div>
</div>
<p>Parece que funciona mesmo! Note que o nosso vetor tem 19 posições porque está contando o nulo como um valor. Vamos nos aprofundar mais um pouco…</p>
<div id="cell-28" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">pandas_ai.run(pokemons, prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Liste os tipos com as quantidades de pokemons'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>'Existem diversos tipos de pokemons e suas quantidades variam. O tipo mais comum é o Normal, com 114 pokemons, seguido pelo tipo Água, com 131. Já o tipo Voador é o menos comum, com apenas 8 pokemons. Além disso, existem outros tipos como Fogo, Grama, Elétrico, Psíquico, entre outros, cada um com sua quantidade específica de pokemons. No total, existem mais de 800 espécies diferentes de pokemons.'</code></pre>
</div>
</div>
<p>Ele respondeu, mas não exatamente como queríamos - observe que ele listou alguns tipos apenas com suas quantidades. Vamos tentar melhorar, aplicando um pouco de prompt engineering (ou seja, escrever nossa solicitação de forma mais explícita).</p>
<div id="cell-30" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">pandas_ai.run(pokemons, prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Crie uma tabela que tem duas colunas: tipo de pokemon e quantidade. Liste todos os tipos possíveis e suas quantidades."</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>'Para responder à pergunta, criei uma tabela com duas colunas: tipo de pokemon e quantidade. Nessa tabela, listei todos os tipos possíveis de pokemon e suas respectivas quantidades. Por exemplo, há 81 pokemons do tipo Bug, 46 do tipo Dark, 42 do tipo Dragon, e assim por diante. No total, foram listados 18 tipos diferentes de pokemon e suas quantidades correspondentes.'</code></pre>
</div>
</div>
<p>Humm, ainda não conseguimos listar todos os tipos. Vamos explicar um pouco mais?</p>
<div id="cell-32" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">pandas_ai.run(pokemons, prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gerar uma listagem completa da quantidade de pokemons por tipo, em formato markdown."</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>'Para saber a quantidade de pokemons por tipo, podemos gerar uma listagem completa em formato markdown. Aqui está a tabela com o número de pokemons para cada tipo: \n\n| Type | Count |\n|------|-------|\n| Bug | 81 |\n| Dark | 46 |\n| Dragon | 42 |\n| Electric | 59 |\n| Fairy | 22 |\n| Fighting | 42 |\n| Fire | 64 |\n| Flying | 8 |\n| Ghost | 41 |\n| Grass | 91 |\n| Ground | 41 |\n| Ice | 38 |\n| Normal | 114 |\n| Poison | 40 |\n| Psychic | 77 |\n| Rock | 59 |\n| Steel | 36 |\n| Water | 131 |\n\nAssim, você pode ter uma visão geral da distribuição dos tipos de pokemons na lista.'</code></pre>
</div>
</div>
<p>Opa,agora foi. Mas como o notebook não formata markdown no output, precisamos fazer um copia e cola do resultado.</p>
<p>Para saber a quantidade de pokemons por tipo, podemos gerar uma listagem completa em formato markdown. Aqui está a tabela com o número de pokemons para cada tipo:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Type</th>
<th>Count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bug</td>
<td>81</td>
</tr>
<tr class="even">
<td>Dark</td>
<td>46</td>
</tr>
<tr class="odd">
<td>Dragon</td>
<td>42</td>
</tr>
<tr class="even">
<td>Electric</td>
<td>59</td>
</tr>
<tr class="odd">
<td>Fairy</td>
<td>22</td>
</tr>
<tr class="even">
<td>Fighting</td>
<td>42</td>
</tr>
<tr class="odd">
<td>Fire</td>
<td>64</td>
</tr>
<tr class="even">
<td>Flying</td>
<td>8</td>
</tr>
<tr class="odd">
<td>Ghost</td>
<td>41</td>
</tr>
<tr class="even">
<td>Grass</td>
<td>91</td>
</tr>
<tr class="odd">
<td>Ground</td>
<td>41</td>
</tr>
<tr class="even">
<td>Ice</td>
<td>38</td>
</tr>
<tr class="odd">
<td>Normal</td>
<td>114</td>
</tr>
<tr class="even">
<td>Poison</td>
<td>40</td>
</tr>
<tr class="odd">
<td>Psychic</td>
<td>77</td>
</tr>
<tr class="even">
<td>Rock</td>
<td>59</td>
</tr>
<tr class="odd">
<td>Steel</td>
<td>36</td>
</tr>
<tr class="even">
<td>Water</td>
<td>131</td>
</tr>
</tbody>
</table>
<p>Assim, você pode ter uma visão geral da distribuição dos tipos de pokemons na lista.’</p>
</section>
</section>
<section id="vamos-complicar-um-pouco" class="level2">
<h2 class="anchored" data-anchor-id="vamos-complicar-um-pouco">Vamos complicar um pouco?</h2>
<p>Nas primeiras perguntas, utilizamos perguntas que pedem respostas quase que diretas das métricas que temos no DataFrame. Contamos o número de pokemons, contamos valores distinto de tipos, agrupamos a contagem por tipos. Mas será que o Pandas AI pode fazer uma análise comparativa simples, tal como analisar uma métrica e retornar o insight solicitado?</p>
<div id="cell-36" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">pandas_ai.run(pokemons, prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Qual o pokemon mais pesado?"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>'Bem, o pokemon mais pesado é o Snorlax, ele pode chegar a pesar mais de 460 quilos!'</code></pre>
</div>
</div>
<p>Opa, e não é que respondeu? Mas, sem precipitação, vamos conferir: vamos executar uma query em pandas que filtra os pokemons com peso &gt;= ao do Snorlax.</p>
<div id="cell-38" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">pokemons[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight"</span>]].sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight"</span>).query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight &gt; 459"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Weight</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">925</td>
<td>Dusk Mane Necrozma</td>
<td>460.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">181</td>
<td>Snorlax</td>
<td>460.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">837</td>
<td>Hoopa Unbound</td>
<td>490.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">826</td>
<td>Avalugg</td>
<td>505.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1001</td>
<td>Stonjourner</td>
<td>520.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">445</td>
<td>Metagross</td>
<td>550.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">833</td>
<td>Zygarde Complete</td>
<td>610.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">578</td>
<td>Giratina-Origin</td>
<td>650.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1007</td>
<td>Copperajah</td>
<td>650.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">573</td>
<td>Dialga</td>
<td>683.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">254</td>
<td>Mega Steelix</td>
<td>740.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">577</td>
<td>Giratina</td>
<td>750.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1019</td>
<td>Zamazenta Crowned Shield</td>
<td>785.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1027</td>
<td>Glastrier</td>
<td>800.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">936</td>
<td>Melmetal</td>
<td>800.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1030</td>
<td>Calyrex Ice Rider</td>
<td>809.1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">932</td>
<td>Stakataka</td>
<td>820.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">923</td>
<td>Guzzlord</td>
<td>888.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">873</td>
<td>Mudsdale</td>
<td>920.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">446</td>
<td>Mega Metagross</td>
<td>942.9</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1020</td>
<td>Eternatus</td>
<td>950.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">456</td>
<td>Groudon</td>
<td>950.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">457</td>
<td>Primal Groudon</td>
<td>999.7</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">914</td>
<td>Cosmoem</td>
<td>999.9</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">921</td>
<td>Celesteela</td>
<td>999.9</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Ops, algo deu errado. Temos vários pokemons mais pesados. Será que ele não analisou todos os pokemons antes de responder? Quem sabe um problema nos dados? Vamos perguntar algo mais direto.</p>
<div id="cell-40" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">pandas_ai.run(pokemons, prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"O pokemon Dialga é mais ou menos pesado que o Snorlax?"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>'Well, it turns out that Snorlax is actually heavier than Dialga.'</code></pre>
</div>
</div>
<p>Isso certamente deve ser um problema. Ele passou a responder em inglês, como se tivesse perdido o contexto. Vamos perguntar de maneira diferente…</p>
<div id="cell-42" class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">pandas_ai.run(pokemons, prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Porque o pokemon Dialga é mais pesado que o Snorlax?"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>'Well, actually, Snorlax weighs more than Dialga.'</code></pre>
</div>
</div>
<p>É, ele realmente tem uma implicância com o Snorlax… Caso você não tenha lido nada a respeito do ChatGPT e LLMs em geral, esse tipo de erro é chamado de “alucinação” que ocorre quando o modelo produz resultados incorretos, correlacionando informações de maneira espúria.</p>
</section>
<section id="usando-outras-funcionalidades-do-pandas-via-conversação" class="level2">
<h2 class="anchored" data-anchor-id="usando-outras-funcionalidades-do-pandas-via-conversação">Usando outras funcionalidades do Pandas via conversação</h2>
<p>Agora vamos testar se o pandasAI consegue entender instruções para plotar gráficos. Isso é um DataFrame pandas, correto? Será que eu posso plotar um countplot() por geração?</p>
<div id="cell-45" class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">pandas_ai.run(pokemons, prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Plote um gráfico de colunas totalizando pokemons por geração."</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/p0002-pandasai/index_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>'Claro! Vou plotar um gráfico de colunas que mostra a quantidade total de pokemons por geração.'</code></pre>
</div>
</div>
<p>Parece que funcionou bem! Vamos tentar mais um?</p>
<div id="cell-47" class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"></span>
<span id="cb30-2">pandas_ai.run(pokemons, prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Plote um gráfico de pizza totalizando pokemons pelo campo lendário."</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/p0002-pandasai/index_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>'Sure, I can help you with that! To plot a pie chart showing the total number of legendary Pokémon, we need to gather the data first. Once we have the numbers, we can create a visual representation of the data using a pie chart. Would you like me to proceed with the task?'</code></pre>
</div>
</div>
</section>
<section id="o-que-aprendemos-até-aqui" class="level2">
<h2 class="anchored" data-anchor-id="o-que-aprendemos-até-aqui">O que aprendemos até aqui</h2>
<p>A biblioteca Pandas AI é uma biblioteca interessante, que nos permite “dialogar”com nossos DataFrames, extraindo informações do mesmo. Através de nossos exemplos, podemos verificar que quase tudo que podemos descobrir através de consultas normais pandas, podemos perguntar ao DataFrame através do Pandas AI.</p>
<section id="mas-nem-tudo-são-flores" class="level3">
<h3 class="anchored" data-anchor-id="mas-nem-tudo-são-flores">Mas nem tudo são flores…</h3>
<p>Apesar dos acertos, observamos que a biblioteca Pandas AI não é imune aos problemas comuns das LLM, e mesmo com uma base de conhecimento mais limitada, é acometida de alucinações. A biblioteca também sofre de um problema de performance: uma resposta que em pandas leva um segundo ou menos para ser mostrada, como podemos ver, pode levar até mais de 1 minuto usando PandasAI.</p>
<p>Por último, podemos perceber que a biblioteca ainda precisa um pouco mais de trabalho até mesmo em sua usabilidade - notamos que a mesma passa a responder em inglês quando a resposta está errada, deixando o usuário confuso.</p>
</section>
</section>
<section id="vale-a-pena-utilizar" class="level2">
<h2 class="anchored" data-anchor-id="vale-a-pena-utilizar">Vale a pena utilizar?</h2>
<p>Se você quer fazer explorações simples dos dados, parece ser uma boa idéia utilizar o PandasAI, visto que é mais fácil perguntar em português ou inglês do que lembrar a sintaxe de todos os comandos Pandas que você teria que fazer para isso. No entanto, é preciso tomar muito cuidado com os resultados, que podem estar errados, mas são comunicados com convicção.</p>
<p>É, com certeza, mais uma ferramenta no seu cinto de utilidades de cientista de dados, e como toda ferramenta, devemos conhece-la bem antes de usar. Explore mais, entenda suas limitações e faça o melhor uso possivel!</p>
<p>Até mais!!!</p>
<p>Walter.</p>


</section>

 ]]></description>
  <category>Ciência de Dados</category>
  <category>Pandas</category>
  <category>AI</category>
  <category>GPT</category>
  <guid>https://blog.wvcode.com.br/posts/p0002-pandasai/</guid>
  <pubDate>Mon, 29 May 2023 00:00:00 GMT</pubDate>
  <media:content url="https://blog.wvcode.com.br/posts/p0002-pandasai/panda-001.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Parte 09 - Seaborn - Melhorando seus Visuais</title>
  <dc:creator>Walter R. Paixão-Côrtes</dc:creator>
  <link>https://blog.wvcode.com.br/posts/data-110/</link>
  <description><![CDATA[ 





<p>Olá Devs!</p>
<p>Se você chegou até aqui, você já se familiarizou com o básico das bibliotecas seaborn, matplotlib e pandas! Esse conhecimento já garante a você a capacidade de realizar análises de dados e apresentar resultados de maneira simples e eficiente.</p>
<p>O próximo passo é ensiná-lo a dar a esses gráficos uma aparência extremamente profissional e que leve em conta as boas práticas da área de Visualização de Dados. Para isso, vamos apresentar um pequeno problema e a versão inicial da visualização com o conhecimento que temos e, depois, apresentamos o passo a passo com as boas práticas e como codifica-las, chegando a nossa versão final da visualização.</p>
<section id="problema" class="level2">
<h2 class="anchored" data-anchor-id="problema">Problema</h2>
<p>Considere o seguinte cenário: Você é um cientista de dados encarregado de fazer uma análise em cima dos dados da população mundial. Os seus gráficos serão incorporados em uma apresentação PowerPoint.</p>
<p>O gráfico que você deve montar mostra a evolução no tamanho da população dos países do bloco econômico BRICS (Brasil, Russia, India, China e Africa do Sul), fazendo uma comparação com os Estados Unidos. Deve ser um gráfico de barras, onde cada barra irá representar um ano ou década.</p>
<p>O arquivo com os dados pode ser encontrado <a href="https://media.githubusercontent.com/media/labeduc/datasets/main/worldpop/world_population.csv">aqui</a>. Você pode fazer o download e subir no seu Google Colab ou carregar diretamente do endereço.</p>
</section>
<section id="solução-passo-a-passo" class="level2">
<h2 class="anchored" data-anchor-id="solução-passo-a-passo">Solução Passo a Passo</h2>
<section id="carregando-bibliotecas" class="level3">
<h3 class="anchored" data-anchor-id="carregando-bibliotecas">Carregando Bibliotecas</h3>
<p>O primeiro passo é sempre carregar as bibliotecas que vamos utilizar.</p>
<div id="cell-7" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
</section>
<section id="carregando-dados" class="level3">
<h3 class="anchored" data-anchor-id="carregando-dados">Carregando dados</h3>
<p>A próxima etapa é carregar os dados. Durante o curso, utilizamos um arquivo local para fazer isso. Hoje vamos exercitar uma pequena variação. Como explicamos anteriormente, todos os nossos conjuntos de dados estão em um repositório no GitHub -&gt; <a href="https://github.com/labeduc/datasets">https://github.com/labeduc/datasets</a>. Ensinamos vocês a baixarem o repositório no seu computador e subir o arquivo que vocês vão trabalhar direto no Google Colab (que é temporário e precisar ser salvo lá cada vez que se abre o notebook) ou colocar no seu Google Drive e mapear o Google Drive no Google Colab.</p>
<p>Agora, vamos explorar uma capacidade da biblioteca pandas que é ler o arquivo direto da internet. O que fizemos foi ir até o Github e observar qual era a URL de download do arquivo que pretendemos usar. Copiamos e colocamos no primeiro parâmetro da função <code>read_csv()</code>.</p>
<div id="cell-10" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">worldpop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://media.githubusercontent.com/media/labeduc/datasets/main/worldpop/world_population.csv'</span>)</span></code></pre></div>
</div>
<p>Para verificar que temos os dados carregados, vamos pedir um sample de 2 linhas.</p>
<div id="cell-12" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">worldpop.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Rank</th>
<th data-quarto-table-cell-role="th">CCA3</th>
<th data-quarto-table-cell-role="th">Country</th>
<th data-quarto-table-cell-role="th">Capital</th>
<th data-quarto-table-cell-role="th">Continent</th>
<th data-quarto-table-cell-role="th">2022 Population</th>
<th data-quarto-table-cell-role="th">2020 Population</th>
<th data-quarto-table-cell-role="th">2015 Population</th>
<th data-quarto-table-cell-role="th">2010 Population</th>
<th data-quarto-table-cell-role="th">2000 Population</th>
<th data-quarto-table-cell-role="th">1990 Population</th>
<th data-quarto-table-cell-role="th">1980 Population</th>
<th data-quarto-table-cell-role="th">1970 Population</th>
<th data-quarto-table-cell-role="th">Area (km²)</th>
<th data-quarto-table-cell-role="th">Density (per km²)</th>
<th data-quarto-table-cell-role="th">Growth Rate</th>
<th data-quarto-table-cell-role="th">World Population Percentage</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">131</td>
<td>10</td>
<td>MEX</td>
<td>Mexico</td>
<td>Mexico City</td>
<td>North America</td>
<td>127504125</td>
<td>125998302</td>
<td>120149897</td>
<td>112532401</td>
<td>97873442</td>
<td>81720428</td>
<td>67705186</td>
<td>50289306</td>
<td>1964375</td>
<td>64.9082</td>
<td>1.0063</td>
<td>1.60</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">194</td>
<td>29</td>
<td>KOR</td>
<td>South Korea</td>
<td>Seoul</td>
<td>Asia</td>
<td>51815810</td>
<td>51844690</td>
<td>50994401</td>
<td>48813042</td>
<td>46788591</td>
<td>44120039</td>
<td>38170501</td>
<td>32601143</td>
<td>100210</td>
<td>517.0722</td>
<td>0.9997</td>
<td>0.65</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Perfeito, temos os dados, e estamos prontos para prosseguir.</p>
</section>
<section id="analisando-os-dados" class="level3">
<h3 class="anchored" data-anchor-id="analisando-os-dados">Analisando os dados</h3>
<p>A primeira coisa que podemos fazer nesta análise é descobrir quais são todos os campos de conjunto de dados, seus tipos de dados e se temos muitos campos vazios.</p>
<div id="cell-16" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">worldpop.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 234 entries, 0 to 233
Data columns (total 17 columns):
 #   Column                       Non-Null Count  Dtype  
---  ------                       --------------  -----  
 0   Rank                         234 non-null    int64  
 1   CCA3                         234 non-null    object 
 2   Country                      234 non-null    object 
 3   Capital                      234 non-null    object 
 4   Continent                    234 non-null    object 
 5   2022 Population              234 non-null    int64  
 6   2020 Population              234 non-null    int64  
 7   2015 Population              234 non-null    int64  
 8   2010 Population              234 non-null    int64  
 9   2000 Population              234 non-null    int64  
 10  1990 Population              234 non-null    int64  
 11  1980 Population              234 non-null    int64  
 12  1970 Population              234 non-null    int64  
 13  Area (km²)                   234 non-null    int64  
 14  Density (per km²)            234 non-null    float64
 15  Growth Rate                  234 non-null    float64
 16  World Population Percentage  234 non-null    float64
dtypes: float64(3), int64(10), object(4)
memory usage: 31.2+ KB</code></pre>
</div>
</div>
<p>A informação está bem estruturada: todos os campos tem valores, os campos númerico são de um tipo numérico, temos poucas categorias e são do tipo object, que basicamente diz que são texto.</p>
<p>Podemos perceber que estruturalmente, esse conjunto de dados tem um país por linha, com os anos sendo colunas. Em um cenário ideal, os nossos gráficos devem plotar a partir de uma única coluna de valor, e teríamos algum outro atributo para separa-los se for o caso.</p>
<p>Outro ponto a ser considerado é que precisamos apenas dos Estados Unidos e dos países do bloco econômico BRICS, então temos mais dados do que o necessário.</p>
<p>Isso significa que vamos fazer alguns ajustes nos nossos dados.</p>
</section>
<section id="transformando-os-dados" class="level3">
<h3 class="anchored" data-anchor-id="transformando-os-dados">Transformando os dados</h3>
<p>Acompanhem explicações nos comentários.</p>
<div id="cell-20" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Primeira coisa é selecionar apenas as colunas que vamos utilizar</span></span>
<span id="cb6-2">worldpop_sb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> worldpop[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Country"</span>, </span>
<span id="cb6-3">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1970 Population"</span>,</span>
<span id="cb6-4">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1980 Population"</span>,</span>
<span id="cb6-5">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1990 Population"</span>,</span>
<span id="cb6-6">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2000 Population"</span>,</span>
<span id="cb6-7">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2010 Population"</span>,</span>
<span id="cb6-8">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2015 Population"</span>,</span>
<span id="cb6-9">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2020 Population"</span>,</span>
<span id="cb6-10">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022 Population"</span>]]</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Em seguida, filtramos as linhas para pegar apenas US e os países do BRICS</span></span>
<span id="cb6-13">worldpop_sb2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> worldpop_sb.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Country in ('United States', 'Brazil', 'Russia', 'India', 'China', 'South Africa')"</span>)</span>
<span id="cb6-14"></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fazemos a transformação das colunas de ano em linhas.</span></span>
<span id="cb6-16">brics_us <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> worldpop_sb2.melt(id_vars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>, var_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>, value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>)</span>
<span id="cb6-17"></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pedimos uma amostra para ver como nossos dados ficaram.</span></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parece tudo certo, temos apenas paises do BRICS e US,</span></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no caso do Brasil, vemos agora duas linhas, uma para a</span></span>
<span id="cb6-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># informação do ano de 2022 e outra para 2015.</span></span>
<span id="cb6-22">brics_us.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Country</th>
<th data-quarto-table-cell-role="th">Year</th>
<th data-quarto-table-cell-role="th">Population</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1</td>
<td>China</td>
<td>1970 Population</td>
<td>822534450</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>China</td>
<td>1990 Population</td>
<td>1153704252</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">32</td>
<td>India</td>
<td>2015 Population</td>
<td>1322866505</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>China</td>
<td>2000 Population</td>
<td>1264099069</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>Brazil</td>
<td>2000 Population</td>
<td>175873720</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Aí estão nossos dados, devidamente formatados. Vamos agora plotar o gráfico.</p>
</section>
<section id="primeira-versão" class="level3">
<h3 class="anchored" data-anchor-id="primeira-versão">Primeira Versão</h3>
<div id="cell-23" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">sns.barplot(brics_us, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-110/index_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>E aí está nosso gráfico. A partir de agora, vamos passo a passo aplicando melhorias sucessivas.</p>
</section>
<section id="passo-1---adicionando-títulos" class="level3">
<h3 class="anchored" data-anchor-id="passo-1---adicionando-títulos">Passo 1 - Adicionando Títulos</h3>
<p>Os gráficos precisam de títulos, preferencialmente um título que esclareça o significado do gráfico. Em nossas aulas anteriores, já haviamos adicionado títulos significativos em nossos gráficos e nos eixos também. Então, vamos apenas relembrar.</p>
<div id="cell-27" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">sns.barplot(brics_us, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>)</span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Esta função adiciona um título no gráfico</span></span>
<span id="cb8-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Crescimento Populacional no BRICS (1970 - 2020)'</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estas funções nos permitem alterar o títulos nos eixos</span></span>
<span id="cb8-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Países'</span>)</span>
<span id="cb8-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'População'</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-110/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="passo-2---ajustando-tamanho-da-imagem" class="level3">
<h3 class="anchored" data-anchor-id="passo-2---ajustando-tamanho-da-imagem">Passo 2 - Ajustando tamanho da imagem</h3>
<p>Ao olharmos nosso gráfico, logo percebemos que os nomes dos países estão se sobrepondo no final. Para este e muitos outros ajustes, vamos introduzir a propriedade rcParams. Esta propriedade é um dicionário que armazena outras configurações. Você pode encontrar mais informaç!oes <a href="https://matplotlib.org/stable/api/matplotlib_configuration_api.html#matplotlib.rcParams">aqui</a>.</p>
<div id="cell-30" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># É aconselhavel mudar o tamanho da imagem antes de plotar</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para tanto, o MatPlotLib nos permite modificar entradas </span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># em um dicionário de parâmetros chamado rcParams.</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A nossa modificação será da entrada figure.figsize</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Este parâmetro recebe uma tupla com largura e altura em polegadas</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O valor padrão é 6.4 de largura e 4.8 de altura em polegadas</span></span>
<span id="cb9-7">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.figsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb9-8"></span>
<span id="cb9-9">sns.barplot(brics_us, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Esta função adiciona um título no gráfico</span></span>
<span id="cb9-12">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Crescimento Populacional no BRICS (1970 - 2020)'</span>)</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estas funções nos permitem alterar o títulos nos eixos</span></span>
<span id="cb9-15">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Países'</span>)</span>
<span id="cb9-16">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'População'</span>)</span>
<span id="cb9-17"></span>
<span id="cb9-18">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-110/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Esse tamanho deixou as barras mais separadas, e agora conseguimos ver claramente todos os países.</p>
</section>
<section id="passo-3---ajustando-qualidade-da-imagem" class="level3">
<h3 class="anchored" data-anchor-id="passo-3---ajustando-qualidade-da-imagem">Passo 3 - Ajustando Qualidade da Imagem</h3>
<p>Dentro do contexto de visualização online, nosso gráfico parece bom. Mas, se precisarmos exportar esse gráfico como imagem para usar em um powerpoint, por exemplo, veremos que a qualidade da imagem ficará ruim. Isso acontece porque o padrão do matplotlib é gerar imagens com resolução de 100dpi. Para exportar, normalmente é recomendado utilizar 300dpi. Vamos arrumar isso e ver como fica?</p>
<div id="cell-34" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># É aconselhavel mudar o tamanho da imagem antes de plotar</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para tanto, o MatPlotLib nos permite modificar entradas </span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># em um dicionário de parâmetros chamado rcParams.</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A nossa modificação será da entrada figure.figsize</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Este parâmetro recebe uma tupla com largura e altura em polegadas</span></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O valor padrão é 6.4 de largura e 4.8 de altura em polegadas</span></span>
<span id="cb10-7">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.figsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Ajustando qualidade da imagem</span></span>
<span id="cb10-10">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb10-11">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb10-12">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.format"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"svg"</span></span>
<span id="cb10-13"></span>
<span id="cb10-14">sns.barplot(brics_us, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>)</span>
<span id="cb10-15"></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Esta função adiciona um título no gráfico</span></span>
<span id="cb10-17">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Crescimento Populacional no BRICS (1970 - 2020)'</span>)</span>
<span id="cb10-18"></span>
<span id="cb10-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estas funções nos permitem alterar o títulos nos eixos</span></span>
<span id="cb10-20">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Países'</span>)</span>
<span id="cb10-21">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'População'</span>)</span>
<span id="cb10-22"></span>
<span id="cb10-23">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-110/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="passo-4---removendo-o-ruído-do-gráfico" class="level3">
<h3 class="anchored" data-anchor-id="passo-4---removendo-o-ruído-do-gráfico">Passo 4 - Removendo o “Ruído” do Gráfico</h3>
<p>De acordo com as boas práticas na área de visualização, uma boa visualização é limpa, ou seja, não possui elementos que não estejam relacionados aos dados. No gráfico acima, o box em torno do gráfico, a legenda com muito texto, aquela informação 1e9 perdida no gráfico são ruídos, que tiram a atenção das barras que são os dados.</p>
<div id="cell-37" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># É aconselhavel mudar o tamanho da imagem antes de plotar</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para tanto, o MatPlotLib nos permite modificar entradas </span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># em um dicionário de parâmetros chamado rcParams.</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A nossa modificação será da entrada figure.figsize</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Este parâmetro recebe uma tupla com largura e altura em polegadas</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O valor padrão é 6.4 de largura e 4.8 de altura em polegadas</span></span>
<span id="cb11-7">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.figsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Ajustando qualidade da imagem</span></span>
<span id="cb11-10">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb11-11">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb11-12">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.format"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"svg"</span></span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para remover parte do box da imagem, fazemos isso:</span></span>
<span id="cb11-15">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.right"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb11-16">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.top"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb11-17">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.bottom"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb11-18"></span>
<span id="cb11-19">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plain"</span>, useLocale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-20"></span>
<span id="cb11-21">sns.barplot(brics_us, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>)</span>
<span id="cb11-22"></span>
<span id="cb11-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Esta função adiciona um título no gráfico</span></span>
<span id="cb11-24">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Crescimento Populacional no BRICS (1970 - 2020)'</span>)</span>
<span id="cb11-25"></span>
<span id="cb11-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estas funções nos permitem alterar o títulos nos eixos</span></span>
<span id="cb11-27">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Países'</span>)</span>
<span id="cb11-28">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'População'</span>)</span>
<span id="cb11-29"></span>
<span id="cb11-30">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-110/index_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Conseguimos deixar a imagem maior, removemos alguns elementos que adicionavam apenas ruído no gráfico. Mas observem que agora a formatação dos valores no eixo Y está estranho. Vamos corrigir?</p>
<div id="cell-39" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># É aconselhavel mudar o tamanho da imagem antes de plotar</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para tanto, o MatPlotLib nos permite modificar entradas </span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># em um dicionário de parâmetros chamado rcParams.</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A nossa modificação será da entrada figure.figsize</span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Este parâmetro recebe uma tupla com largura e altura em polegadas</span></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O valor padrão é 6.4 de largura e 4.8 de altura em polegadas</span></span>
<span id="cb12-7">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.figsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Ajustando qualidade da imagem</span></span>
<span id="cb12-10">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb12-11">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb12-12">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.format"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"svg"</span></span>
<span id="cb12-13"></span>
<span id="cb12-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para remover parte do box da imagem, fazemos isso:</span></span>
<span id="cb12-15">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.right"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb12-16">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.top"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb12-17">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.bottom"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb12-18"></span>
<span id="cb12-19">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plain"</span>, useLocale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-20"></span>
<span id="cb12-21">sns.barplot(brics_us, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>)</span>
<span id="cb12-22"></span>
<span id="cb12-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aqui buscamos os valores que foram adicionados no eixo e os modificamos </span></span>
<span id="cb12-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># com a formatação adequada</span></span>
<span id="cb12-25">current_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.gca().get_yticks()</span>
<span id="cb12-26">plt.gca().set_yticklabels([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.1f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> current_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000000</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-27"></span>
<span id="cb12-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Esta função adiciona um título no gráfico</span></span>
<span id="cb12-29">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Crescimento Populacional no BRICS (1970 - 2020)'</span>)</span>
<span id="cb12-30"></span>
<span id="cb12-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estas funções nos permitem alterar o títulos nos eixos</span></span>
<span id="cb12-32">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Países'</span>)</span>
<span id="cb12-33">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'População (bilhões)'</span>)</span>
<span id="cb12-34"></span>
<span id="cb12-35">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_382990/823456077.py:26: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.
  plt.gca().set_yticklabels(['{:,.1f}'.format(x) for x in current_values/1000000000]);</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-110/index_files/figure-html/cell-12-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Por último, vamos remover o label do eixo X.</p>
<div id="cell-41" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># É aconselhavel mudar o tamanho da imagem antes de plotar</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para tanto, o MatPlotLib nos permite modificar entradas </span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># em um dicionário de parâmetros chamado rcParams.</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A nossa modificação será da entrada figure.figsize</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Este parâmetro recebe uma tupla com largura e altura em polegadas</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O valor padrão é 6.4 de largura e 4.8 de altura em polegadas</span></span>
<span id="cb14-7">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.figsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb14-8"></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Ajustando qualidade da imagem</span></span>
<span id="cb14-10">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb14-11">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb14-12">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.format"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"svg"</span></span>
<span id="cb14-13"></span>
<span id="cb14-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para remover parte do box da imagem, fazemos isso:</span></span>
<span id="cb14-15">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.right"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb14-16">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.top"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb14-17">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.bottom"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb14-18"></span>
<span id="cb14-19">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plain"</span>, useLocale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb14-20"></span>
<span id="cb14-21">sns.barplot(brics_us, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>)</span>
<span id="cb14-22"></span>
<span id="cb14-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aqui buscamos os valores que foram adicionados no eixo e os modificamos </span></span>
<span id="cb14-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># com a formatação adequada</span></span>
<span id="cb14-25">current_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.gca().get_yticks()</span>
<span id="cb14-26">plt.gca().set_yticklabels([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.1f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> current_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000000</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-27"></span>
<span id="cb14-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Esta função adiciona um título no gráfico</span></span>
<span id="cb14-29">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Crescimento Populacional no BRICS (1970 - 2020)'</span>)</span>
<span id="cb14-30"></span>
<span id="cb14-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estas funções nos permitem alterar o títulos nos eixos</span></span>
<span id="cb14-32">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb14-33">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'População (bilhões)'</span>)</span>
<span id="cb14-34"></span>
<span id="cb14-35">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_382990/1234354454.py:26: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.
  plt.gca().set_yticklabels(['{:,.1f}'.format(x) for x in current_values/1000000000]);</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-110/index_files/figure-html/cell-13-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="passo-5---colocando-foco-nos-dados" class="level3">
<h3 class="anchored" data-anchor-id="passo-5---colocando-foco-nos-dados">Passo 5 - Colocando foco nos dados</h3>
<p>Agora que trabalhamos na formatação inicial, precisamos realizar melhorias que irão nos ajudar a colocar o foco nos dados. Eis o que vamos fazer: - diminuir a legenda - Alinhar o título a esquerda - o título centralizado faz com que os olhos façam um escaneamento extra do gráfico, dificultando a compreensão - vamos colocar os valores em cima de cada barra. Também para evitar que precisemos olhar no eixo a esquerda para ver o valor de cada barra, ou seja, que fiquemos constantemente escaneando o gráfico - ajustar o tamanho das fontes - ajustar as cores.</p>
<section id="diminuindo-a-legenda" class="level4">
<h4 class="anchored" data-anchor-id="diminuindo-a-legenda">Diminuindo a legenda</h4>
<p>A princípio, podemos resolver isso manipulando os dados.</p>
<div id="cell-46" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">brics_us[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> brics_us[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' Population'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>))</span></code></pre></div>
</div>
<p>Vamos ver o resultado?</p>
<div id="cell-48" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># É aconselhavel mudar o tamanho da imagem antes de plotar</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para tanto, o MatPlotLib nos permite modificar entradas </span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># em um dicionário de parâmetros chamado rcParams.</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A nossa modificação será da entrada figure.figsize</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Este parâmetro recebe uma tupla com largura e altura em polegadas</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O valor padrão é 6.4 de largura e 4.8 de altura em polegadas</span></span>
<span id="cb17-7">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.figsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb17-8"></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Ajustando qualidade da imagem</span></span>
<span id="cb17-10">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb17-11">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb17-12">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.format"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"svg"</span></span>
<span id="cb17-13"></span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para remover parte do box da imagem, fazemos isso:</span></span>
<span id="cb17-15">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.right"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb17-16">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.top"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb17-17">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.bottom"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb17-18"></span>
<span id="cb17-19">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plain"</span>, useLocale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb17-20"></span>
<span id="cb17-21">sns.barplot(brics_us, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>)</span>
<span id="cb17-22"></span>
<span id="cb17-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aqui buscamos os valores que foram adicionados no eixo e os modificamos </span></span>
<span id="cb17-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># com a formatação adequada</span></span>
<span id="cb17-25">current_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.gca().get_yticks()</span>
<span id="cb17-26">plt.gca().set_yticklabels([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.1f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> current_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000000</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-27"></span>
<span id="cb17-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Esta função adiciona um título no gráfico</span></span>
<span id="cb17-29">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Crescimento Populacional no BRICS (1970 - 2020)'</span>)</span>
<span id="cb17-30"></span>
<span id="cb17-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estas funções nos permitem alterar o títulos nos eixos</span></span>
<span id="cb17-32">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb17-33">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'População (bilhões)'</span>)</span>
<span id="cb17-34"></span>
<span id="cb17-35">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_382990/1234354454.py:26: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.
  plt.gca().set_yticklabels(['{:,.1f}'.format(x) for x in current_values/1000000000]);</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-110/index_files/figure-html/cell-15-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="alinhar-o-titulo-e-diminuir-fontes" class="level4">
<h4 class="anchored" data-anchor-id="alinhar-o-titulo-e-diminuir-fontes">Alinhar o Titulo e Diminuir fontes</h4>
<div id="cell-50" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># É aconselhavel mudar o tamanho da imagem antes de plotar</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para tanto, o MatPlotLib nos permite modificar entradas </span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># em um dicionário de parâmetros chamado rcParams.</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A nossa modificação será da entrada figure.figsize</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Este parâmetro recebe uma tupla com largura e altura em polegadas</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O valor padrão é 6.4 de largura e 4.8 de altura em polegadas</span></span>
<span id="cb19-7">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.figsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Ajustando qualidade da imagem</span></span>
<span id="cb19-10">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb19-11">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb19-12">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.format"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"svg"</span></span>
<span id="cb19-13"></span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para remover parte do box da imagem, fazemos isso:</span></span>
<span id="cb19-15">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.right"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb19-16">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.top"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb19-17">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.bottom"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb19-18"></span>
<span id="cb19-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Fontes</span></span>
<span id="cb19-20">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"legend.fontsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb19-21">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"legend.title_fontsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb19-22">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"legend.frameon"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb19-23"></span>
<span id="cb19-24">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plain"</span>, useLocale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb19-25">plt.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb19-26"></span>
<span id="cb19-27">sns.barplot(brics_us, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>)</span>
<span id="cb19-28"></span>
<span id="cb19-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aqui buscamos os valores que foram adicionados no eixo e os modificamos </span></span>
<span id="cb19-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># com a formatação adequada</span></span>
<span id="cb19-31">current_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.gca().get_yticks()</span>
<span id="cb19-32">plt.gca().set_yticklabels([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.1f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> current_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000000</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-33"></span>
<span id="cb19-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Esta função adiciona um título no gráfico</span></span>
<span id="cb19-35">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Crescimento Populacional no BRICS (1970 - 2020)'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb19-36"></span>
<span id="cb19-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estas funções nos permitem alterar o títulos nos eixos</span></span>
<span id="cb19-38">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb19-39">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'População (bilhões)'</span>)</span>
<span id="cb19-40"></span>
<span id="cb19-41">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_382990/1419233821.py:32: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.
  plt.gca().set_yticklabels(['{:,.1f}'.format(x) for x in current_values/1000000000]);</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-110/index_files/figure-html/cell-16-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="removendo-o-eixo-y-e-adicionando-os-valores-nas-barras" class="level4">
<h4 class="anchored" data-anchor-id="removendo-o-eixo-y-e-adicionando-os-valores-nas-barras">Removendo o eixo Y e adicionando os valores nas barras</h4>
<div id="cell-52" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># É aconselhavel mudar o tamanho da imagem antes de plotar</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para tanto, o MatPlotLib nos permite modificar entradas </span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># em um dicionário de parâmetros chamado rcParams.</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A nossa modificação será da entrada figure.figsize</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Este parâmetro recebe uma tupla com largura e altura em polegadas</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O valor padrão é 6.4 de largura e 4.8 de altura em polegadas</span></span>
<span id="cb21-7">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.figsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Ajustando qualidade da imagem</span></span>
<span id="cb21-10">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb21-11">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb21-12">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.format"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"svg"</span></span>
<span id="cb21-13"></span>
<span id="cb21-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para remover parte do box da imagem, fazemos isso:</span></span>
<span id="cb21-15">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.left"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb21-16">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.right"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb21-17">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.top"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb21-18">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.bottom"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb21-19"></span>
<span id="cb21-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Fontes</span></span>
<span id="cb21-21">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"legend.fontsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb21-22">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"legend.title_fontsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb21-23">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"legend.frameon"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb21-24"></span>
<span id="cb21-25">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plain"</span>, useLocale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb21-26">plt.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb21-27"></span>
<span id="cb21-28">sx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.barplot(brics_us, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>)</span>
<span id="cb21-29"></span>
<span id="cb21-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aqui buscamos os valores que foram adicionados no eixo e os modificamos </span></span>
<span id="cb21-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># com a formatação adequada</span></span>
<span id="cb21-32">current_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.gca().get_yticks()</span>
<span id="cb21-33">plt.gca().set_yticklabels([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.1f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> current_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000000</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-34"></span>
<span id="cb21-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Esta função adiciona um título no gráfico</span></span>
<span id="cb21-36">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Crescimento Populacional no BRICS (1970 - 2020)'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb21-37"></span>
<span id="cb21-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estas funções nos permitem alterar o títulos nos eixos</span></span>
<span id="cb21-39">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb21-40"></span>
<span id="cb21-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Removendo todo o eixo Y</span></span>
<span id="cb21-42">sx.get_yaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb21-43"></span>
<span id="cb21-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O Objeto patches contém todos os elementos (neste caso barras) que foram plotados no gráfico</span></span>
<span id="cb21-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Então percorremos eles e fazemos os seguintes calculos:</span></span>
<span id="cb21-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a coordenada x para posicionar o texto = Coordenada X do canto superior da barra + largura da barra / 2</span></span>
<span id="cb21-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a coordenada Y para posicionar o texto = Coordenada Y do canto superior da barra + 1% desta altura</span></span>
<span id="cb21-48"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sx.patches:</span>
<span id="cb21-49">  _x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (p.get_x() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p.get_width() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb21-50">  _y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.get_y() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p.get_height() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (p.get_height()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb21-51">  value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(p.get_height()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000000</span>)</span>
<span id="cb21-52">  sx.text(_x, _y, value, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) </span>
<span id="cb21-53"></span>
<span id="cb21-54">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_382990/1997790246.py:33: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.
  plt.gca().set_yticklabels(['{:,.1f}'.format(x) for x in current_values/1000000000]);</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-110/index_files/figure-html/cell-17-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="acertando-as-cores" class="level4">
<h4 class="anchored" data-anchor-id="acertando-as-cores">Acertando as cores</h4>
<p>A paleta de cores precisa ser ajustada para respeitar as cores da empresa.</p>
<div id="cell-55" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># É aconselhavel mudar o tamanho da imagem antes de plotar</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para tanto, o MatPlotLib nos permite modificar entradas </span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># em um dicionário de parâmetros chamado rcParams.</span></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A nossa modificação será da entrada figure.figsize</span></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Este parâmetro recebe uma tupla com largura e altura em polegadas</span></span>
<span id="cb23-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O valor padrão é 6.4 de largura e 4.8 de altura em polegadas</span></span>
<span id="cb23-7">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.figsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb23-8"></span>
<span id="cb23-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Definindo a paleta de cores</span></span>
<span id="cb23-10">cores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c4f6a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#177498"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0a8faa"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bfdce5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#82bd4a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b8d67a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b2b3b6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#58585a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#edb634"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d97933"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f1bdb1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eca091"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e26c54"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b0391e"</span>]</span>
<span id="cb23-11">sns.set_palette(sns.color_palette(cores))</span>
<span id="cb23-12"></span>
<span id="cb23-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Ajustando qualidade da imagem</span></span>
<span id="cb23-14">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb23-15">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb23-16">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.format"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"svg"</span></span>
<span id="cb23-17"></span>
<span id="cb23-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para remover parte do box da imagem, fazemos isso:</span></span>
<span id="cb23-19">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.left"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb23-20">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.right"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb23-21">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.top"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb23-22">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.bottom"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb23-23"></span>
<span id="cb23-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Fontes</span></span>
<span id="cb23-25">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"legend.fontsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb23-26">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"legend.title_fontsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb23-27">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"legend.frameon"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb23-28"></span>
<span id="cb23-29">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plain"</span>, useLocale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb23-30">plt.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb23-31"></span>
<span id="cb23-32">sx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.barplot(brics_us, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>)</span>
<span id="cb23-33"></span>
<span id="cb23-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aqui buscamos os valores que foram adicionados no eixo e os modificamos </span></span>
<span id="cb23-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># com a formatação adequada</span></span>
<span id="cb23-36">current_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.gca().get_yticks().tolist()</span>
<span id="cb23-37">formatted_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.1f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000000</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> current_values]</span>
<span id="cb23-38">plt.gca().set_yticklabels(formatted_values)</span>
<span id="cb23-39"></span>
<span id="cb23-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Esta função adiciona um título no gráfico</span></span>
<span id="cb23-41">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Crescimento Populacional no BRICS (1970 - 2020)'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb23-42"></span>
<span id="cb23-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estas funções nos permitem alterar o títulos nos eixos</span></span>
<span id="cb23-44">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb23-45"></span>
<span id="cb23-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Removendo todo o eixo Y</span></span>
<span id="cb23-47">sx.get_yaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb23-48"></span>
<span id="cb23-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O Objeto patches contém todos os elementos (neste caso barras) que foram plotados no gráfico</span></span>
<span id="cb23-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Então percorremos eles e fazemos os seguintes calculos:</span></span>
<span id="cb23-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a coordenada x para posicionar o texto = Coordenada X do canto superior da barra + largura da barra / 2</span></span>
<span id="cb23-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a coordenada Y para posicionar o texto = Coordenada Y do canto superior da barra + 1% desta altura</span></span>
<span id="cb23-53"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sx.patches:</span>
<span id="cb23-54">  _x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (p.get_x() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p.get_width() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb23-55">  _y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.get_y() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p.get_height() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (p.get_height()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb23-56">  value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(p.get_height()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000000</span>)</span>
<span id="cb23-57">  sx.text(_x, _y, value, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) </span>
<span id="cb23-58"></span>
<span id="cb23-59">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_382990/620366550.py:38: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.
  plt.gca().set_yticklabels(formatted_values)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-110/index_files/figure-html/cell-18-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>E aí está o nosso gráfico, com suas cores modificadas. Para este gráfico ficar realmente bom, faltam apenas duas correções: deixar nossas barras um pouco mais largas para que possamos aumentar a fonte dos valores.</p>
<div id="cell-57" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># É aconselhavel mudar o tamanho da imagem antes de plotar</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para tanto, o MatPlotLib nos permite modificar entradas </span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># em um dicionário de parâmetros chamado rcParams.</span></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A nossa modificação será da entrada figure.figsize</span></span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Este parâmetro recebe uma tupla com largura e altura em polegadas</span></span>
<span id="cb25-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O valor padrão é 6.4 de largura e 4.8 de altura em polegadas</span></span>
<span id="cb25-7">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.figsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb25-8"></span>
<span id="cb25-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Definindo a paleta de cores</span></span>
<span id="cb25-10">cores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c4f6a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#177498"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0a8faa"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bfdce5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#82bd4a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b8d67a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b2b3b6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#58585a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#edb634"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d97933"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f1bdb1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eca091"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e26c54"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b0391e"</span>]</span>
<span id="cb25-11">sns.set_palette(sns.color_palette(cores))</span>
<span id="cb25-12"></span>
<span id="cb25-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Ajustando qualidade da imagem</span></span>
<span id="cb25-14">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb25-15">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.dpi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb25-16">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"savefig.format"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"svg"</span></span>
<span id="cb25-17"></span>
<span id="cb25-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para remover parte do box da imagem, fazemos isso:</span></span>
<span id="cb25-19">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.left"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb25-20">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.right"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb25-21">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.top"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb25-22">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes.spines.bottom"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb25-23"></span>
<span id="cb25-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Fontes</span></span>
<span id="cb25-25">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"legend.fontsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb25-26">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"legend.title_fontsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb25-27">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"legend.frameon"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb25-28"></span>
<span id="cb25-29">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plain"</span>, useLocale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb25-30">plt.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb25-31"></span>
<span id="cb25-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O padrão para tamanho das barras é 0.8. Quando colocamos 1, as barras se encostam. </span></span>
<span id="cb25-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Portanto, aumentamos para 0.95 para que não se encostem, mas fiquem mais largas.</span></span>
<span id="cb25-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A nossa outra alteração foi na rotina que imprime os valores, onde pudemos ajustar</span></span>
<span id="cb25-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># o tamanho da fonte de 3 para 4</span></span>
<span id="cb25-36">sx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.barplot(brics_us, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>)</span>
<span id="cb25-37"></span>
<span id="cb25-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aqui buscamos os valores que foram adicionados no eixo e os modificamos </span></span>
<span id="cb25-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># com a formatação adequada</span></span>
<span id="cb25-40">current_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.gca().get_yticks().tolist()</span>
<span id="cb25-41">formatted_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.1f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000000</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> current_values]</span>
<span id="cb25-42">plt.gca().set_yticklabels(formatted_values)</span>
<span id="cb25-43"></span>
<span id="cb25-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Esta função adiciona um título no gráfico</span></span>
<span id="cb25-45">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Crescimento Populacional no BRICS (1970 - 2020)'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb25-46"></span>
<span id="cb25-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estas funções nos permitem alterar o títulos nos eixos</span></span>
<span id="cb25-48">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb25-49"></span>
<span id="cb25-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Removendo todo o eixo Y</span></span>
<span id="cb25-51">sx.get_yaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb25-52"></span>
<span id="cb25-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># O Objeto patches contém todos os elementos (neste caso barras) que foram plotados no gráfico</span></span>
<span id="cb25-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Então percorremos eles e fazemos os seguintes calculos:</span></span>
<span id="cb25-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a coordenada x para posicionar o texto = Coordenada X do canto superior da barra + largura da barra / 2</span></span>
<span id="cb25-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a coordenada Y para posicionar o texto = Coordenada Y do canto superior da barra + 1% desta altura</span></span>
<span id="cb25-57"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sx.patches:</span>
<span id="cb25-58">  _x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (p.get_x() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p.get_width() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb25-59">  _y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.get_y() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p.get_height() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (p.get_height()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb25-60">  value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(p.get_height()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000000</span>)</span>
<span id="cb25-61">  sx.text(_x, _y, value, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) </span>
<span id="cb25-62"></span>
<span id="cb25-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Essa alteração foi no improviso, pois estava dizendo Year, ou seja,</span></span>
<span id="cb25-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># uma parte do gráfico utilizava um idioma diferente.</span></span>
<span id="cb25-65">plt.legend(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ano'</span>)</span>
<span id="cb25-66"></span>
<span id="cb25-67">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/var/folders/fc/hns7cg2j2xg_05kdl6cbxkw40000gn/T/ipykernel_47418/1546591451.py:42: UserWarning: FixedFormatter should only be used together with FixedLocator
  plt.gca().set_yticklabels(formatted_values)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-110/index_files/figure-html/cell-19-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Acho que agora, estamos prontos para enviar esse belo gráfico para quem vai usá-lo!</p>
</section>
</section>
</section>
<section id="conclusão" class="level2">
<h2 class="anchored" data-anchor-id="conclusão">Conclusão</h2>
<p>Nesta aula, aprendemos sobre como configurar nossos gráficos para que fiquem com uma aparência mais profissional e respeitem as boas práticas da área de Visualização de Dados. Vamos deixar também os links para as documentações das bibliotecas que utilizamos: - <a href="https://seaborn.pydata.org/">Seaborn</a> - <a href="https://matplotlib.org/stable/index.html">Matplotlib</a></p>
<p>Este artigo também marca o final da nossa série Visualização de Dados com Python! Com o conhecimento aqui compartilhado, você já é capaz de criar visualizações de dados incríveis e profissionais. Esperamos que você tenha gostado e que tenha aprendido muito!</p>
<p>Até a próxima!</p>
<p>Walter</p>


</section>

 ]]></description>
  <category>Visualização</category>
  <category>Seaborn</category>
  <category>MatPlotLib</category>
  <category>ptbr</category>
  <guid>https://blog.wvcode.com.br/posts/data-110/</guid>
  <pubDate>Sun, 12 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://blog.wvcode.com.br/library/concepts/programming_practice.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Parte 08 - MatplotLib - Tudo acaba em Pizza</title>
  <dc:creator>Walter R. Paixão-Côrtes</dc:creator>
  <link>https://blog.wvcode.com.br/posts/data-109/</link>
  <description><![CDATA[ 





<p>Olá Devs!</p>
<p>Dentro da área de Visualização de Dados existe uma grande polêmica em relação a um tipo de gráfico: o gráfico de pizza ou torta. E a polêmica não é quanto ao nome, mas a quando devemos utilizar este tipo de gráfico.</p>
<p>Neste artigo, iremos aprender um pouco sobre essa polêmica e depois, vamos ver como podemos criar este gráfico usando as bibliotecas python seaborn, matplotlib e pandas!</p>
<section id="definindo-gráfico-de-pizza-ou-será-torta" class="level2">
<h2 class="anchored" data-anchor-id="definindo-gráfico-de-pizza-ou-será-torta">Definindo Gráfico de Pizza… ou será Torta?</h2>
<p>O gráfico de pizza (ou torta) é um gráfico que tem por objetivo representar as categorias ou dimensões como parte de um todo.</p>
<section id="exemplo" class="level3">
<h3 class="anchored" data-anchor-id="exemplo">Exemplo</h3>
<p>Considere o seguinte cenário: você realizou uma votação sobre qual sabor de pizza é o mais popular. Essa votação foi feita junto aos clientes da pizzaria onde você trabalha, durante o curso de 1 semana. Hoje haverá uma reunião com o dono da pizzaria, onde vocês discutirão quais são os sabores que entrarão na próxima grande promoção da loja. Para isso, você vai apresentar os resultados da votação. E (piada interna) você decidiu que nada melhor que usar um gráfico de pizza para esta tarefa!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-109/pizza.jpg" class="img-fluid figure-img"></p>
<figcaption>Um gráfico de pizza!</figcaption>
</figure>
</div>
<p>Como vocês podem ver pela deliciosa imagem acima, o gráfico de pizza é composto por um círculo, que irá representar a totalidade dos votos que foram coletados. Então, cada sabor que foi votado irá representar uma fatia desta pizza. Se olharmos os valores representados no gráfico (que são porcentagens), conseguimos ter uma idéia do quanto cada fatia representa em relação ao todo.</p>
<p>E, olhando essa imagem, você pode se perguntar: está tudo tão claro, onde está a polêmica? Para isso, vamos ver outra imagem:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-109/badpizza001.jpg" class="img-fluid figure-img"></p>
<figcaption>Exemplo de Gráfico Ruim</figcaption>
</figure>
</div>
<p>Esse gráfico, que visa demonstrar os tweeters mais ativos, representa o principal problema dos gráficos de pizza: quanto mais categorias você tem, menos cada uma representa do todo, deixando mais díficil para o público entender essa representação. A próxima imagem ilustra o outro problema que geralmente encontramos em gráficos de pizza:</p>
<p><img src="https://blog.wvcode.com.br/posts/data-109/badpizza002.jpg" class="img-fluid"></p>
<p>Por algum motivo estranho, gráficos de pizza também tem uma perspectiva diferente. E essa mudança de perspectiva torna ainda pior a capacidade do público de perceber a diferença entre cada ‘fatia’.</p>
</section>
<section id="características-de-uma-boa-pizza-gráfico-de-pizza" class="level3">
<h3 class="anchored" data-anchor-id="características-de-uma-boa-pizza-gráfico-de-pizza">Características de uma boa Pizza (Gráfico de Pizza)</h3>
<p>Então, devemos usar gráficos de pizza ou não? A resposta mais simples é - depende. Baseado em inúmeros especialistas da área de visualização, você pode usar gráficos de pizza quando tem poucas categorias para serem representados. Outra recomendação é evitar mostrar o gráfico em perspectiva, além de utilizar rótulos informativos e bem simples para cada fatia.</p>
<p>Então, antes de ver como montar esse tipo de gráfico, vamos ficar com uma imagem que reforça o aprendizado até aqui:</p>
<p><img src="https://blog.wvcode.com.br/posts/data-109/goodpie-badpie.png" class="img-fluid"></p>
</section>
</section>
<section id="utilização-básica" class="level2">
<h2 class="anchored" data-anchor-id="utilização-básica">Utilização básica</h2>
<p>Para criar o gráfico de pizza teremos que abandonar um pouco o seaborn, e nos concentrarmos em utilizar apenas o matplotlib. Já estamos usando parte do matplotlib para colocarmos títulos no gráfico e nos eixos, acertarmos faixas de valores nos eixos e mais alguns detalhes. Agora, iremos utiliza-lo também para plotar o gráfico. Em primeiro lugar, vamos inicializar o ambiente e carregar os dados.</p>
<div id="cell-16" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4">pokemons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pokemons.csv'</span>)</span></code></pre></div>
</div>
<p>Depois, fazemos a agregação dos dados no nível da categoria que vamos plotar. Para criarmos um gráfico de pizza bom, vamos plotar o número de pokemons por geração. Isso nos dará poucas categorias (8), e faz sentido ver a distribuição do número de pokemons. Se quiséssemos plotar qualquer outro atributo, como ataque, defesa, etc…, provavelmente um gráfico de pizza não seria indicado, pois não faz sentido representar a soma dos poderes de ataque dos pokemons como um todo.</p>
<div id="cell-18" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">pokemons[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation Desc'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pokemons[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> gen: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gen '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(gen)))</span>
<span id="cb2-2"></span>
<span id="cb2-3">pokemons_gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pokemons.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation Desc'</span>])[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Number'</span>]].count().reset_index()</span>
<span id="cb2-4">pokemons_gen.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation Desc'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6">plt.pie(pokemons_gen[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Number'</span>], labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pokemons_gen[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation Desc'</span>], autopct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f%%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, counterclock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-7"></span>
<span id="cb2-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-109/index_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>E aí está o nosso gráfico de pizza! Importante observar que novamente, fizemos algumas transformações nos dados, incluindo ordenar os dados, porque caso contrário, as fatias ficarão fora de ordem. Vamos adicionar título e legenda, como em todos os nossos outros gráficos.</p>
<div id="cell-20" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">pokemons[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation Desc'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pokemons[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> gen: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gen '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(gen)))</span>
<span id="cb3-2"></span>
<span id="cb3-3">pokemons_gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pokemons.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation Desc'</span>])[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Number'</span>]].count().reset_index()</span>
<span id="cb3-4">pokemons_gen.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation Desc'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6">plt.pie(pokemons_gen[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Number'</span>], labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pokemons_gen[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation Desc'</span>], autopct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f%%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, counterclock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pokemons por Geração'</span>)</span>
<span id="cb3-9">plt.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper right'</span>, bbox_to_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.40</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>))</span>
<span id="cb3-10"></span>
<span id="cb3-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-109/index_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Pronto, aí está o polêmico gráfico de pizza!</p>
<section id="conclusão" class="level3">
<h3 class="anchored" data-anchor-id="conclusão">Conclusão</h3>
<p>Neste artigo, aprendemos como criar gráficos que nos ajudam a entender como nossas variáveis categóricas se relacionam enquanto partes de um todo. E para isto utilizamos o tão famoso gráfico de Pizza. Também aprendemos em quais casos este tipo de gráfico faz sentido e quando sua utilização prejudica a compreensão dos dados. Se quiser saber mais sobre gráficos de pizza, <a href="https://ibpad.com.br/ciencia-dados/sete-erros-classicos-em-graficos-de-pizza/">clique aqui</a>.</p>
<p>Um abraço e até a próxima,</p>
<p>Walter.</p>


</section>
</section>

 ]]></description>
  <category>Visualização</category>
  <category>Pandas</category>
  <category>MatPlotLib</category>
  <category>ptbr</category>
  <guid>https://blog.wvcode.com.br/posts/data-109/</guid>
  <pubDate>Sat, 11 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://blog.wvcode.com.br/library/concepts/programming_practice.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Parte 07 - Dispersão e Quadrantes</title>
  <dc:creator>Walter R. Paixão-Côrtes</dc:creator>
  <link>https://blog.wvcode.com.br/posts/data-108/</link>
  <description><![CDATA[ 





<p>Olá Devs!</p>
<p>Nos artigos anteriores aprendemos a criar gráficos que nos permitem realizar comparações entre categorias de uma dimensão, e também observar as variações de uma categoria ao longo de uma dimensão contínua (podendo ser uma dimensão numérica ou a mais popular, o tempo). Outra característica que esses gráficos possuem é que eles demonstram valores agregados no nível das categorias que estão sendo comparadas.</p>
<p>Neste artigo, iremos explorar gráficos que nos permitirão: - analisar a distribuição dos valores ao longo de variáveis contínuas de forma individualizada - analisar a correlação entre variáveis - identificar o que chamamos de outliers, que são os pontos que fogem da distribuição observada (aquele ponto fora da curva).</p>
<p>Para realizar esse tipo de análise, vamos trabalhar com os Gráficos de Dispersão e Pontos.</p>
<section id="preparação" class="level2">
<h2 class="anchored" data-anchor-id="preparação">Preparação</h2>
<p>Vamos carregar nossa bibliotecas e os dados.</p>
<div id="cell-5" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"></span>
<span id="cb1-5">pokemons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pokemons.csv'</span>)</span></code></pre></div>
</div>
</section>
<section id="utilização-básica" class="level2">
<h2 class="anchored" data-anchor-id="utilização-básica">Utilização Básica</h2>
<p>Como mencionamos anteriormente, uma das características dos gráficos de dispersão e pontos é que normalmente queremos que cada linha do nosso conjunto de dados esteja representado, com seus valores individualizados, ao contrário dos gráficos de barras, onde as informações estão agregadas através de cálculos de média, soma, …</p>
<p>Outra notada diferença é que neste tipo de gráfico, os eixos não utilizam categorias discretas. O que vemos é representação do domínio contínuo de variáveis, e os pontos correspondem a uma ocorrência.</p>
<p>Trazendo para a realidade do nosso conjunto de dados: os gráficos de dispersão não terão em seus eixos valores como Tipo ou Geração - o que iremos colocar nos eixos serão Ataque e Defesa, e os pontos plotados no gráfico representarão cada um dos pokemons no nosso conjunto de dados.</p>
<p>Para fazer isso, utilizaremos a função <code>scatterplot()</code> do seaborn.</p>
<p>Vamos ver na prática?</p>
<div id="cell-8" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">sns.scatterplot(pokemons, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Att'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Def'</span>)</span>
<span id="cb2-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Análise de Pontos de Ataque X Defesa'</span>)</span>
<span id="cb2-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pontos de Ataque'</span>)</span>
<span id="cb2-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pontos de Defesa'</span>)</span>
<span id="cb2-5">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-108/index_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>É bem simples, não é mesmo? Escolhemos a variável do eixo X e a variável do eixo Y e é isso, vemos cada um dos nossos pokemons plotados no gráfico.</p>
<p>Esse tipo de gráfico serve para mostrarmos a relação que existe entre as duas variáveis. No gráfico acima, podemos perceber que existe uma maior concentração de pokemons na faixa de 50-100 pontos de ataque e defesa. Também percebemos outras informações, tais como: - pelo menos 1 pokemon tem um alto valor de pontos de defesa, mas quase nada de pontos de ataque - pelo menos 1 pokemon tem um alto valor de pontos de ataque, mas quase nada de pontos de defesa.</p>
<p>Isso são o que chamamos de outliers, pois fogem da distribuição que percebemos como padrão.</p>
<p>Mas podemos melhorar um pouco nosso gráfico. Por exemplo, podemos colorir nossos pontos de acordo com a geração, assim podemos entender qual é a distribuição de cada geração.</p>
<div id="cell-10" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">sns.scatterplot(pokemons, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Att'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Def'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>)</span>
<span id="cb3-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Análise de Pontos de Ataque X Defesa'</span>)</span>
<span id="cb3-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pontos de Ataque'</span>)</span>
<span id="cb3-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pontos de Defesa'</span>)</span>
<span id="cb3-5">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-108/index_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Melhorou um pouco, agora temos noção das gerações, mas a distribuição náo é uniforme, pois como o valor é numérico ele criou faixas de valores. Se quisermos ver cada geração individualmente, teremos que trabalhar nossos dados.</p>
<section id="adicionando-uma-coluna-em-nossos-dados" class="level3">
<h3 class="anchored" data-anchor-id="adicionando-uma-coluna-em-nossos-dados">Adicionando uma coluna em nossos dados</h3>
<p>Adicionar uma nova coluna em um DataFrame pandas é bem simples:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">pokemons[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation Desc'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span></code></pre></div>
<p>Isso criará uma nova coluna chamada ‘Generation Desc’ que terá cada linha populada com o valor “” (vazio). Isso é um bom início, mas precisamos atribuir um valor a esta coluna, preferencialmente baseado no valor do campo ‘Generation’ original. Para isso, iremos utilizar a função <code>apply()</code> do DataFrame. Vamos ao comando.</p>
<div id="cell-14" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">pokemons[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation Desc'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pokemons[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> gen: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gen '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(gen)))</span></code></pre></div>
</div>
<p>A função <code>apply()</code> nos permite aplicar uma função (aqui utilizamos uma função lambda) que transforma o valor do campo Generation em um valor inteiro sem casas decimais para depois transforma-lo em texto, de forma que consigamos juntar com a string ‘Gen’. Assim, temos uma descrição textual da geração. Com isso, podemos agora, tentar novamente o plot do gráfico.</p>
<div id="cell-16" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">sns.scatterplot(pokemons, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Att'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Def'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation Desc'</span>)</span>
<span id="cb6-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Análise de Pontos de Ataque X Defesa'</span>)</span>
<span id="cb6-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pontos de Ataque'</span>)</span>
<span id="cb6-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pontos de Defesa'</span>)</span>
<span id="cb6-5">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-108/index_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>As cores ficaram bem melhores, mas a posição da legenda ficou bem ruim. Vamos arrumar?</p>
<div id="cell-18" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">sns.scatterplot(pokemons, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Att'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Def'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation Desc'</span>)</span>
<span id="cb7-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Análise de Pontos de Ataque X Defesa'</span>)</span>
<span id="cb7-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pontos de Ataque'</span>)</span>
<span id="cb7-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pontos de Defesa'</span>)</span>
<span id="cb7-5">plt.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper right'</span>, bbox_to_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.21</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>))</span>
<span id="cb7-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-108/index_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Agora temos nosso gráfico de dispersão pronto. Na próxima seção, vamos discutir um caso específico de gráfico de dispersão, chamado de Gráfico de Quadrantes.</p>
</section>
<section id="gráfico-de-quadrantes" class="level3">
<h3 class="anchored" data-anchor-id="gráfico-de-quadrantes">Gráfico de Quadrantes</h3>
<p>O gráfico de quadrantes é um caso específico de um gráfico de dispersão, onde dividimos a área do gráfico em quadrantes - superior esquerdo, superior direito, inferior esquerdo e inferior direito - e a presença de um ponto nesses quadrantes tem um significado especial. O maior exemplo deste tipo de gráfico é o “Quadrante Mágico” do Grupo Gartner, que publica todos os anos neste formato quais as empresas ou produtos que se posicionam como líderes do mercado em cada setor. Veja o exemplo abaixo, que representa O Quadrante Mágico de 2022 para a área de Business Intelligence.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-108/gmq-2022-bi.png" class="img-fluid figure-img"></p>
<figcaption>Quadrante Mágico 2022 - BI</figcaption>
</figure>
</div>
<p>Neste formato do Gartner, os pontos que estiverem no quadrante superior direito são considerados os líderes do mercado, levando em conta as variáveis completude da visão e capacidade de execução, que são dois scores calculados e ficam em uma escala de 1 a 10 pontos.</p>
<p>Então, levando em consideração que o nosso gráfico de dispersão utiliza os atributos de Ataque e Defesa, vamos imaginar como transformar esse gráfico em um ‘Quadrante Mágico’ que nos permitirá saber quais são os pokemons mais capazes e que possuem a melhor relação entre pontos de ataque e defesa.</p>
<p>As mudanças que iremos aplicar no nosso gráfico original de dispersão são: - deixar os eixos com a mesma faixa de valores. Agora eles estão levemente desencontrados - plotar os eixos que dividem os quadrantes - plotar um texto descritivo para cada quadrante - se possível, poder nomear cada ponto no gráfico, com o nome do pokemon.</p>
<p>Acompanhe os comentários no código para entender o que foi feito!</p>
<div id="cell-24" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gera o gráfico original</span></span>
<span id="cb8-2">sns.scatterplot(pokemons, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Att'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Def'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation Desc'</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adiciona os títulos</span></span>
<span id="cb8-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Análise de Pontos de Ataque X Defesa'</span>)</span>
<span id="cb8-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pontos de Ataque'</span>)</span>
<span id="cb8-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pontos de Defesa'</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adiciona e posiciona a legenda</span></span>
<span id="cb8-10">plt.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper right'</span>, bbox_to_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.21</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>))</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ajusta a faixa de valores para os dois eixos</span></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># observe que utilizamos valores fixos. O ideal seria utilizar alguma</span></span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fórmula ou função para dinamizar, mas vamos deixar simples</span></span>
<span id="cb8-15">plt.xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">225</span>)</span>
<span id="cb8-16">plt.ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">225</span>)</span>
<span id="cb8-17"></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># traçamos as linhas de divisão dos quadrantes</span></span>
<span id="cb8-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># observe que a posição delas é na exata metade do </span></span>
<span id="cb8-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># valor máximo de cada eixo</span></span>
<span id="cb8-21">plt.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">112.5</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)           </span>
<span id="cb8-22">plt.axvline(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">112.5</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>,linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb8-23"></span>
<span id="cb8-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># criamos o label que identifica cada quadrante e o seu significado</span></span>
<span id="cb8-25">plt.text(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fracos"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>)</span>
<span id="cb8-26">plt.text(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">145</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Atacantes"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>)</span>
<span id="cb8-27">plt.text(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">155</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">210</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fortes"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>)</span>
<span id="cb8-28">plt.text(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">210</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Defensivos"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>)</span>
<span id="cb8-29"></span>
<span id="cb8-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mostra o gráfico</span></span>
<span id="cb8-31">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-108/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Ficou bem bonito o nosso quadrante! A única coisa que não fizemos foi adicionar um “tooltip” a cada ponto para sabermos que pokemon é aquele. Para isso, precisamos que o gráfico seja do tipo interativo, o que requer utilizar outra biblioteca. Em um dos próximos artigos iremos explorar uma biblioteca que permite esse tipo de interação.</p>
</section>
</section>
<section id="conclusão" class="level2">
<h2 class="anchored" data-anchor-id="conclusão">Conclusão</h2>
<p>Neste artigo exercitamos ainda mais nossa capacidade de criar gráficos, expandido nosso conhecimento para a aplicação de mais uma função, chamada <code>scatterplot()</code> que nos permite criar gráficos de dispersão e os populares quadrantes mágicos. Também aprendemos mais algumas funções que nos ajudam a melhor formatar os nossos gráficos.</p>
<p>Um abraço e até a próxima,</p>
<p>Walter.</p>


</section>

 ]]></description>
  <category>Visualização</category>
  <category>Pandas</category>
  <category>Seaborn</category>
  <category>ptbr</category>
  <guid>https://blog.wvcode.com.br/posts/data-108/</guid>
  <pubDate>Fri, 10 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://blog.wvcode.com.br/library/concepts/programming_practice.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Parte 06 - Linhas e Áreas</title>
  <dc:creator>Walter R. Paixão-Côrtes</dc:creator>
  <link>https://blog.wvcode.com.br/posts/data-107/</link>
  <description><![CDATA[ 





<p>Olá Devs!</p>
<p>No artigo anterior, começamos de maneira efetiva o nosso aprendizado da biblioteca seaborn, para a criação de gráficos utilizando a linguagem Python, e tecnologias interativas como o Google Colab.</p>
<p>Mais especificamente, aprendemos a criar gráficos de barras e suas variações como o gráfico de colunas, barras agrupadas ou até mesmo empilhadas (stacked). Esses gráficos correspondem com certeza à maior parte da nossa necessidade em termos de gráficos, mas ainda temos outra categoria que é muito importante: os gráficos de Linhas e Áreas.</p>
<section id="gráficos-de-linhas-e-áreas" class="level3">
<h3 class="anchored" data-anchor-id="gráficos-de-linhas-e-áreas">Gráficos de Linhas e Áreas</h3>
<p>Os gráficos de Linhas e Áreas são utilizados quando precisamos representar a distribuição de métrica ao longo de um eixo de valores categóricos mas contínuos. O exemplo mais clássico é representar a distribuição de valores ao longo da dimensão do tempo. Mas também é possível utilizar qualquer outra dimensão numérica e contínua.</p>
<p>Então, estão preparados para mais uma dose de conhecimento?</p>
</section>
<section id="preparação" class="level2">
<h2 class="anchored" data-anchor-id="preparação">Preparação</h2>
<p>A primeira coisa que iremos fazer no nosso notebook é carregar todas as bibliotecas que iremos utilizar e também o nosso conjunto de dados.</p>
<div id="cell-4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"></span>
<span id="cb1-5">pokemons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pokemons.csv'</span>)</span></code></pre></div>
</div>
</section>
<section id="utilização-básica" class="level2">
<h2 class="anchored" data-anchor-id="utilização-básica">Utilização Básica</h2>
<p>A utilização básica aqui não é muito diferente do que fizemos para os gráficos de barra: temos uma função que deve poder gerar a visualização, através da passagem de alguns parâmetros básicos: fonte de dados, eixo X, Y, …</p>
<p>Neste caso, a função em questão é a <code>lineplot()</code>. Vamos tentar?</p>
<div id="cell-7" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">sns.lineplot(pokemons, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spe'</span>)</span>
<span id="cb2-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Variação de Velocidade de acordo com as Gerações'</span>)</span>
<span id="cb2-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Geração'</span>)</span>
<span id="cb2-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Velocidade'</span>)</span>
<span id="cb2-5">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-107/index_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Padronização é uma maravilha, não é mesmo? Pegamos o nosso código para gráficos de barras e trocamos a função e tudo funcionou! Podemos perceber, no entanto, que a nossa linha representando está envolta por um delimitador azulado. Para resolver isso, vamos dar uma analisada nos parâmetros específicos da função <code>lineplot()</code>.</p>
<p>Por padrão, o gráfico de linhas também plota o que chamamos de error band, ou margem de erro. Se não for interessante, podemos eliminar essa error band.</p>
<div id="cell-9" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">sns.lineplot(pokemons, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spe'</span>, errorbar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb3-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Variação de Velocidade de acordo com as Gerações'</span>)</span>
<span id="cb3-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Geração'</span>)</span>
<span id="cb3-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Velocidade'</span>)</span>
<span id="cb3-5">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-107/index_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>E, assim como no gráfico de barras, temos a necessidade de plotar mais de uma série no nosso gráfico de linhas. Como fazemos isso? É simples:</p>
<div id="cell-11" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">pokemons_sb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pokemons[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spa'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spd'</span>]] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Primeiro selecionamos apenas as colunas que queremos trabalhar</span></span>
<span id="cb4-2">tidy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pokemons_sb.melt(id_vars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>).rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.title)</span>
<span id="cb4-3"></span>
<span id="cb4-4">sns.lineplot(tidy, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Variable'</span>, errorbar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb4-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Análise das Gerações'</span>)</span>
<span id="cb4-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Geração'</span>)</span>
<span id="cb4-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Atributos'</span>)</span>
<span id="cb4-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-107/index_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Basicamente, tivemos que fazer a mesma operação que fizemos para as múltiplas barras. E o resto do código já é bem conhecido.</p>
<p>O outro tipo de gráfico baseado em linhas é o popular gráfico de área. Mas somente conseguimos gerar esse gráfico utilizando a função <code>stackplot()</code> do MatplotLib. Veja o exemplo abaixo:</p>
<div id="cell-14" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">pokemons_gb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pokemons.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>])[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spa'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spd'</span>]].mean().reset_index()</span>
<span id="cb5-2"></span>
<span id="cb5-3">plt.stackplot(pokemons_gb[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>], pokemons_gb[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spa'</span>], pokemons_gb[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spd'</span>], labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Special Attack'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Special Defense'</span>])</span>
<span id="cb5-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Análise das Gerações'</span>)</span>
<span id="cb5-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Geração'</span>)</span>
<span id="cb5-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Atributos'</span>)</span>
<span id="cb5-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-107/index_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>E aí está o nosso gráfico de área! Mais uma vez, recorremos a matplotlib para concluir a plotagem.</p>
</section>
<section id="conclusão" class="level2">
<h2 class="anchored" data-anchor-id="conclusão">Conclusão</h2>
<p>Neste artigos, aprendemos a criar mais dois tipos de gráfico: linha e área, revisamos a utilização de pandas para transformar os dados e acrescentamos mais uma ferramenta no nosso cinto de utilidades.</p>
<p>Se você quiser aprender mais sobre gráficos de linha e área em seaborn, seguem alguns links: - <a href="https://seaborn.pydata.org/introduction.html#introduction">Documentação oficial do Seaborn em português</a>: A documentação oficial do Seaborn tem uma versão em português que fornece uma visão geral da biblioteca, exemplos de uso, informações sobre os diferentes tipos de gráficos, e muito mais - <a href="https://morioh.com/p/4eda0350366b">Gráficos de Linha em Seaborn</a></p>
<p>Um abraço e até a próxima,</p>
<p>Walter.</p>


</section>

 ]]></description>
  <category>Visualização</category>
  <category>Python</category>
  <category>Pandas</category>
  <category>Seaborn</category>
  <category>MatPlotLib</category>
  <guid>https://blog.wvcode.com.br/posts/data-107/</guid>
  <pubDate>Thu, 09 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://blog.wvcode.com.br/library/concepts/programming_practice.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Parte 05 - Iniciando com Seaborn</title>
  <dc:creator>Walter R. Paixão-Côrtes</dc:creator>
  <link>https://blog.wvcode.com.br/posts/data-106/</link>
  <description><![CDATA[ 





<p>Olá Devs!</p>
<p>Bem-vindo de volta! Na Parte 04 aprendemos como utilizar a biblioteca Pandas para carregar no notebook os dados que pretendemos trabalhar. Também aprendemos a utilizar algumas funções mais avançadas que nos permitem filtrar ou agregar informações em nosso conjunto de dados.</p>
<p>A linguagem Python possui inúmeras bibliotecas não-nativas para gerar visualizações de dados. A biblioteca mais famosa e que muitas vezes serve de base para as outras se chama <strong>matplotlib</strong>. Por uma questão de conveniência e facilidade de uso, utilizaremos no curso a biblioteca <strong>seaborn</strong>.</p>
<p>As principais vantagens do seaborn são: - <strong>interface alto nível</strong> - existe uma função para cada tipo de gráfico, e permite fazer chaining de chamadas - <strong>facilidade de configuração</strong> - possui objetos de configuração globais e locais (em cada gráfico).</p>
<p>Nesta aula, vamos passar pelo processo de instalação e utilização dos tipos de gráficos mais básicos no seaborn.</p>
<section id="instalação" class="level2">
<h2 class="anchored" data-anchor-id="instalação">Instalação</h2>
<p>Assim como no artigo de Pandas, tenho uma boa notícia: no Google Colab o seaborn já vem instalado no nosso ambiente! Mas caso você esteja também se aventurando em fazer este curso no VS Code, PyCharm, Sublime ou até mesmo Notepad, o comando para instalar a biblioteca seaborn é o seguinte:</p>
<pre class="shell"><code>(venv) $ pip install seaborn</code></pre>
</section>
<section id="visualizando-com-seaborn" class="level2">
<h2 class="anchored" data-anchor-id="visualizando-com-seaborn">Visualizando com seaborn</h2>
<p>Agora vamos ver na prática como o seaborn funciona. Neste artigo, veremos os tipos de gráficos mais comuns, indicando sua utilização e dando exemplos. Se você quiser mais detalhes, sempre pode consultar a documentação do seaborn em <a href="https://seaborn.pydata.org/index.html">Seaborn Docs</a>.</p>
<p>Hoje vamos gerar gráficos de barras ou colunas, baseados nas funções: <code>countplot()</code> e <code>barplot()</code>. Nas partes seguintes do artigo, iremos explorar outros tipos de gráficos, que são um pouco mais avançados.</p>
<section id="inicializando-o-seaborn" class="level3">
<h3 class="anchored" data-anchor-id="inicializando-o-seaborn">Inicializando o seaborn</h3>
<p>Como toda a biblioteca python, precisamos indicar em nosso script quando queremos utilizar a biblioteca seaborn. Fazemos isso através do comando <code>import</code>.</p>
<div id="cell-9" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span></code></pre></div>
</div>
<p>Da mesma forma que falamos na aula de Pandas, o import do seaborn geralmente utiliza o apelido de sns, que pode ser encontrado em muitos artigos na internet. Vamos manter essa convenção para que vocês se acostumem ao procurar material de apoio.</p>
<p>Por falar de Pandas, precisamos carregar ele também, afinal, precisamos dos nossos dados!</p>
<div id="cell-11" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
</div>
</section>
<section id="carregando-os-dados" class="level3">
<h3 class="anchored" data-anchor-id="carregando-os-dados">Carregando os dados</h3>
<p>E vamos continuar nossas demonstrações com o conjunto de dados de pokemons:</p>
<div id="cell-14" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">pokemons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pokemons.csv'</span>)</span></code></pre></div>
</div>
</section>
<section id="gráficos-de-barras-ou-colunas" class="level3">
<h3 class="anchored" data-anchor-id="gráficos-de-barras-ou-colunas">Gráficos de barras ou colunas</h3>
<p>Um gráfico de barras ou colunas é uma representação gráfica de dados em que as informações são exibidas em barras verticais ou horizontais de comprimentos variáveis. Cada barra ou coluna representa uma categoria ou conjunto de dados diferentes, e a altura ou comprimento da barra é proporcional à quantidade ou valor correspondente.</p>
<p>Os gráficos de barras são frequentemente usados para comparar quantidades ou valores entre diferentes categorias, enquanto os gráficos de colunas são mais adequados para exibir uma série temporal de dados. Ambos os tipos de gráficos podem ser usados para exibir dados discretos ou contínuos, e podem ser personalizados para incluir rótulos, legendas e outras informações relevantes. Os gráficos de barras e colunas são comumente usados em relatórios, apresentações e em análises de dados.</p>
<section id="countplot" class="level4">
<h4 class="anchored" data-anchor-id="countplot"><code>countplot()</code></h4>
<p>A primeira função que iremos aprender a utilizar é a função <code>countplot()</code>. Ela é indicada quando queremos realizar a contagem de uma categoria, ou seja, escolhemos um campo categórico em nossos dados e indicamos quantas ocorrências encontramos em nossos dados. Nos próximos blocos de código, veremos vários exemplos de como fazer isso.</p>
<div id="cell-19" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># contando o número de pokemons por geração</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.countplot(pokemons, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generation"</span>)</span>
<span id="cb5-4"></span>
<span id="cb5-5">plot</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-106/index_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Olha só, parece bem fácil, não? Está ali o nosso gráfico, com o número de pokemons por geração. No entanto, temos algumas melhorias que podem ser feitas:</p>
<ul>
<li>adicionar um título</li>
<li>corrigir os títulos dos eixos.</li>
</ul>
<p>Para realizar esses ajustes, vamos precisar de uma nova biblioteca, chamada <code>matplotlib</code>. Na verdade, essa biblioteca é a base de muitas outras bibliotecas de visualização, tais como seaborn, plotly e por aí vai.</p>
<p>Neste cenário, <code>matplotlib</code> é utilizada para preparar o que chamamos de área de plotagem, que é o retângulo branco onde nosso gráfico será exibido.</p>
<div id="cell-21" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># contando o número de pokemons por geração</span></span>
<span id="cb6-3"></span>
<span id="cb6-4">sns.countplot(pokemons, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generation"</span>)</span>
<span id="cb6-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pokemons por Geração'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># título do gráfico</span></span>
<span id="cb6-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Geração'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># eixo X</span></span>
<span id="cb6-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Número de Pokemons'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># eixo Y</span></span>
<span id="cb6-8"></span>
<span id="cb6-9">plt.show() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mostra o gráfico</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-106/index_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Agora sim, temos um gráfico bem desenhado!</p>
<p>Este gráfico é um <strong>Gráfico de Colunas</strong>, de acordo com as definições, pois as barras são verticais. Para transformar em um gráfico de barras, na função <code>countplot()</code> precisamos apenas trocar o x pelo y no segundo parâmetro, além de trocar os títulos na funções xlabel e ylabel. Vamos ver como fica:</p>
<div id="cell-23" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">sns.countplot(pokemons, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generation"</span>)</span>
<span id="cb7-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pokemons por Geração'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># título do gráfico</span></span>
<span id="cb7-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Geração'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># eixo Y</span></span>
<span id="cb7-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Número de Pokemons'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># eixo X</span></span>
<span id="cb7-5"></span>
<span id="cb7-6">plt.show() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mostra o gráfico</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-106/index_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="barplot" class="level4">
<h4 class="anchored" data-anchor-id="barplot"><code>barplot()</code></h4>
<p>Nos gráficos utilizando <code>countplot()</code> podemos apenas exibir a contagem de elementos para cada valor categórico da coluna que escolhemos. Não temos como, por exemplo, apresentar a média dos pontos de vida dos pokemons. Para isso, precisamos de mais controle sobre os dados que iremos mostrar. Entra em cena a função <code>barplot()</code>:</p>
<div id="cell-26" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb8-2"></span>
<span id="cb8-3">sns.barplot(pokemons, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HP'</span>, estimator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.mean)</span>
<span id="cb8-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Média dos pontos de vida de Pokemons por Geração'</span>)</span>
<span id="cb8-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Geração'</span>)</span>
<span id="cb8-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Média dos pontos de vida'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>Text(0, 0.5, 'Média dos pontos de vida')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-106/index_files/figure-html/cell-8-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>E aí está o nosso gráfico. Algumas observações:</p>
<ul>
<li>Precisamos trazer mais uma biblioteca para o nosso script, a biblioteca numpy, para podermos especificar que nosso gráfico de barras iria calcular a média do campo especificado</li>
<li>Além de definirmos o eixo X, definimos também o eixo Y e qual o tipo de cálculo a ser realizado</li>
<li>Cada barra tem um risco preto. Esse risco se refere a margem de erro. Se você não quiser ver essa informação, apenas adicionamos mais um parâmetro a função e ela desaparece.</li>
</ul>
<div id="cell-28" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">sns.barplot(pokemons, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HP'</span>, estimator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.mean, errwidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Média dos pontos de vida de Pokemons por Geração'</span>)</span>
<span id="cb10-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Geração'</span>)</span>
<span id="cb10-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Média dos pontos de vida'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_227049/3891424301.py:1: FutureWarning: 

The `errwidth` parameter is deprecated. And will be removed in v0.15.0. Pass `err_kws={'linewidth': 0}` instead.

  sns.barplot(pokemons, x='Generation', y='HP', estimator=np.mean, errwidth=0)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Text(0, 0.5, 'Média dos pontos de vida')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-106/index_files/figure-html/cell-9-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>E aí está o nosso gráfico de colunas. Outra coisa que podemos explorar é ter mais de uma métrica sendo analisada pela categoria selecionada. Por exemplo, vamos analisar a média dos pontos de ataque e defesa através das gerações.</p>
<div id="cell-30" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Precisamos fazer ajustes no conjunto de dados</span></span>
<span id="cb13-2">pokemons_sb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pokemons[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Att'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Def'</span>]] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Primeiro selecionamos apenas as colunas que queremos trabalhar</span></span>
<span id="cb13-3">tidy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pokemons_sb.melt(id_vars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>).rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.title)</span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A função melt()  recebe como parâmetro a coluna categórica e pega todas as colunas de métricas e transformam em uma </span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># única coluna, em uma nova linha para cada coluna. Para identificar cada nova linha, outra coluna é adicionada, com</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a descrição. Ou seja, realizamos uma transposição do nosso conjunto de dados.</span></span>
<span id="cb13-7"></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gráfico</span></span>
<span id="cb13-9">sns.barplot(tidy, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Variable'</span>, estimator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.mean, err_kws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linewidth"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>})</span>
<span id="cb13-10">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Média dos pontos de ataque e defesa de Pokemons por Geração'</span>)</span>
<span id="cb13-11">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Geração'</span>)</span>
<span id="cb13-12">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Média dos pontos de ataque e defesa'</span>)</span>
<span id="cb13-13">plt.legend()</span>
<span id="cb13-14"></span>
<span id="cb13-15">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-106/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>No código acima, a parte que faz a plotagem do gráfico continua a mesma, mas temos as duas linhas iniciais que servem para fazer um ajuste nos dados. Quanto mais complexo os gráficos que queremos plotar, mais necessário se torna entender como formatar os dados. Então, aprenda principalmente Pandas e SQL e mantenha todos os seus gráficos fáceis de plotar!</p>
<p>Agora, vamos ver mais um subtipo de gráfico de barras ou colunas: o gráfico de colunas “stacked” ou empilhadas.</p>
<div id="cell-32" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">pokemons_gb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pokemons.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>])[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Att'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Def'</span>]].mean()</span>
<span id="cb14-2"></span>
<span id="cb14-3">plt.bar(pokemons_gb[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>], pokemons_gb[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Att'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-4">plt.bar(pokemons_gb[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>], pokemons_gb[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Def'</span>], bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pokemons_gb[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Att'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Média dos pontos de ataque e defesa de Pokemons por Geração'</span>)</span>
<span id="cb14-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Geração'</span>)</span>
<span id="cb14-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Média dos pontos de ataque e defesa'</span>)</span>
<span id="cb14-8"></span>
<span id="cb14-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-106/index_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Nesta versão de stacked bar chart, como podemos perceber pelo código, foi necessária uma nova transformação nos dados, desta vez com as funções <code>groupby()</code> e <code>mean()</code>. Além disso, desenhamos as barras com o matplotlib direto, não chegamos a utilizar o seaborn.</p>
<p>A transformação nos dados foi necessária para agruparmos os valores de ataque e defensa por geração e calcular a média. A opção de utilizar matplotlib direto produziu um gráfico com a aparência bem diferente, e sinceramente, feia se comparada aos outros gráficos que criamos. E existe uma alternativa! Podemos usar o seaborn através do próprio DataFrame, garantindo uma aparência alinhada com o que geramos anteriormente.</p>
<div id="cell-35" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">pokemons_gb.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>, stacked<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb15-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Média dos pontos de ataque e defesa de Pokemons por Geração'</span>)</span>
<span id="cb15-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Geração'</span>)</span>
<span id="cb15-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Média dos pontos de ataque e defesa'</span>)</span>
<span id="cb15-5">plt.legend()</span>
<span id="cb15-6"></span>
<span id="cb15-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-106/index_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="concluindo" class="level2">
<h2 class="anchored" data-anchor-id="concluindo">Concluindo</h2>
<p>Conseguimos ver como gerar um dos gráficos mais utilizados na área de Visualização de Dados, o gráfico de barras e suas variações utilizando a biblioteca seaborn. Também aprendemos que para gerar certos tipos de gráficos, é necessário fazer algumas transformações nos dados, o que conecta este artigo ao de Pandas.</p>
<p>Se você quiser aprender mais sobre seaborn, seguem alguns links: - <a href="https://seaborn.pydata.org/introduction.html#introduction">Documentação oficial do Seaborn em português</a>: A documentação oficial do Seaborn tem uma versão em português que fornece uma visão geral da biblioteca, exemplos de uso, informações sobre os diferentes tipos de gráficos, e muito mais - <a href="https://towardsdatascience.com/data-visualization-with-python-and-seaborn-part-1-29c8d54a854f">Tutorial de visualização de dados com Python e Seaborn</a>: Este tutorial do Towards Data Science fornece uma introdução prática à visualização de dados com Seaborn, incluindo exemplos de código e gráficos. O tutorial abrange tópicos como gráficos de barras, gráficos de dispersão, heatmap e muito mais.</p>
<p>Um abraço e até mais,</p>
<p>Walter.</p>


</section>

 ]]></description>
  <category>Visualização</category>
  <category>Python</category>
  <category>Pandas</category>
  <category>MatPlotLib</category>
  <category>Seaborn</category>
  <guid>https://blog.wvcode.com.br/posts/data-106/</guid>
  <pubDate>Wed, 08 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://blog.wvcode.com.br/library/concepts/programming_practice.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Parte 04 - Pandas</title>
  <dc:creator>Walter R. Paixão-Côrtes</dc:creator>
  <link>https://blog.wvcode.com.br/posts/data-105/</link>
  <description><![CDATA[ 





<p>Olá Devs!</p>
<p>Se você chegou até aqui, significa que já deve ter aprendido como carregar os dados no Google Colab utilizando as bibliotecas padrão do python. E deve ter percebido que a tarefa não é simples, e requer muitas linhas de código (Rapadura é doce mas não é mole não, diria o Yusuke Urameshi).</p>
<p>Justamente com a intenção de simplificar o trabalho dos cientistas e engenheiros de dados é que a biblioteca <strong>Pandas</strong> foi criada. Com a biblioteca Pandas, todo o trabalho de manipulação dos dados fica simplificado, rápido e mais organizado.</p>
<section id="instalando-pandas" class="level2">
<h2 class="anchored" data-anchor-id="instalando-pandas">Instalando Pandas</h2>
<p>Tenho uma boa notícia: como estamos utilizando o Google Colab para nossas aulas, ele já vem instalado no nosso ambiente! Mas caso você esteja também se aventurando em fazer este curso no VS Code, PyCharm, Sublime ou até mesmo Notepad, o comando para instalar a biblioteca Pandas é o seguinte:</p>
<pre class="shell"><code>(venv) $ pip install pandas</code></pre>
<p>Este comando irá instalar a biblioteca Pandas e todos as bibliotecas dependentes. É aconselhável que você crie um ambiente virtual para instalar as bibliotecas, mas isso é assunto para um outro dia.</p>
</section>
<section id="utilizando-pandas" class="level2">
<h2 class="anchored" data-anchor-id="utilizando-pandas">Utilizando Pandas</h2>
<p>Iremos ver, passo a passo, como utilizar a biblioteca Pandas em nosso notebook Google Colab, passando pelos seus principais conceitos.</p>
<section id="carregando-pandas-no-notebook" class="level3">
<h3 class="anchored" data-anchor-id="carregando-pandas-no-notebook">Carregando Pandas no notebook</h3>
<p>A primeira coisa que devemos fazer é carregar a biblioteca em nosso notebook. Fazemos isso com o comando <code>import</code>.</p>
<div id="cell-10" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>É considerado uma boa prática ao carregar a biblioteca sempre utilizar o alias <code>pd</code>. Observe que todos os artigos na internet utilizam essa mesma referência.</p>
</div>
</div>
</section>
<section id="carregando-os-dados" class="level3">
<h3 class="anchored" data-anchor-id="carregando-os-dados">Carregando os dados</h3>
<p>Na aula 3, aprendemos que uma maneira de carregar os dados em um notebook on Google Colab é a seguinte:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csv</span>
<span id="cb3-2"></span>
<span id="cb3-3">pokemons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pokemons.csv'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> arquivo:</span>
<span id="cb3-5">  dados <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.DictReader(arquivo)</span>
<span id="cb3-6"></span>
<span id="cb3-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pokemon <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dados:</span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pokemon.items():</span>
<span id="cb3-9">      pokemons.setdefault(key,[]).append(value)</span></code></pre></div>
<p>Utilizando pandas, isso será substituído por uma única linha:</p>
<div id="cell-15" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">pokemons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pokemons.csv'</span>)</span></code></pre></div>
</div>
<p>Ficou bem mais fácil, não é mesmo? Da mesma forma, verificar o conteúdo que foi carregado também se simplifica - vai disso aqui:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> indice <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># executa um loop dos dois primeiros elementos do array</span></span>
<span id="cb5-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pokemons[indice])     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># imprime o elemento</span></span></code></pre></div>
<p>para isso aqui:</p>
<div id="cell-17" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">pokemons.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Number</th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Type 1</th>
<th data-quarto-table-cell-role="th">Type 2</th>
<th data-quarto-table-cell-role="th">Abilities</th>
<th data-quarto-table-cell-role="th">HP</th>
<th data-quarto-table-cell-role="th">Att</th>
<th data-quarto-table-cell-role="th">Def</th>
<th data-quarto-table-cell-role="th">Spa</th>
<th data-quarto-table-cell-role="th">Spd</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">Against Bug</th>
<th data-quarto-table-cell-role="th">Against Rock</th>
<th data-quarto-table-cell-role="th">Against Ghost</th>
<th data-quarto-table-cell-role="th">Against Dragon</th>
<th data-quarto-table-cell-role="th">Against Dark</th>
<th data-quarto-table-cell-role="th">Against Steel</th>
<th data-quarto-table-cell-role="th">Against Fairy</th>
<th data-quarto-table-cell-role="th">Height</th>
<th data-quarto-table-cell-role="th">Weight</th>
<th data-quarto-table-cell-role="th">BMI</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>Bulbasaur</td>
<td>Grass</td>
<td>Poison</td>
<td>['Chlorophyll', 'Overgrow']</td>
<td>45</td>
<td>49</td>
<td>49</td>
<td>65</td>
<td>65</td>
<td>...</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>0.7</td>
<td>6.9</td>
<td>14.1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>Ivysaur</td>
<td>Grass</td>
<td>Poison</td>
<td>['Chlorophyll', 'Overgrow']</td>
<td>60</td>
<td>62</td>
<td>63</td>
<td>80</td>
<td>80</td>
<td>...</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>1.0</td>
<td>13.0</td>
<td>13.0</td>
</tr>
</tbody>
</table>

<p>2 rows × 44 columns</p>
</div>
</div>
</div>
</section>
<section id="mas-não-é-só-isso" class="level3">
<h3 class="anchored" data-anchor-id="mas-não-é-só-isso">Mas não é só isso…</h3>
<p>Outra grande vantagem de se utilizar pandas é que temos a nossa disposição um grande número de opções para carregar dados. Além do <code>read_csv</code>, temos readers especializados: <code>read_json</code>, <code>read_excel</code>, e por aí vai… Aconselho a dar uma olhada no manual do pandas <a href="https://pandas.pydata.org/docs/user_guide/io.html">aqui</a>.</p>
</section>
<section id="inspecionando-os-dados" class="level3">
<h3 class="anchored" data-anchor-id="inspecionando-os-dados">Inspecionando os dados</h3>
<p>Após termos os dados carregados, a nossa próxima atividade é inspecionar os dados. Além do comando que vimos acima <code>head()</code>, que pode nos mostrar as primeiras linhas do DataFrame, temos outras funções, como:</p>
<ul>
<li><code>tail()</code> - mostra as últimas linhas do DataFrame</li>
<li><code>sample()</code> - mostra linhas aleatórias do DataFrame</li>
<li><code>describe()</code> - mostra os valores de diversas medidas</li>
<li><code>info()</code> - mostra os campos do DataFrame com seus tipos</li>
<li><code>shape</code> - dá as dimensões (coluna, linha) do DataFrame</li>
</ul>
<p>Vamos ver em detalhes cada uma destas funções.</p>
<section id="head" class="level4">
<h4 class="anchored" data-anchor-id="head"><code>head()</code></h4>
<p>Esta função lista as primeiras linhas de dados. O pârametro é opcional, o que fará com que a função liste 10 linhas de dados.</p>
<div id="cell-24" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">pokemons.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Number</th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Type 1</th>
<th data-quarto-table-cell-role="th">Type 2</th>
<th data-quarto-table-cell-role="th">Abilities</th>
<th data-quarto-table-cell-role="th">HP</th>
<th data-quarto-table-cell-role="th">Att</th>
<th data-quarto-table-cell-role="th">Def</th>
<th data-quarto-table-cell-role="th">Spa</th>
<th data-quarto-table-cell-role="th">Spd</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">Against Bug</th>
<th data-quarto-table-cell-role="th">Against Rock</th>
<th data-quarto-table-cell-role="th">Against Ghost</th>
<th data-quarto-table-cell-role="th">Against Dragon</th>
<th data-quarto-table-cell-role="th">Against Dark</th>
<th data-quarto-table-cell-role="th">Against Steel</th>
<th data-quarto-table-cell-role="th">Against Fairy</th>
<th data-quarto-table-cell-role="th">Height</th>
<th data-quarto-table-cell-role="th">Weight</th>
<th data-quarto-table-cell-role="th">BMI</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>Bulbasaur</td>
<td>Grass</td>
<td>Poison</td>
<td>['Chlorophyll', 'Overgrow']</td>
<td>45</td>
<td>49</td>
<td>49</td>
<td>65</td>
<td>65</td>
<td>...</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>0.7</td>
<td>6.9</td>
<td>14.1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>Ivysaur</td>
<td>Grass</td>
<td>Poison</td>
<td>['Chlorophyll', 'Overgrow']</td>
<td>60</td>
<td>62</td>
<td>63</td>
<td>80</td>
<td>80</td>
<td>...</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>1.0</td>
<td>13.0</td>
<td>13.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3</td>
<td>Venusaur</td>
<td>Grass</td>
<td>Poison</td>
<td>['Chlorophyll', 'Overgrow']</td>
<td>80</td>
<td>82</td>
<td>83</td>
<td>100</td>
<td>100</td>
<td>...</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>2.0</td>
<td>100.0</td>
<td>25.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>3</td>
<td>Mega Venusaur</td>
<td>Grass</td>
<td>Poison</td>
<td>['Thick Fat']</td>
<td>80</td>
<td>100</td>
<td>123</td>
<td>122</td>
<td>120</td>
<td>...</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>2.4</td>
<td>155.5</td>
<td>27.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>4</td>
<td>Charmander</td>
<td>Fire</td>
<td>NaN</td>
<td>['Blaze', 'Solar Power']</td>
<td>39</td>
<td>52</td>
<td>43</td>
<td>60</td>
<td>50</td>
<td>...</td>
<td>0.5</td>
<td>2.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>0.5</td>
<td>0.6</td>
<td>8.5</td>
<td>23.6</td>
</tr>
</tbody>
</table>

<p>5 rows × 44 columns</p>
</div>
</div>
</div>
</section>
<section id="tail" class="level4">
<h4 class="anchored" data-anchor-id="tail"><code>tail()</code></h4>
<p>Esta função lista as últimas linhas de dados. O pârametro é opcional, o que fará com que a função liste 10 linhas de dados.</p>
<div id="cell-27" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">pokemons.tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Number</th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Type 1</th>
<th data-quarto-table-cell-role="th">Type 2</th>
<th data-quarto-table-cell-role="th">Abilities</th>
<th data-quarto-table-cell-role="th">HP</th>
<th data-quarto-table-cell-role="th">Att</th>
<th data-quarto-table-cell-role="th">Def</th>
<th data-quarto-table-cell-role="th">Spa</th>
<th data-quarto-table-cell-role="th">Spd</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">Against Bug</th>
<th data-quarto-table-cell-role="th">Against Rock</th>
<th data-quarto-table-cell-role="th">Against Ghost</th>
<th data-quarto-table-cell-role="th">Against Dragon</th>
<th data-quarto-table-cell-role="th">Against Dark</th>
<th data-quarto-table-cell-role="th">Against Steel</th>
<th data-quarto-table-cell-role="th">Against Fairy</th>
<th data-quarto-table-cell-role="th">Height</th>
<th data-quarto-table-cell-role="th">Weight</th>
<th data-quarto-table-cell-role="th">BMI</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1027</td>
<td>896</td>
<td>Glastrier</td>
<td>Ice</td>
<td>NaN</td>
<td>['Chilling Neigh']</td>
<td>100</td>
<td>145</td>
<td>130</td>
<td>65</td>
<td>110</td>
<td>...</td>
<td>1.0</td>
<td>2.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>2.0</td>
<td>1.0</td>
<td>2.2</td>
<td>800.0</td>
<td>165.3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1028</td>
<td>897</td>
<td>Spectrier</td>
<td>Ghost</td>
<td>NaN</td>
<td>['Grim Neigh']</td>
<td>100</td>
<td>65</td>
<td>60</td>
<td>145</td>
<td>80</td>
<td>...</td>
<td>0.5</td>
<td>1.0</td>
<td>2.0</td>
<td>1.0</td>
<td>2.0</td>
<td>1.0</td>
<td>1.0</td>
<td>2.0</td>
<td>44.5</td>
<td>11.1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1029</td>
<td>898</td>
<td>Calyrex</td>
<td>Psychic</td>
<td>Grass</td>
<td>['Unnerve']</td>
<td>100</td>
<td>80</td>
<td>80</td>
<td>80</td>
<td>80</td>
<td>...</td>
<td>4.0</td>
<td>1.0</td>
<td>2.0</td>
<td>1.0</td>
<td>2.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.1</td>
<td>7.7</td>
<td>6.4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1030</td>
<td>898</td>
<td>Calyrex Ice Rider</td>
<td>Psychic</td>
<td>Ice</td>
<td>['As One']</td>
<td>100</td>
<td>165</td>
<td>150</td>
<td>85</td>
<td>130</td>
<td>...</td>
<td>2.0</td>
<td>2.0</td>
<td>2.0</td>
<td>1.0</td>
<td>2.0</td>
<td>2.0</td>
<td>1.0</td>
<td>2.4</td>
<td>809.1</td>
<td>140.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1031</td>
<td>898</td>
<td>Calyrex Shadow Rider</td>
<td>Psychic</td>
<td>Ghost</td>
<td>['As One']</td>
<td>100</td>
<td>85</td>
<td>80</td>
<td>165</td>
<td>100</td>
<td>...</td>
<td>1.0</td>
<td>1.0</td>
<td>4.0</td>
<td>1.0</td>
<td>4.0</td>
<td>1.0</td>
<td>1.0</td>
<td>2.4</td>
<td>53.6</td>
<td>9.3</td>
</tr>
</tbody>
</table>

<p>5 rows × 44 columns</p>
</div>
</div>
</div>
</section>
<section id="sample" class="level4">
<h4 class="anchored" data-anchor-id="sample"><code>sample()</code></h4>
<p>Enquanto <code>head()</code> e <code>tail()</code> mostra o início e o fim do conjunto de dados, o <code>sample()</code> traz linhas aleatórias do conjunto, o que pode ser bem interessante.</p>
<div id="cell-30" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">pokemons.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Number</th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Type 1</th>
<th data-quarto-table-cell-role="th">Type 2</th>
<th data-quarto-table-cell-role="th">Abilities</th>
<th data-quarto-table-cell-role="th">HP</th>
<th data-quarto-table-cell-role="th">Att</th>
<th data-quarto-table-cell-role="th">Def</th>
<th data-quarto-table-cell-role="th">Spa</th>
<th data-quarto-table-cell-role="th">Spd</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">Against Bug</th>
<th data-quarto-table-cell-role="th">Against Rock</th>
<th data-quarto-table-cell-role="th">Against Ghost</th>
<th data-quarto-table-cell-role="th">Against Dragon</th>
<th data-quarto-table-cell-role="th">Against Dark</th>
<th data-quarto-table-cell-role="th">Against Steel</th>
<th data-quarto-table-cell-role="th">Against Fairy</th>
<th data-quarto-table-cell-role="th">Height</th>
<th data-quarto-table-cell-role="th">Weight</th>
<th data-quarto-table-cell-role="th">BMI</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">519</td>
<td>438</td>
<td>Bonsly</td>
<td>Rock</td>
<td>NaN</td>
<td>['Rattled', 'Rock Head', 'Sturdy']</td>
<td>50</td>
<td>80</td>
<td>95</td>
<td>10</td>
<td>45</td>
<td>...</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>2.0</td>
<td>1.0</td>
<td>0.5</td>
<td>15.0</td>
<td>60.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">635</td>
<td>542</td>
<td>Leavanny</td>
<td>Bug</td>
<td>Grass</td>
<td>['Chlorophyll', 'Overcoat', 'Swarm']</td>
<td>75</td>
<td>103</td>
<td>80</td>
<td>70</td>
<td>80</td>
<td>...</td>
<td>2.0</td>
<td>2.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.2</td>
<td>20.5</td>
<td>14.2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">405</td>
<td>340</td>
<td>Whiscash</td>
<td>Water</td>
<td>Ground</td>
<td>['Anticipation', 'Hydration', 'Oblivious']</td>
<td>110</td>
<td>78</td>
<td>73</td>
<td>76</td>
<td>71</td>
<td>...</td>
<td>1.0</td>
<td>0.5</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>1.0</td>
<td>0.9</td>
<td>23.6</td>
<td>29.1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">502</td>
<td>422</td>
<td>Shellos</td>
<td>Water</td>
<td>NaN</td>
<td>['Sand Force', 'Sticky Hold', 'Storm Drain']</td>
<td>76</td>
<td>48</td>
<td>48</td>
<td>57</td>
<td>62</td>
<td>...</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>1.0</td>
<td>0.3</td>
<td>6.3</td>
<td>70.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">976</td>
<td>849</td>
<td>Toxtricity</td>
<td>Electric</td>
<td>Poison</td>
<td>['Plus', 'Punk Rock', 'Technician']</td>
<td>75</td>
<td>98</td>
<td>70</td>
<td>114</td>
<td>70</td>
<td>...</td>
<td>0.5</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>0.5</td>
<td>1.6</td>
<td>40.0</td>
<td>15.6</td>
</tr>
</tbody>
</table>

<p>5 rows × 44 columns</p>
</div>
</div>
</div>
</section>
<section id="describe" class="level4">
<h4 class="anchored" data-anchor-id="describe"><code>describe()</code></h4>
<p>Esta função nos ajuda a ter uma idéia dos valores que temos em nosso conjunto de dados. A função lista todas as colunas numéricas e apresenta os resultados para os seguintes cálculos estatísticos: média, desvio padrão, valor mínimo, percentil 25%, 50%, 75% e valor máximo.</p>
<p>Isso nos dá uma idéia da variabilidade dos nossos dados, bem como permite uma análise de correlação superficial entre os valores numéricos.</p>
<div id="cell-33" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">pokemons.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Number</th>
<th data-quarto-table-cell-role="th">HP</th>
<th data-quarto-table-cell-role="th">Att</th>
<th data-quarto-table-cell-role="th">Def</th>
<th data-quarto-table-cell-role="th">Spa</th>
<th data-quarto-table-cell-role="th">Spd</th>
<th data-quarto-table-cell-role="th">Spe</th>
<th data-quarto-table-cell-role="th">BST</th>
<th data-quarto-table-cell-role="th">Mean</th>
<th data-quarto-table-cell-role="th">Standard Deviation</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">Against Bug</th>
<th data-quarto-table-cell-role="th">Against Rock</th>
<th data-quarto-table-cell-role="th">Against Ghost</th>
<th data-quarto-table-cell-role="th">Against Dragon</th>
<th data-quarto-table-cell-role="th">Against Dark</th>
<th data-quarto-table-cell-role="th">Against Steel</th>
<th data-quarto-table-cell-role="th">Against Fairy</th>
<th data-quarto-table-cell-role="th">Height</th>
<th data-quarto-table-cell-role="th">Weight</th>
<th data-quarto-table-cell-role="th">BMI</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>...</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
<td>1032.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean</td>
<td>439.226744</td>
<td>69.906008</td>
<td>80.526163</td>
<td>74.609496</td>
<td>72.918605</td>
<td>72.139535</td>
<td>68.548450</td>
<td>438.648256</td>
<td>73.108043</td>
<td>20.028104</td>
<td>...</td>
<td>1.002180</td>
<td>1.239826</td>
<td>1.025678</td>
<td>0.974806</td>
<td>1.074855</td>
<td>0.992006</td>
<td>1.094234</td>
<td>1.286822</td>
<td>71.879845</td>
<td>136.735756</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">std</td>
<td>261.871350</td>
<td>26.189155</td>
<td>32.542374</td>
<td>30.905972</td>
<td>32.773495</td>
<td>27.625876</td>
<td>30.219526</td>
<td>120.675545</td>
<td>20.112591</td>
<td>10.830298</td>
<td>...</td>
<td>0.613111</td>
<td>0.699361</td>
<td>0.577269</td>
<td>0.378040</td>
<td>0.475292</td>
<td>0.511859</td>
<td>0.535159</td>
<td>1.391501</td>
<td>132.872741</td>
<td>3111.666658</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">min</td>
<td>1.000000</td>
<td>1.000000</td>
<td>5.000000</td>
<td>5.000000</td>
<td>10.000000</td>
<td>20.000000</td>
<td>5.000000</td>
<td>175.000000</td>
<td>29.166667</td>
<td>0.000000</td>
<td>...</td>
<td>0.250000</td>
<td>0.250000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.250000</td>
<td>0.250000</td>
<td>0.250000</td>
<td>0.100000</td>
<td>0.100000</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25%</td>
<td>211.750000</td>
<td>50.000000</td>
<td>55.000000</td>
<td>50.000000</td>
<td>50.000000</td>
<td>50.000000</td>
<td>45.000000</td>
<td>330.000000</td>
<td>55.000000</td>
<td>12.801910</td>
<td>...</td>
<td>0.500000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>0.500000</td>
<td>1.000000</td>
<td>0.600000</td>
<td>9.000000</td>
<td>18.600000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50%</td>
<td>434.500000</td>
<td>67.000000</td>
<td>78.000000</td>
<td>70.000000</td>
<td>65.000000</td>
<td>70.000000</td>
<td>65.000000</td>
<td>459.000000</td>
<td>76.500000</td>
<td>18.484228</td>
<td>...</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>29.750000</td>
<td>28.350000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75%</td>
<td>667.250000</td>
<td>83.000000</td>
<td>100.000000</td>
<td>90.000000</td>
<td>95.000000</td>
<td>90.000000</td>
<td>90.000000</td>
<td>515.000000</td>
<td>85.833333</td>
<td>24.835709</td>
<td>...</td>
<td>1.000000</td>
<td>2.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.600000</td>
<td>71.275000</td>
<td>42.200000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">max</td>
<td>898.000000</td>
<td>255.000000</td>
<td>190.000000</td>
<td>230.000000</td>
<td>194.000000</td>
<td>230.000000</td>
<td>200.000000</td>
<td>780.000000</td>
<td>130.000000</td>
<td>103.215659</td>
<td>...</td>
<td>4.000000</td>
<td>4.000000</td>
<td>4.000000</td>
<td>2.000000</td>
<td>4.000000</td>
<td>4.000000</td>
<td>4.000000</td>
<td>20.000000</td>
<td>999.900000</td>
<td>99990.000000</td>
</tr>
</tbody>
</table>

<p>8 rows × 39 columns</p>
</div>
</div>
</div>
</section>
<section id="info" class="level4">
<h4 class="anchored" data-anchor-id="info"><code>info()</code></h4>
<p>Outra função útil é a função <code>info()</code> que traz a descrição da estrutura do DataFrame. Com esta função, você pode verificar os seguintes dados:</p>
<ul>
<li>lista colunas do DataFrame</li>
<li>para cada coluna, quantos elementos não-nulos ela possui</li>
<li>para cada coluna, seu tipo</li>
<li>E ainda o número total de linhas e colunas no DataFrame</li>
</ul>
<div id="cell-36" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">pokemons.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 1032 entries, 0 to 1031
Data columns (total 44 columns):
 #   Column                   Non-Null Count  Dtype  
---  ------                   --------------  -----  
 0   Number                   1032 non-null   int64  
 1   Name                     1032 non-null   object 
 2   Type 1                   1032 non-null   object 
 3   Type 2                   548 non-null    object 
 4   Abilities                1032 non-null   object 
 5   HP                       1032 non-null   int64  
 6   Att                      1032 non-null   int64  
 7   Def                      1032 non-null   int64  
 8   Spa                      1032 non-null   int64  
 9   Spd                      1032 non-null   int64  
 10  Spe                      1032 non-null   int64  
 11  BST                      1032 non-null   int64  
 12  Mean                     1032 non-null   float64
 13  Standard Deviation       1032 non-null   float64
 14  Generation               1032 non-null   float64
 15  Experience type          1032 non-null   object 
 16  Experience to level 100  1032 non-null   int64  
 17  Final Evolution          1032 non-null   float64
 18  Catch Rate               1032 non-null   int64  
 19  Legendary                1032 non-null   float64
 20  Mega Evolution           1032 non-null   float64
 21  Alolan Form              1032 non-null   float64
 22  Galarian Form            1032 non-null   float64
 23  Against Normal           1032 non-null   float64
 24  Against Fire             1032 non-null   float64
 25  Against Water            1032 non-null   float64
 26  Against Electric         1032 non-null   float64
 27  Against Grass            1032 non-null   float64
 28  Against Ice              1032 non-null   float64
 29  Against Fighting         1032 non-null   float64
 30  Against Poison           1032 non-null   float64
 31  Against Ground           1032 non-null   float64
 32  Against Flying           1032 non-null   float64
 33  Against Psychic          1032 non-null   float64
 34  Against Bug              1032 non-null   float64
 35  Against Rock             1032 non-null   float64
 36  Against Ghost            1032 non-null   float64
 37  Against Dragon           1032 non-null   float64
 38  Against Dark             1032 non-null   float64
 39  Against Steel            1032 non-null   float64
 40  Against Fairy            1032 non-null   float64
 41  Height                   1032 non-null   float64
 42  Weight                   1032 non-null   float64
 43  BMI                      1032 non-null   float64
dtypes: float64(29), int64(10), object(5)
memory usage: 354.9+ KB</code></pre>
</div>
</div>
</section>
<section id="shape" class="level4">
<h4 class="anchored" data-anchor-id="shape"><code>shape</code></h4>
<p>Esta não é uma função, mas sim uma propriedade, que retorna uma tupla com as dimensões de linha e coluna do DataFrame.</p>
<div id="cell-39" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">pokemons.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>(1032, 44)</code></pre>
</div>
</div>
</section>
</section>
<section id="filtrando-os-dados" class="level3">
<h3 class="anchored" data-anchor-id="filtrando-os-dados">Filtrando os dados</h3>
<p>Agora vamos aprender como executar uma das tarefas mais comuns de manipular DataFrames com o objetivo de realizar análises: filtragem dos dados. A versão atual do pandas trouxe algumas funções que nos facilitam enormemente o processo. Mas, com o objetivo de equipa-los com o máximo de informação possível, vamos também aprender os métodos mais conhecidos.</p>
<p>Mas, antes de mostrarmos como realizar os filtros, vamos explicar alguns conceitos básicos, mas bem relevantes para a operação de filtragem dos dados.</p>
<section id="acessando-uma-coluna-do-dataframe" class="level4">
<h4 class="anchored" data-anchor-id="acessando-uma-coluna-do-dataframe"><em>Acessando uma coluna do DataFrame</em></h4>
<p>Pode parecer óbvio, mas para acessar a coluna de um DataFrame, basta fazer o seguinte:</p>
<div id="cell-45" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">tipos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pokemons[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Type 1"</span>]</span></code></pre></div>
</div>
<p>Assim, a variável tipos conterá o que chamamos de uma Series, que é um array <code>numpy</code> (biblioteca especializada para criação de arrays numéricos) que contém todas as linhas daquela coluna. Para comprovar isso, vamos imprimir o conteúdo.</p>
<div id="cell-47" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">tipos</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>0         Grass
1         Grass
2         Grass
3         Grass
4          Fire
         ...   
1027        Ice
1028      Ghost
1029    Psychic
1030    Psychic
1031    Psychic
Name: Type 1, Length: 1032, dtype: object</code></pre>
</div>
</div>
<p>Parece interessante. Mas e se quisessemos criar um novo DataFrame apenas com as colunas Number, Name e Type 1? Parece simples, basta enviar ao DataFrame um array com o nome das colunas que quero extrair.</p>
<div id="cell-49" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">sub_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pokemons[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Type 1"</span>]]</span>
<span id="cb18-2"></span>
<span id="cb18-3">sub_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Number</th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Type 1</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>Bulbasaur</td>
<td>Grass</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>Ivysaur</td>
<td>Grass</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3</td>
<td>Venusaur</td>
<td>Grass</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>3</td>
<td>Mega Venusaur</td>
<td>Grass</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>4</td>
<td>Charmander</td>
<td>Fire</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1027</td>
<td>896</td>
<td>Glastrier</td>
<td>Ice</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1028</td>
<td>897</td>
<td>Spectrier</td>
<td>Ghost</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1029</td>
<td>898</td>
<td>Calyrex</td>
<td>Psychic</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1030</td>
<td>898</td>
<td>Calyrex Ice Rider</td>
<td>Psychic</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1031</td>
<td>898</td>
<td>Calyrex Shadow Rider</td>
<td>Psychic</td>
</tr>
</tbody>
</table>

<p>1032 rows × 3 columns</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Observe a questão da sintaxe de array: quando queremos apenas uma coluna a sintaxe de array não é necessária, ela se aplica apenas a múltiplos campos.</p>
</div>
</div>
<p>Mas, e como podemos acessar uma linha específica de um DataFrame? Se você está seguindo a linha de raciocínio, já imaginou que não é da maneira tradicional. Na verdade, é exatamente ao contrário do que estamos acostumados. Primeiro acessamos a coluna, e depois a linha, enquanto que em conjuntos de dados em formato tabular largo, primeiro acessamos a linha e depois a coluna.</p>
<div id="cell-52" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">pokemons[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>'Bulbasaur'</code></pre>
</div>
</div>
</section>
<section id="percorrendo-um-dataframe" class="level4">
<h4 class="anchored" data-anchor-id="percorrendo-um-dataframe">Percorrendo um DataFrame</h4>
<p>Interessante, certo? Mas isso levanta o seguinte questionamento: quando vou manipular os dados, como filtra-los ou fazer alguma modificação? Nos conjuntos de dados mais tradicionais, eu geralmente percorro o meu conjunto de dados linha a linha e faço os filtros e então altero as colunas. Como fazer isso em pandas?</p>
<div id="cell-55" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> index, pokemon <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pokemons.iterrows():</span>
<span id="cb21-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb21-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pokemon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name"</span>])</span>
<span id="cb21-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb21-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Bulbasaur
Ivysaur
Venusaur</code></pre>
</div>
</div>
<p>Como pode ser visto no código acima, basta usarmos a função <code>iterrows()</code> e iremos manipular o DataFrame como uma estrutura de dados mais tradicional, como um array de dicionário de dados. No código acima, fizemos um filtro que pega apenas as linhas com index menor ou igual 2, e mostra apenas o nome. Se DataFrames fossem estruturas de dados tradicionais, isso seria a maneira mais lógica de executar esse comando. Mas com pandas, podemos fazer isso:</p>
<div id="cell-57" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">pokemons[pokemons[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>0        Bulbasaur
1          Ivysaur
2         Venusaur
3    Mega Venusaur
Name: Name, dtype: object</code></pre>
</div>
</div>
<p>Wow, em uma única linha fizemos o filtro de linha e a seleção de coluna, e a principal vantagem sendo que este comando continuou retornando um DataFrame, o que ainda nos permite continuar trabalhando de forma eficiente com os dados que eu escolhi!</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Embora a utilização da função iterrows() pareça ser a forma mais natural e fácil de se trabalhar com Dataframes Pandas, é com a certeza a que apresenta a pior performance. Então, faça um esforço e aprenda muito bem os métodos mais “pandônicos” de manipular Dataframes, Cientista de Dados!</p>
</div>
</div>
<p>Esta linha também nos introduz ao primeiro jeito de realizar filtros de linha: adicionando a expressão lógica nos primeiros parenteses. Parece simples, embora para referenciar ao campo que será utilizado no filtro, eu ainda precise referenciar o próprio DataFrame. E esse foi apenas um filtro simples. Como seria utilizar mais de um campo no filtro? Vamos ver agora mesmo.</p>
<div id="cell-61" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">pokemons[(pokemons[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (pokemons[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Type 1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bug"</span>)][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>13    Caterpie
Name: Name, dtype: object</code></pre>
</div>
</div>
<p>Podemos perceber duas coisas: cada condição de filtro deve estar envolta em parenteses (vá em frente, se remover, teremos um erro), e em vez de usar o conector lógico tradicional AND ou OR, utilizamos &amp; (AND) ou | (OR). E quanto mais condições, pior será para lermos com clareza nosso código.</p>
<p>Uma variação deste tipo de filtragem é a utilização da propriedade <code>loc</code>. Ela nos permite acessar linhas diretamente, e utilizando a notação de manipulação de arrays, filtrar rapidamente o DataFrame. Vamos a um exemplo: gostaria de extrair 10 linhas do DataFrame, iniciando na linha 10.</p>
<div id="cell-63" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">pokemons.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Number</th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Type 1</th>
<th data-quarto-table-cell-role="th">Type 2</th>
<th data-quarto-table-cell-role="th">Abilities</th>
<th data-quarto-table-cell-role="th">HP</th>
<th data-quarto-table-cell-role="th">Att</th>
<th data-quarto-table-cell-role="th">Def</th>
<th data-quarto-table-cell-role="th">Spa</th>
<th data-quarto-table-cell-role="th">Spd</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">Against Bug</th>
<th data-quarto-table-cell-role="th">Against Rock</th>
<th data-quarto-table-cell-role="th">Against Ghost</th>
<th data-quarto-table-cell-role="th">Against Dragon</th>
<th data-quarto-table-cell-role="th">Against Dark</th>
<th data-quarto-table-cell-role="th">Against Steel</th>
<th data-quarto-table-cell-role="th">Against Fairy</th>
<th data-quarto-table-cell-role="th">Height</th>
<th data-quarto-table-cell-role="th">Weight</th>
<th data-quarto-table-cell-role="th">BMI</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>8</td>
<td>Wartortle</td>
<td>Water</td>
<td>NaN</td>
<td>['Rain Dish', 'Torrent']</td>
<td>59</td>
<td>63</td>
<td>80</td>
<td>65</td>
<td>80</td>
<td>...</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>1.0</td>
<td>1.0</td>
<td>22.5</td>
<td>22.5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>9</td>
<td>Blastoise</td>
<td>Water</td>
<td>NaN</td>
<td>['Rain Dish', 'Torrent']</td>
<td>79</td>
<td>83</td>
<td>100</td>
<td>85</td>
<td>105</td>
<td>...</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>1.0</td>
<td>1.6</td>
<td>85.5</td>
<td>33.4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>9</td>
<td>Mega Blastoise</td>
<td>Water</td>
<td>NaN</td>
<td>['Mega Launcher']</td>
<td>79</td>
<td>103</td>
<td>120</td>
<td>135</td>
<td>115</td>
<td>...</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>1.0</td>
<td>1.6</td>
<td>101.1</td>
<td>39.5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>10</td>
<td>Caterpie</td>
<td>Bug</td>
<td>NaN</td>
<td>['Run Away', 'Shield Dust']</td>
<td>45</td>
<td>30</td>
<td>35</td>
<td>20</td>
<td>20</td>
<td>...</td>
<td>1.0</td>
<td>2.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.3</td>
<td>2.9</td>
<td>32.2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>11</td>
<td>Metapod</td>
<td>Bug</td>
<td>NaN</td>
<td>['Shed Skin']</td>
<td>50</td>
<td>20</td>
<td>55</td>
<td>25</td>
<td>25</td>
<td>...</td>
<td>1.0</td>
<td>2.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.7</td>
<td>9.9</td>
<td>20.2</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>12</td>
<td>Butterfree</td>
<td>Bug</td>
<td>Flying</td>
<td>['Tinted Lens']</td>
<td>60</td>
<td>45</td>
<td>50</td>
<td>90</td>
<td>80</td>
<td>...</td>
<td>0.5</td>
<td>4.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.1</td>
<td>32.0</td>
<td>26.4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>13</td>
<td>Weedle</td>
<td>Bug</td>
<td>Poison</td>
<td>['Run Away', 'Shield Dust']</td>
<td>40</td>
<td>35</td>
<td>30</td>
<td>20</td>
<td>20</td>
<td>...</td>
<td>0.5</td>
<td>2.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>0.3</td>
<td>3.2</td>
<td>35.6</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>14</td>
<td>Kakuna</td>
<td>Bug</td>
<td>Poison</td>
<td>['Shed Skin']</td>
<td>45</td>
<td>25</td>
<td>50</td>
<td>25</td>
<td>25</td>
<td>...</td>
<td>0.5</td>
<td>2.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>0.6</td>
<td>10.0</td>
<td>27.8</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>15</td>
<td>Beedrill</td>
<td>Bug</td>
<td>Poison</td>
<td>['Sniper', 'Swarm']</td>
<td>65</td>
<td>90</td>
<td>40</td>
<td>45</td>
<td>80</td>
<td>...</td>
<td>0.5</td>
<td>2.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>1.0</td>
<td>29.5</td>
<td>29.5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>15</td>
<td>Mega Beedrill</td>
<td>Bug</td>
<td>Poison</td>
<td>['Adaptability']</td>
<td>65</td>
<td>150</td>
<td>40</td>
<td>15</td>
<td>80</td>
<td>...</td>
<td>0.5</td>
<td>2.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.5</td>
<td>1.4</td>
<td>40.5</td>
<td>20.7</td>
</tr>
</tbody>
</table>

<p>10 rows × 44 columns</p>
</div>
</div>
</div>
<p>Bem prático. A propriedade <code>loc</code> também pode entender o filtro anterior.</p>
<p>E agora, a última maneira pela qual podemos realizar filtros em nossos DataFrames e a mais recomendada devido a legibilidade do código gerado: vamos utilizar a função <code>query()</code>. Esta função permite que escrevamos filtros para o DataFrame como se o mesmo fosse um banco de dados, deixando o código mais limpo, pois eliminamos a necessidade de referenciar o DataFrame a cada filtro, bem como parênteses redundantes. Vamos ver um exemplo:</p>
<div id="cell-65" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">pokemons.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number &lt; 11 and `Type 1` == 'Bug'"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Number</th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Type 1</th>
<th data-quarto-table-cell-role="th">Type 2</th>
<th data-quarto-table-cell-role="th">Abilities</th>
<th data-quarto-table-cell-role="th">HP</th>
<th data-quarto-table-cell-role="th">Att</th>
<th data-quarto-table-cell-role="th">Def</th>
<th data-quarto-table-cell-role="th">Spa</th>
<th data-quarto-table-cell-role="th">Spd</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">Against Bug</th>
<th data-quarto-table-cell-role="th">Against Rock</th>
<th data-quarto-table-cell-role="th">Against Ghost</th>
<th data-quarto-table-cell-role="th">Against Dragon</th>
<th data-quarto-table-cell-role="th">Against Dark</th>
<th data-quarto-table-cell-role="th">Against Steel</th>
<th data-quarto-table-cell-role="th">Against Fairy</th>
<th data-quarto-table-cell-role="th">Height</th>
<th data-quarto-table-cell-role="th">Weight</th>
<th data-quarto-table-cell-role="th">BMI</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">13</td>
<td>10</td>
<td>Caterpie</td>
<td>Bug</td>
<td>NaN</td>
<td>['Run Away', 'Shield Dust']</td>
<td>45</td>
<td>30</td>
<td>35</td>
<td>20</td>
<td>20</td>
<td>...</td>
<td>1.0</td>
<td>2.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.3</td>
<td>2.9</td>
<td>32.2</td>
</tr>
</tbody>
</table>

<p>1 rows × 44 columns</p>
</div>
</div>
</div>
<p>Assim ficou bem mais limpo. Uma única observação é quanto ao uso do caracter “`” para campos com nomes compostos.</p>
</section>
</section>
<section id="agregando-os-dados" class="level3">
<h3 class="anchored" data-anchor-id="agregando-os-dados">Agregando os dados</h3>
<p>Em muitos casos, não queremos apenas filtrar os dados, mas também realizar totalizações, calcular valores médios, ou até mesmo cálculos mais complexos, de dados que devem ser agregados em um ou mais níveis.</p>
<p>Como exemplo, vamos supor que quisessemos totalizar o número de pokemons de acordo com o seu tipo.</p>
<div id="cell-69" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">pokemons.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Type 1'</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name"</span>].count().reset_index(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pokemons"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Type 1</th>
<th data-quarto-table-cell-role="th">Pokemons</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Bug</td>
<td>81</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Dark</td>
<td>46</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Dragon</td>
<td>42</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Electric</td>
<td>59</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Fairy</td>
<td>22</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>Fighting</td>
<td>42</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>Fire</td>
<td>64</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>Flying</td>
<td>8</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>Ghost</td>
<td>41</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>Grass</td>
<td>91</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>Ground</td>
<td>41</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>Ice</td>
<td>38</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>Normal</td>
<td>114</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>Poison</td>
<td>40</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>Psychic</td>
<td>77</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>Rock</td>
<td>59</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>Steel</td>
<td>36</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>Water</td>
<td>131</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Mas quanta coisa nova naquela linha, não é mesmo? Vamos explicar passo a passo:</p>
<ul>
<li>A primeira função é o groupby, onde especificamos por qual coluna ou colunas iremos fazer o agrupamento. No nosso exemplo, utilizamos a coluna ‘Type 1’</li>
<li>Em seguida, especificamos que, além da coluna ‘Type 1’, queremos apenas a coluna ‘Name’ nos nossos resultados</li>
<li>Logo após, indicamos que o valor original da coluna ‘Name’ será substituído pelo resultado da contagem de quantas linhas do DataFrame tem aquele valor específico da coluna ‘Type 1’</li>
<li>E por último, utilizamos uma função que irá trocar o nome da coluna ‘Name’ por um nome mais significativo</li>
</ul>
<p>Ufa, e tudo isso em apenas uma linha!</p>
<p>A fórmula para a agregação é sempre a mesma: groupby() e tipo de calculo (sum, count, mean, …). Por exemplo, no código abaixo, vamos agrupar também pela geração.</p>
<div id="cell-71" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">pokemons.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Type 1'</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>].count().reset_index(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pokemons'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Generation</th>
<th data-quarto-table-cell-role="th">Type 1</th>
<th data-quarto-table-cell-role="th">Pokemons</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1.0</td>
<td>Bug</td>
<td>12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1.0</td>
<td>Dragon</td>
<td>3</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1.0</td>
<td>Electric</td>
<td>9</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1.0</td>
<td>Fairy</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>1.0</td>
<td>Fighting</td>
<td>7</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">129</td>
<td>8.0</td>
<td>Poison</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">130</td>
<td>8.0</td>
<td>Psychic</td>
<td>11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">131</td>
<td>8.0</td>
<td>Rock</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">132</td>
<td>8.0</td>
<td>Steel</td>
<td>5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">133</td>
<td>8.0</td>
<td>Water</td>
<td>9</td>
</tr>
</tbody>
</table>

<p>134 rows × 3 columns</p>
</div>
</div>
</div>
<p>E se quisermos saber a média de pontos de vida por geração de pokemon? Parece simples…</p>
<div id="cell-73" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">pokemons.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Generation'</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HP'</span>].mean().reset_index(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Average HP'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Generation</th>
<th data-quarto-table-cell-role="th">Average HP</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1.0</td>
<td>64.211921</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2.0</td>
<td>70.980000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3.0</td>
<td>65.326087</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4.0</td>
<td>72.775862</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>5.0</td>
<td>71.601227</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>6.0</td>
<td>73.323308</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>7.0</td>
<td>69.793103</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>8.0</td>
<td>72.808696</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="encerrando" class="level2">
<h2 class="anchored" data-anchor-id="encerrando">Encerrando</h2>
<p>Neste artigo, conhecemos um pouco mais a respeito da biblioteca Pandas e como ela pode nos ajudar a carregar e analisar conjuntos de dados que podem ser utilizados em nossas visualizações, de forma simplificada e eficiente.</p>
<p>Dentro do processo de utilização de Pandas, aprendemos as executar as principais tarefas:</p>
<ul>
<li>aprender sobre os metadados do conjunto de dados, utilizando: describe, info e shape</li>
<li>listar conteúdo com head, tail, sample e iterrows</li>
<li>acessar células diretamente</li>
<li>realizar filtros em cima do DataFrame utilizando o método colunar, utilizando loc ou utilizando a função query</li>
<li>agregar os dados para sumarizar a informação e facilitar a análise.</li>
</ul>
<p>Se você quiser saber mais sobre Pandas, eis aqui alguns links que podem ajudar:</p>
<ul>
<li><a href="https://pandas.pydata.org/docs/#">Pandas - Documentação Oficial</a></li>
<li><a href="https://www.w3schools.com/python/pandas/default.asp">Tutorial Pandas - W3 Schools</a></li>
<li><a href="https://www.kaggle.com/learn/pandas">Tutorial Pandas - Kaggle</a></li>
<li><a href="https://www.hashtagtreinamentos.com/introducao-pandas-python?gclid=Cj0KCQjwk7ugBhDIARIsAGuvgPbJfKDsQ2lVfj8ndsjjYq81gRiEuGbzVacfpmT03P6BhDCQVFX1EYAaAo2FEALw_wcB">Vídeo sobre Pandas - Hashtag Treinamentos</a></li>
</ul>
<p>Um abraço e até a próxima,</p>
<p>Walter.</p>


</section>

 ]]></description>
  <category>Visualização</category>
  <category>Python</category>
  <category>Pandas</category>
  <guid>https://blog.wvcode.com.br/posts/data-105/</guid>
  <pubDate>Tue, 07 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://blog.wvcode.com.br/library/concepts/programming_practice.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Parte 03 - Formatos de Dados</title>
  <dc:creator>Walter R. Paixão-Côrtes</dc:creator>
  <link>https://blog.wvcode.com.br/posts/data-103/</link>
  <description><![CDATA[ 





<p>Olá Devs!</p>
<p>Neste artigo, vamos aprender um pouco mais sobre os formatos utilizados para armazenar os dados que nossas visualizações irão consumir.</p>
<section id="fontes-de-dados-e-seus-formatos" class="level3">
<h3 class="anchored" data-anchor-id="fontes-de-dados-e-seus-formatos">Fontes de dados e seus formatos</h3>
<p>Para realizarmos nossas tarefas como Cientistas de Dados, é necessário que acessemos aquilo que nos é mais caro, o nosso combustível: os dados.</p>
<p>Estes dados vem das mais diversas fontes: websites, dispositivos IoT, bancos de dados, documentos, … Estas diferentes fontes significam que os dados possuem diferentes formatos, e uma de nossas tarefas é transformar este dado em um formato com o qual seja possível trabalhar e gerar os resultados esperados.</p>
<p>Dentro da área de Ciência da Computação, o formato mais utilizado para servir como base para o processamento de informação é o formato tabular.</p>
<section id="formato-tabular" class="level4">
<h4 class="anchored" data-anchor-id="formato-tabular">Formato Tabular</h4>
<p>O formato tabular é utilizado para descrever uma estrutura de dados organizada em linhas e colunas, formando uma tabela. É um formato muito utilizado em bancos de dados relacionais e em arquivos CSV (Comma-Separated Values), onde cada linha representa um registro ou observação e cada coluna representa uma variável ou campo. Esse formato é muito útil para representar dados estruturados de forma clara e organizada, permitindo a fácil manipulação e análise dos dados.</p>
<p>Abaixo, temos um exemplo prático de como podemos utilizar Python para carregar um arquivo CSV em nosso notebook.</p>
<div id="cell-6" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csv</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Abre o arquivo CSV em modo leitura</span></span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exemplo.csv'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> arquivo_csv:</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cria um objeto para ler o arquivo CSV</span></span>
<span id="cb1-6">    leitor_csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.reader(arquivo_csv, delimiter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Percorre as linhas do arquivo CSV</span></span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> linha <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> leitor_csv:</span>
<span id="cb1-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(linha)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['Nome', 'Idade', 'Cidade']
['Maria', '25', 'São Paulo']
['João', '30', 'Rio de Janeiro']
['Ana', '20', 'Belo Horizonte']
['Andre', '23', 'Porto Alegre']</code></pre>
</div>
</div>
<p>Neste exemplo, utilizamos a função open para abrir o arquivo CSV em modo leitura e, em seguida, criamos um objeto csv.reader para ler o arquivo CSV. Utilizamos o parâmetro delimiter para indicar o caractere separador utilizado no arquivo CSV (no caso, a vírgula). Em seguida, utilizamos um loop for para percorrer as linhas do arquivo CSV e imprimir cada uma delas na tela.</p>
<p>Note que, neste exemplo, o resultado é uma lista de listas, onde cada lista interna representa uma linha do arquivo CSV. Para manipular os dados, é necessário fazer a conversão manualmente para o formato desejado.</p>
<p>E, apesar deste formato ser adequado ao processamento dos dados para visualização, ainda precisamos fazer alguns ajustes até chegar ao formato ideal.</p>
</section>
</section>
<section id="otimizando-o-formato-tabular" class="level3">
<h3 class="anchored" data-anchor-id="otimizando-o-formato-tabular">Otimizando o Formato Tabular</h3>
<p>O formato tabular padrão também pode ser referenciado pelo termo ‘Formato Largo’ (Wide format em inglês), por sua característica de organização em linhas e colunas, com a linha sendo uma observação e as colunas sendo as variáveis da observação. Isto pode ser percebido pelo formato que nossos código percorrem os arquivos ou selecionam a informação de um banco de dados: sempre pensando em extrair linhas que depois são usadas em algum tipo de processamento. Isso gera o que chamamos de overhead no processamento, porque por vezes precisamos apenas fazer o processamento de uma coluna de dados, mas somos obrigados a acessar todas as colunas para depois selecionar a coluna que queremos.</p>
<p>Para resolver essa questão, foi criado um caso especial de formato tabular, o chamado ‘Formato Longo’ (Long format em inglês), onde a orientação da organização dos dados é colunas e linhas, ou seja, podemos acessar uma coluna individualmente, com todas as suas linhas.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-103/df_long_x_wide_form.png" class="img-fluid figure-img"></p>
<figcaption>Formato Longo X Formato Largo</figcaption>
</figure>
</div>
<p>Em Python e em muitas outras linguagens de programação que são utilizadas para Ciência de Dados, o formato tabular é representado por estruturas de dados especiais, chamadas de <code>DataFrames</code> e <code>Series</code>.</p>
<p>Mas antes de explicar em mais detalhes essas estruturas, vamos conhecer um pouco das suas origens.</p>
</section>
<section id="dicionários-e-listas" class="level3">
<h3 class="anchored" data-anchor-id="dicionários-e-listas">Dicionários e Listas</h3>
<p>Se você já conhece o básico de Python, já aprendeu que temos os tipos de dados conhecidos como listas e dicionário de dados. Com estes tipos, podemos representar dados mais complexos, como uma sequência ou um objeto, que são compostos de vários tipos simples. Se você quiser aprender mais sobre listas e dicionários, vá para o final deste notebook.</p>
<p>Em Python, a representação de dados no formato tabular, seja longo ou largo, passa pela combinação destes dois tipos de dados.</p>
<section id="representação-em-python-do-formato-largo" class="level4">
<h4 class="anchored" data-anchor-id="representação-em-python-do-formato-largo">Representação em Python do Formato Largo</h4>
<p>Para criar um objeto em Python que represente um conjunto de dados no Formato Largo, é necessário montar uma lista de dicionários.</p>
<div id="cell-16" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">dados_largos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb3-2">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"codigo"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nome"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jose"</span>},</span>
<span id="cb3-3">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"codigo"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nome"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maria"</span>},</span>
<span id="cb3-4">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"codigo"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nome"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fernandez"</span>}</span>
<span id="cb3-5">]</span></code></pre></div>
</div>
<p>Neste objeto, temos uma lista que contém 3 elementos. Cada elemento é um dicionário com dois campos. Conforme explicamos anteriormente, no formato largo, para acessar o nome de uma pessoa, precisamos identificar em que linha ela está. Para identificar a linha, percorremos nossa lista. Para inspecionar o nome, recuperamos todo o dicionário que está naquela posição da lista.</p>
</section>
<section id="representação-em-python-do-formato-longo" class="level4">
<h4 class="anchored" data-anchor-id="representação-em-python-do-formato-longo">Representação em Python do Formato Longo</h4>
<p>Para criar um objeto em Python que represente um conjunto de dados no Formato Longo, é necessário montar um dicionário de listas.</p>
<div id="cell-20" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">dados_longos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-2">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"codigo"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], </span>
<span id="cb4-3">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nome"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jose"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maria"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fernandez"</span>]</span>
<span id="cb4-4">               }</span></code></pre></div>
</div>
<p>Neste objeto, temos o dicionário com seus campos, e cada campo é uma lista com os valores para cada linha.</p>
</section>
<section id="entendendo-a-diferença" class="level4">
<h4 class="anchored" data-anchor-id="entendendo-a-diferença">Entendendo a diferença</h4>
<p>Vamos ver um exemplo prático para entender a diferença entre os dois. Acompanhe no código abaixo e leia os comentários.</p>
<div id="cell-24" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Queremos saber o nome do usuário que está na segunda linha do nosso conjunto de dados.</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Formato largo</span></span>
<span id="cb5-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dados_largos[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nome"</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># utilizamos o indice 1 porque em Python listas começam no indice 0</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Formato longo</span></span>
<span id="cb5-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dados_longos[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nome"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apenas invertemos a referência - primeiro a coluna, depois a linha</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Maria
Maria</code></pre>
</div>
</div>
<p>A diferença parece pouca, certo? Apenas invertemos como os indices são acessados, onde está a tal otimização?</p>
<p>A otimização está no fato de que, ao acessar a linha de um dado no formato largo, estamos acessando todas as colunas de informação daquela linha.</p>
<div id="cell-26" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dados_largos[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'codigo': 2, 'nome': 'Maria'}</code></pre>
</div>
</div>
<p>Já no formato longo, antes de especificar a linha, eu preciso referenciar a coluna, portanto, sempre terei apenas um valor.</p>
<div id="cell-28" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dados_longos[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nome"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Maria</code></pre>
</div>
</div>
</section>
</section>
<section id="dataframes-e-series" class="level3">
<h3 class="anchored" data-anchor-id="dataframes-e-series">DataFrames e Series</h3>
<p>O DataFrame e as Series são dois dos principais conceitos utilizados para trabalhar com dados em Python. Ambos estão presentes na biblioteca Pandas, que é uma das ferramentas mais usadas para análise de dados.</p>
<p>O DataFrame é um objeto que tem como base o conceito de dicionário de listas, onde as listas são representadas por Series. O DataFrame adiciona uma série de funcionalidades ao dicionário de listas, simplificando a manipulação dos mesmos.</p>
<p>Exemplo de código:</p>
<div id="cell-31" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd </span>
<span id="cb11-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]]) </span>
<span id="cb11-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>9</code></pre>
</div>
</div>
<p>A Series é uma lista com superpoderes. Assim como o DataFrame, a Series acrescenta muitas facilidades para manipular a lista. Exemplo de código:</p>
<div id="cell-33" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd </span>
<span id="cb13-2">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]) </span>
<span id="cb13-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(s[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3</code></pre>
</div>
</div>
<p>Além do Pandas existem outras bibliotecas que utilizam esses conceitos para trabalhar com dados como NumPy (Numerical Python), SciPy (Scientific Python) e Scikit-learn (Machine Learning).</p>
</section>
<section id="finalizando" class="level3">
<h3 class="anchored" data-anchor-id="finalizando">Finalizando</h3>
<p>Neste artigo, aprendemos sobre os formatos de dados que podemos utilizar em nossas visualizações e conhecemos mais detalhes dos DataFrames e Series.</p>
<p>Aqui temos alguns links sobre o assunto: - <a href="https://docs.python.org/3/library/stdtypes.html#list">Listas</a> - <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict">Dicionários</a></p>


</section>

 ]]></description>
  <category>Visualização</category>
  <category>Python</category>
  <category>Teoria</category>
  <category>ptbr</category>
  <guid>https://blog.wvcode.com.br/posts/data-103/</guid>
  <pubDate>Sun, 05 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://blog.wvcode.com.br/posts/data-103/df_long_x_wide_form.png" medium="image" type="image/png" height="99" width="144"/>
</item>
<item>
  <title>Parte 02 - Google Colab</title>
  <dc:creator>Walter R. Paixão-Côrtes</dc:creator>
  <link>https://blog.wvcode.com.br/posts/data-102/</link>
  <description><![CDATA[ 





<p>Olá Devs!</p>
<p>Hoje iremos conhecer o Google Colab, e entender como utiliza-lo em nossas tarefas de Análise e Visualização de Dados.</p>
<p>Vamos lá?</p>
<section id="o-que-é-o-google-colab" class="level3">
<h3 class="anchored" data-anchor-id="o-que-é-o-google-colab">O que é o Google Colab?</h3>
<p>O Google Colab é uma plataforma de computação em nuvem gratuita baseada no <a href="https://jupyter.org/">Jupyter Notebook</a>. Ele permite que os usuários criem e compartilhem documentos que contenham código executável, equações, visualizações e texto explicativo. O Google Colab oferece suporte a várias linguagens de programação populares, incluindo Python, JavaScript e Swift.</p>
<p>Isto significa que podemos intercalar blocos de texto, imagens e código em um mesmo documento. Como um Cientista de Dados, você vai utilizar muito este recurso tanto nos momentos em que você está trabalhando os dados e construindo o modelo quanto naquele momento em que você precisa comunicar seus achados e resultados para outros cientistas e para o seu público alvo.</p>
</section>
<section id="como-acessamos-o-google-colab" class="level3">
<h3 class="anchored" data-anchor-id="como-acessamos-o-google-colab">Como acessamos o Google Colab?</h3>
<p>Para acessar o Google Colab, você precisa se conectar com uma conta do Google e acessar o site <a href="https://colab.research.google.com">colab.research.google.com</a>. Você verá então, a seguinte tela:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-102/colab-001.png" class="img-fluid figure-img"></p>
<figcaption>Tela Inicial do Colab</figcaption>
</figure>
</div>
<p>Como você pode ver, a primeira atividade que ele sugere é abrir exemplos ou, no meu caso, alguns arquivos mais recentes. O Colab é integrado com o Google Drive, então seus arquivos, que terão sempre a extensão <code>.ipynb</code> estarão sempre salvos lá no seu Drive, em uma pasta específica.</p>
</section>
<section id="iniciando-um-novo-notebook" class="level3">
<h3 class="anchored" data-anchor-id="iniciando-um-novo-notebook">Iniciando um novo notebook!</h3>
<p>Vamos iniciar? Clique no link “new notebook”. Você deve ver sua tela assim:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-102/colab-002.png" class="img-fluid figure-img"></p>
<figcaption>Novo Notebook</figcaption>
</figure>
</div>
<p>Neste momento, vamos destacar três áreas da tela:</p>
<ol type="1">
<li>Onde fica o nome do notebook. Você pode modificar quando quiser</li>
<li>Sistema de arquivos do notebook. Quando iniciamos um novo notebook, temos um sistema de arquivos virtual, onde podemos subir arquivos que serão utilizados durante a execução do código. Esses arquivos são apagados quando o notebook não está ativo.</li>
<li>Esta é uma célula. Um notebook é feito de um conjunto de células que são executadas sequencialmente. As células podem ser de dois tipos: células de código ou células de texto. A célula que estamos marcando é especificamente uma célula de código, pois tem o botão de execução bem a esquerda.</li>
</ol>
<section id="células-de-texto" class="level4">
<h4 class="anchored" data-anchor-id="células-de-texto">Células de Texto</h4>
<p>As células de texto nos permitem escrever texto no formato Markdown, que facilita bastante a formatação. Se quiser aprender mais sobre Markdown, <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">clique aqui</a>. Veja alguns exemplos:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-102/colab-003.png" class="img-fluid figure-img"></p>
<figcaption>Exemplos de célula de texto</figcaption>
</figure>
</div>
</section>
<section id="células-de-código" class="level4">
<h4 class="anchored" data-anchor-id="células-de-código">Células de Código</h4>
<p>Células de código, como o próprio nome diz, servem para escrever código que será executado. Podemos usar algumas linguagens, sendo que a mais comum é Python. Cada célula, ao ser executada, pode imprimir o resultado de sua execução logo abaixo. Veja um exemplo abaixo:</p>
<div id="cell-17" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-4"></span>
<span id="cb1-5">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://dummyjson.com/products"</span>)</span>
<span id="cb1-6">json.dump(json.loads(response.text)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'products'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'products.json'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>))</span>
<span id="cb1-7">raw_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'products.json'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>)</span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .load("https://dummyjson.com/products")</span></span>
<span id="cb1-9">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_json(raw_data)</span>
<span id="cb1-10"></span>
<span id="cb1-11">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">title</th>
<th data-quarto-table-cell-role="th">description</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">discountPercentage</th>
<th data-quarto-table-cell-role="th">rating</th>
<th data-quarto-table-cell-role="th">stock</th>
<th data-quarto-table-cell-role="th">brand</th>
<th data-quarto-table-cell-role="th">category</th>
<th data-quarto-table-cell-role="th">thumbnail</th>
<th data-quarto-table-cell-role="th">images</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>iPhone 9</td>
<td>An apple mobile which is nothing like apple</td>
<td>549</td>
<td>12.96</td>
<td>4.69</td>
<td>94</td>
<td>Apple</td>
<td>smartphones</td>
<td>https://i.dummyjson.com/data/products/1/thumbn...</td>
<td>[https://i.dummyjson.com/data/products/1/1.jpg...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>iPhone X</td>
<td>SIM-Free, Model A19211 6.5-inch Super Retina H...</td>
<td>899</td>
<td>17.94</td>
<td>4.44</td>
<td>34</td>
<td>Apple</td>
<td>smartphones</td>
<td>https://i.dummyjson.com/data/products/2/thumbn...</td>
<td>[https://i.dummyjson.com/data/products/2/1.jpg...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3</td>
<td>Samsung Universe 9</td>
<td>Samsung's new variant which goes beyond Galaxy...</td>
<td>1249</td>
<td>15.46</td>
<td>4.09</td>
<td>36</td>
<td>Samsung</td>
<td>smartphones</td>
<td>https://i.dummyjson.com/data/products/3/thumbn...</td>
<td>[https://i.dummyjson.com/data/products/3/1.jpg]</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>OPPOF19</td>
<td>OPPO F19 is officially announced on April 2021.</td>
<td>280</td>
<td>17.91</td>
<td>4.30</td>
<td>123</td>
<td>OPPO</td>
<td>smartphones</td>
<td>https://i.dummyjson.com/data/products/4/thumbn...</td>
<td>[https://i.dummyjson.com/data/products/4/1.jpg...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>5</td>
<td>Huawei P30</td>
<td>Huawei’s re-badged P30 Pro New Edition was off...</td>
<td>499</td>
<td>10.58</td>
<td>4.09</td>
<td>32</td>
<td>Huawei</td>
<td>smartphones</td>
<td>https://i.dummyjson.com/data/products/5/thumbn...</td>
<td>[https://i.dummyjson.com/data/products/5/1.jpg...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>6</td>
<td>MacBook Pro</td>
<td>MacBook Pro 2021 with mini-LED display may lau...</td>
<td>1749</td>
<td>11.02</td>
<td>4.57</td>
<td>83</td>
<td>Apple</td>
<td>laptops</td>
<td>https://i.dummyjson.com/data/products/6/thumbn...</td>
<td>[https://i.dummyjson.com/data/products/6/1.png...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>7</td>
<td>Samsung Galaxy Book</td>
<td>Samsung Galaxy Book S (2020) Laptop With Intel...</td>
<td>1499</td>
<td>4.15</td>
<td>4.25</td>
<td>50</td>
<td>Samsung</td>
<td>laptops</td>
<td>https://i.dummyjson.com/data/products/7/thumbn...</td>
<td>[https://i.dummyjson.com/data/products/7/1.jpg...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>8</td>
<td>Microsoft Surface Laptop 4</td>
<td>Style and speed. Stand out on HD video calls b...</td>
<td>1499</td>
<td>10.23</td>
<td>4.43</td>
<td>68</td>
<td>Microsoft Surface</td>
<td>laptops</td>
<td>https://i.dummyjson.com/data/products/8/thumbn...</td>
<td>[https://i.dummyjson.com/data/products/8/1.jpg...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>9</td>
<td>Infinix INBOOK</td>
<td>Infinix Inbook X1 Ci3 10th 8GB 256GB 14 Win10 ...</td>
<td>1099</td>
<td>11.83</td>
<td>4.54</td>
<td>96</td>
<td>Infinix</td>
<td>laptops</td>
<td>https://i.dummyjson.com/data/products/9/thumbn...</td>
<td>[https://i.dummyjson.com/data/products/9/1.jpg...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>10</td>
<td>HP Pavilion 15-DK1056WM</td>
<td>HP Pavilion 15-DK1056WM Gaming Laptop 10th Gen...</td>
<td>1099</td>
<td>6.18</td>
<td>4.43</td>
<td>89</td>
<td>HP Pavilion</td>
<td>laptops</td>
<td>https://i.dummyjson.com/data/products/10/thumb...</td>
<td>[https://i.dummyjson.com/data/products/10/1.jp...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>11</td>
<td>perfume Oil</td>
<td>Mega Discount, Impression of Acqua Di Gio by G...</td>
<td>13</td>
<td>8.40</td>
<td>4.26</td>
<td>65</td>
<td>Impression of Acqua Di Gio</td>
<td>fragrances</td>
<td>https://i.dummyjson.com/data/products/11/thumb...</td>
<td>[https://i.dummyjson.com/data/products/11/1.jp...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>12</td>
<td>Brown Perfume</td>
<td>Royal_Mirage Sport Brown Perfume for Men &amp; Wom...</td>
<td>40</td>
<td>15.66</td>
<td>4.00</td>
<td>52</td>
<td>Royal_Mirage</td>
<td>fragrances</td>
<td>https://i.dummyjson.com/data/products/12/thumb...</td>
<td>[https://i.dummyjson.com/data/products/12/1.jp...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>13</td>
<td>Fog Scent Xpressio Perfume</td>
<td>Product details of Best Fog Scent Xpressio Per...</td>
<td>13</td>
<td>8.14</td>
<td>4.59</td>
<td>61</td>
<td>Fog Scent Xpressio</td>
<td>fragrances</td>
<td>https://i.dummyjson.com/data/products/13/thumb...</td>
<td>[https://i.dummyjson.com/data/products/13/1.jp...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>14</td>
<td>Non-Alcoholic Concentrated Perfume Oil</td>
<td>Original Al Munakh® by Mahal Al Musk | Our Imp...</td>
<td>120</td>
<td>15.60</td>
<td>4.21</td>
<td>114</td>
<td>Al Munakh</td>
<td>fragrances</td>
<td>https://i.dummyjson.com/data/products/14/thumb...</td>
<td>[https://i.dummyjson.com/data/products/14/1.jp...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>15</td>
<td>Eau De Perfume Spray</td>
<td>Genuine Al-Rehab spray perfume from UAE/Saudi...</td>
<td>30</td>
<td>10.99</td>
<td>4.70</td>
<td>105</td>
<td>Lord - Al-Rehab</td>
<td>fragrances</td>
<td>https://i.dummyjson.com/data/products/15/thumb...</td>
<td>[https://i.dummyjson.com/data/products/15/1.jp...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>16</td>
<td>Hyaluronic Acid Serum</td>
<td>L'OrÃ©al Paris introduces Hyaluron Expert Repl...</td>
<td>19</td>
<td>13.31</td>
<td>4.83</td>
<td>110</td>
<td>L'Oreal Paris</td>
<td>skincare</td>
<td>https://i.dummyjson.com/data/products/16/thumb...</td>
<td>[https://i.dummyjson.com/data/products/16/1.pn...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>17</td>
<td>Tree Oil 30ml</td>
<td>Tea tree oil contains a number of compounds, i...</td>
<td>12</td>
<td>4.09</td>
<td>4.52</td>
<td>78</td>
<td>Hemani Tea</td>
<td>skincare</td>
<td>https://i.dummyjson.com/data/products/17/thumb...</td>
<td>[https://i.dummyjson.com/data/products/17/1.jp...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>18</td>
<td>Oil Free Moisturizer 100ml</td>
<td>Dermive Oil Free Moisturizer with SPF 20 is sp...</td>
<td>40</td>
<td>13.10</td>
<td>4.56</td>
<td>88</td>
<td>Dermive</td>
<td>skincare</td>
<td>https://i.dummyjson.com/data/products/18/thumb...</td>
<td>[https://i.dummyjson.com/data/products/18/1.jp...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>19</td>
<td>Skin Beauty Serum.</td>
<td>Product name: rorec collagen hyaluronic acid w...</td>
<td>46</td>
<td>10.68</td>
<td>4.42</td>
<td>54</td>
<td>ROREC White Rice</td>
<td>skincare</td>
<td>https://i.dummyjson.com/data/products/19/thumb...</td>
<td>[https://i.dummyjson.com/data/products/19/1.jp...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>20</td>
<td>Freckle Treatment Cream- 15gm</td>
<td>Fair &amp; Clear is Pakistan's only pure Freckle c...</td>
<td>70</td>
<td>16.99</td>
<td>4.06</td>
<td>140</td>
<td>Fair &amp; Clear</td>
<td>skincare</td>
<td>https://i.dummyjson.com/data/products/20/thumb...</td>
<td>[https://i.dummyjson.com/data/products/20/1.jp...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">20</td>
<td>21</td>
<td>- Daal Masoor 500 grams</td>
<td>Fine quality Branded Product Keep in a cool an...</td>
<td>20</td>
<td>4.81</td>
<td>4.44</td>
<td>133</td>
<td>Saaf &amp; Khaas</td>
<td>groceries</td>
<td>https://i.dummyjson.com/data/products/21/thumb...</td>
<td>[https://i.dummyjson.com/data/products/21/1.pn...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">21</td>
<td>22</td>
<td>Elbow Macaroni - 400 gm</td>
<td>Product details of Bake Parlor Big Elbow Macar...</td>
<td>14</td>
<td>15.58</td>
<td>4.57</td>
<td>146</td>
<td>Bake Parlor Big</td>
<td>groceries</td>
<td>https://i.dummyjson.com/data/products/22/thumb...</td>
<td>[https://i.dummyjson.com/data/products/22/1.jp...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">22</td>
<td>23</td>
<td>Orange Essence Food Flavou</td>
<td>Specifications of Orange Essence Food Flavour ...</td>
<td>14</td>
<td>8.04</td>
<td>4.85</td>
<td>26</td>
<td>Baking Food Items</td>
<td>groceries</td>
<td>https://i.dummyjson.com/data/products/23/thumb...</td>
<td>[https://i.dummyjson.com/data/products/23/1.jp...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">23</td>
<td>24</td>
<td>cereals muesli fruit nuts</td>
<td>original fauji cereal muesli 250gm box pack or...</td>
<td>46</td>
<td>16.80</td>
<td>4.94</td>
<td>113</td>
<td>fauji</td>
<td>groceries</td>
<td>https://i.dummyjson.com/data/products/24/thumb...</td>
<td>[https://i.dummyjson.com/data/products/24/1.jp...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">24</td>
<td>25</td>
<td>Gulab Powder 50 Gram</td>
<td>Dry Rose Flower Powder Gulab Powder 50 Gram • ...</td>
<td>70</td>
<td>13.58</td>
<td>4.87</td>
<td>47</td>
<td>Dry Rose</td>
<td>groceries</td>
<td>https://i.dummyjson.com/data/products/25/thumb...</td>
<td>[https://i.dummyjson.com/data/products/25/1.pn...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">25</td>
<td>26</td>
<td>Plant Hanger For Home</td>
<td>Boho Decor Plant Hanger For Home Wall Decorati...</td>
<td>41</td>
<td>17.86</td>
<td>4.08</td>
<td>131</td>
<td>Boho Decor</td>
<td>home-decoration</td>
<td>https://i.dummyjson.com/data/products/26/thumb...</td>
<td>[https://i.dummyjson.com/data/products/26/1.jp...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26</td>
<td>27</td>
<td>Flying Wooden Bird</td>
<td>Package Include 6 Birds with Adhesive Tape Sha...</td>
<td>51</td>
<td>15.58</td>
<td>4.41</td>
<td>17</td>
<td>Flying Wooden</td>
<td>home-decoration</td>
<td>https://i.dummyjson.com/data/products/27/thumb...</td>
<td>[https://i.dummyjson.com/data/products/27/1.jp...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">27</td>
<td>28</td>
<td>3D Embellishment Art Lamp</td>
<td>3D led lamp sticker Wall sticker 3d wall art l...</td>
<td>20</td>
<td>16.49</td>
<td>4.82</td>
<td>54</td>
<td>LED Lights</td>
<td>home-decoration</td>
<td>https://i.dummyjson.com/data/products/28/thumb...</td>
<td>[https://i.dummyjson.com/data/products/28/1.jp...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">28</td>
<td>29</td>
<td>Handcraft Chinese style</td>
<td>Handcraft Chinese style art luxury palace hote...</td>
<td>60</td>
<td>15.34</td>
<td>4.44</td>
<td>7</td>
<td>luxury palace</td>
<td>home-decoration</td>
<td>https://i.dummyjson.com/data/products/29/thumb...</td>
<td>[https://i.dummyjson.com/data/products/29/1.jp...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">29</td>
<td>30</td>
<td>Key Holder</td>
<td>Attractive DesignMetallic materialFour key hoo...</td>
<td>30</td>
<td>2.92</td>
<td>4.92</td>
<td>54</td>
<td>Golden</td>
<td>home-decoration</td>
<td>https://i.dummyjson.com/data/products/30/thumb...</td>
<td>[https://i.dummyjson.com/data/products/30/1.jp...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Esta célula, se executada, irá carregar dados de um site, salvar um arquivo e carrega-lo em um DataFrame que depois será impresso na área de resultados.</p>
</section>
</section>
<section id="utilizando-um-notebook" class="level3">
<h3 class="anchored" data-anchor-id="utilizando-um-notebook">Utilizando um notebook</h3>
<p>Os exemplos acima são bons para mostrar cada parte separadamente, mas vamos a um exemplo que irá ilustrar a utilização típica destes blocos.</p>
<section id="exemplo" class="level4">
<h4 class="anchored" data-anchor-id="exemplo">Exemplo</h4>
<p>Digamos que você precisa entregar um relatório para o seu chefe sobre quais são os primeiros 1000 números primos. Ele também solicita que você explique o que são números primos e como descobrir se um número é primo ou não.</p>
<p>Em um cenário tradicional de programação, provavelmente se faria a entrega de pelo menos dois arquivos: um documento do word, por exemplo, com a parte descritiva e um arquivo de código-fonte com o código. Como o arquivo de código-fonte não guarda o resultado da execução, é muito provável que este resultado fosse adicionado ao documento do word, ou quem sabe, disponibilizado em um terceiro arquivo.</p>
<p>Dá um certo trabalho preparar tudo… Além precisar de um computador com Word e com um editor de código-fonte para fazer todo o relatório. Mas com o Google Colab, você pode fazer tudo em um único lugar: um notebook pode ser editado de qualquer lugar, através do browser!</p>
<p>Veja o resultado abaixo:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.wvcode.com.br/posts/data-102/colab-004.png" class="img-fluid figure-img"></p>
<figcaption>Notebook completo</figcaption>
</figure>
</div>
<p>É bem interessante, não é mesmo? Tudo em um único documento, que eu posso compartilhar com outras pessoas, sem nenhuma complicação. E o melhor, quem abre este notebook, pode executar as partes que são código, quando bem quiserem, sem depender de você para atualizar os resultados.</p>
</section>
</section>
<section id="finalizando" class="level3">
<h3 class="anchored" data-anchor-id="finalizando">Finalizando</h3>
<p>Espero que você tenha gostado de aprender um pouco sobre o ambiente de desenvolvimento que iremos utilizar neste curso. Ao longo do curso, utilizaremos recursos mais avançados, então não perca a oportunidade de aprender mais sobre o Google Colab com estes links abaixo:</p>
<ul>
<li><a href="https://www.alura.com.br/artigos/google-colab-o-que-e-e-como-usar?gclid=CjwKCAiAxvGfBhB-EiwAMPakqjBnFPSyZyay7wg-cefz02KTf52hSDkUZ-sUAXtIgv6x79w8AKjrghoCSAYQAvD_BwE">O que é Google Colab</a></li>
<li><a href="https://www.hashtagtreinamentos.com/programar-online-google-colab-python">Google Colaboratory - Hashtag Treinamentos</a></li>
<li><a href="https://kenzie.com.br/blog/google-colab/">Vantagens de usar o Google Colab</a></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Os artigos citado acima e o conteúdo apresentado neste artigo não são de maneira nenhuma uma revisão extensiva do Google Colab, apresentamos apenas o necessário para você andar com seus próprios pés e no seu ritmo!</p>
</div>
</div>
<p>Um abraço, e até a próxima!</p>
<p>Walter.</p>


</section>

 ]]></description>
  <category>Visualização</category>
  <category>Python</category>
  <category>Google Colab</category>
  <category>ptbr</category>
  <guid>https://blog.wvcode.com.br/posts/data-102/</guid>
  <pubDate>Sat, 04 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://blog.wvcode.com.br/posts/data-102/colab.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>Parte 01 - Teoria de Visualização de Dados</title>
  <dc:creator>Walter R. Paixão-Côrtes</dc:creator>
  <link>https://blog.wvcode.com.br/posts/data-101/</link>
  <description><![CDATA[ 





<p>Olá Devs!</p>
<p>Na primeira parte desta série, vamos aprender um pouco de teoria sobre Visualização e Ciência de Dados, com o objetivo de compreendermos a importância da Visualização de Dados dentro da Ciência de Dados.</p>
<section id="o-que-é-ciência-de-dados" class="level3">
<h3 class="anchored" data-anchor-id="o-que-é-ciência-de-dados">O que é Ciência de Dados</h3>
<p>A ciência de dados é uma disciplina que usa habilidades matemáticas e técnicas avançadas de análise de dados para transformar grandes quantidades de informações em insights úteis. Ela é usada em diversos setores para tomada de decisão informada e resolução de problemas complexos.</p>
<p>Ciência de dados é como ser um detetive super nerd que desvenda mistérios escondidos nos dados. Os cientistas de dados mergulham em montanhas de informações, usando suas habilidades matemáticas e de programação para desvendar padrões ocultos e responder a perguntas importantes. Eles são os mestres em transformar dados bagunçados em conhecimento valioso, ajudando empresas e pesquisadores a tomar decisões informadas. É como ter um superpoder de números e algoritmos, só que sem a capa e a máscara.</p>
</section>
<section id="o-fluxo-de-trabalho-de-ciência-de-dados" class="level3">
<h3 class="anchored" data-anchor-id="o-fluxo-de-trabalho-de-ciência-de-dados">O Fluxo de Trabalho de Ciência de Dados</h3>
O <strong>Ciclo de Vida de Ciência de Dados</strong> é a formalização das 6 etapas que os cientistas de dados trabalham a cada projeto para chegar ao final com o resultado solicitado pelo cliente, e podemos ver suas fases na imagem abaixo:
<center>
<p><img src="https://blog.wvcode.com.br/posts/data-101/ciclo_vida_ds.png" class="img-fluid"></p>
<small>Fonte: blog.betrybe.com.br</small>
</center>
<p><strong>1 - Entendendo o problema</strong> - aqui é feito o processo de descoberta, onde o problema que o cliente deseja resolvido é devidamente explicado, quebrado em requisitos e os dados disponíveis (ou a falta deles) são disponibilizados.</p>
<p><strong>2 - Coleta de dados</strong> - nesta fase, os conjuntos de dados iniciais caso existam são validados e se determina que outras fontes podem ser usadas para obter ou enriquecer os dados. Também são escritos os primeiros códigos para realizar a busca e download dos dados.</p>
<p><strong>3 - Processamento de dados</strong> - nesta fase os dados são analisados e transformados para atender ao propósito de negócio. Também é a fase em que começa o processo de criação de modelos de machine learning.</p>
<p><strong>4 - Exploração de dados</strong> - esta fase é caracterizada principalmente por visualização de dados sendo utilizada para compreender os dados gerados pelo modelo. São utilizadas técnicas específicas para essa exploração e todas dependem primariamente do bom entendimento na criação de visualizações de dados.</p>
<p><strong>5 - Comunicação de resultados</strong> - esta fase também reconhecida por fazer uso extensivo de técnicas de visualização de dados aliadas a técnicas de story telling para mostrar ao cliente os resultados obtidos.</p>
<p><strong>6 - Feedback</strong> - na última fase deste ciclo, se coleta as impressões do cliente e se inicia (caso necessário) uma nova iteração do projeto, para o refinamento da solução apresentada e a possibilidade de trabalhar em novos requisitos.</p>
</section>
<section id="o-que-é-visualização-de-dados" class="level3">
<h3 class="anchored" data-anchor-id="o-que-é-visualização-de-dados">O que é Visualização de Dados???</h3>
<center>
<p><img src="https://blog.wvcode.com.br/posts/data-101/definicao_grafico.png" class="img-fluid"></p>
<p><small>Fonte: o autor</small></p>
</center>
</section>
<section id="tipos-de-visualização" class="level3">
<h3 class="anchored" data-anchor-id="tipos-de-visualização">Tipos de Visualização</h3>
<p>Existem diversos tipos de visualizações disponíveis. Sua utilização está associada ao tipo de informação e ao objetivo que temos ao mostrar os dados.</p>
<center>
<p><img src="https://blog.wvcode.com.br/posts/data-101/tipos_grafico.png" class="img-fluid"></p>
<p><small>Fonte: o autor</small></p>
</center>
<p>Quanto a objetivos, as visualizações são utilizadas com as seguintes finalidades: - <strong>Comparar</strong> valores - Evidenciar a <strong>correlação</strong> entre valores (como os dois valores se comportam em conjunto) - Como um valor se <strong>distribui</strong> em relação a uma dimensão contínua (geralmente o tempo) - Como um valor se distribui especificamente em relação a <strong>posicionamento geográfico</strong> - Como um valor se distribui entre dimensões não continuas que formam <strong>partes de um todo</strong>; o quanto cada valor representa em relação a esse todo - Como um valor se comporta em relação <strong>tempo</strong>.</p>
</section>
<section id="tipos-de-visualização-x-objetivo-de-comunicação" class="level3">
<h3 class="anchored" data-anchor-id="tipos-de-visualização-x-objetivo-de-comunicação">Tipos de Visualização X Objetivo de Comunicação</h3>
<p>Abaixo segue um diagrama com uma indicação de quais gráficos podem ser utilizados de acordo com o seu objetivo.</p>
<center>
<p><img src="https://blog.wvcode.com.br/posts/data-101/visualizacao_x_objetivo.png" class="img-fluid"></p>
<p><small>Fonte: o autor</small></p>
</center>
</section>
<section id="como-podemos-criar-visualizações" class="level3">
<h3 class="anchored" data-anchor-id="como-podemos-criar-visualizações">Como podemos criar Visualizações???</h3>
<p>Assim como existem diversos tipos de visualizações, existem diversas ferramentas. Abaixo, colocamos uma lista de ferramentas para visualização de dados: - Excel - Tableau - Power BI - Qlik - Looker (antes chamada de Google Data Studio) - Oracle Analytics - SAP Business Objects - Grafana - Kibana</p>
<p>Estas ferramentas se caracterizam por uma interface de usuário totalmente voltada para a criação de visualizações. Se vocês estivessem em um curso de Análise de Dados, seriam nossa escolha para o curso, pois elas focam na modelagem dos dados e criação das visualizações. Mas vocês estão em um curso para iniciarem na carreira de Cientistas de Dados, certo?</p>
<section id="então-como-um-cientista-de-dados-cria-visualizações" class="level4">
<h4 class="anchored" data-anchor-id="então-como-um-cientista-de-dados-cria-visualizações">Então, como um Cientista de Dados cria visualizações???</h4>
<p>Um Cientista de Dados utiliza a Visualização de Dados de duas formas: 1) Como uma ferramenta de exploração dos dados, durante a fase em que estão procurando respostas 2) Como uma ferramenta de comunicação, para divulgar resultados</p>
<p>Considerando essas duas necessidades, embora o Cientista de Dados pudesse utilizar ferramentas como as citadas anteriormente, a verdade é que ele precisa de uma ferramenta que consiga combinar o poder da programação, com visualização de dados e também com uma estrutura documental organizada para compartilhamento de informação.</p>
<p>Por isso, iremos utilizar uma tecnologia diferente para aprender visualização de dados: vamos aprender a criar visualizações de forma <strong>programática</strong>, ou seja, vamos criar visualizações utilizando programas escritos em Python.</p>
</section>
<section id="porquê-vamos-fazer-isso" class="level4">
<h4 class="anchored" data-anchor-id="porquê-vamos-fazer-isso">Porquê vamos fazer isso?</h4>
<p>Por alguns motivos:</p>
<ol type="1">
<li><p>Como cientistas de dados, a maneira mais comum de entregar os resultados do seu trabalho, além de apresentações em powerpoint é através de <strong>notebooks interativos</strong>, como o Google Colab, ou o Jupyter. São ferramentas que ajudam muito no desenvolvimento de um <strong>story telling</strong> orientado a divulgação dos resultados</p></li>
<li><p>Atualmente Python é a linguagem a se aprender na carreira de Cientista de Dados. Outras linguagens como R, Julia e até Java também são utilizadas, mas por enquanto, Python é a preferida</p></li>
<li><p>As bibliotecas de visualização em Python são muito flexíveis e poderosas, inclusive são utilizadas por algumas das ferramentas citadas acima</p></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Então, agora que toda a teoria necessária está explicada, bora trabalhar??? Na Parte 02, iremos aprender sobre o Google Colab, a ferramenta que escolhemos para conduzir o restante desta série!</p>
</div>
</div>
<p>Um abraço, e até a próxima!</p>
<p>Walter.</p>


</section>
</section>

 ]]></description>
  <category>Visualização</category>
  <category>Python</category>
  <category>Teoria</category>
  <category>Ciência de Dados</category>
  <category>ptbr</category>
  <guid>https://blog.wvcode.com.br/posts/data-101/</guid>
  <pubDate>Fri, 03 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://blog.wvcode.com.br/posts/data-101/tipos_grafico.png" medium="image" type="image/png" height="161" width="144"/>
</item>
<item>
  <title>Introdução</title>
  <dc:creator>Walter R. Paixão-Côrtes</dc:creator>
  <link>https://blog.wvcode.com.br/posts/data-010/</link>
  <description><![CDATA[ 





<p>Olá Devs!!!</p>
<p>A série de Visualização de Dados com Python tem por objetivo habilita-los a utilizar a linguagem Python para:</p>
<ul>
<li>realizar análises de dados em grandes volumes e nos mais diferentes formatos</li>
<li>criar gráficos que transmitam a informação de maneira agradável e direta</li>
<li>aprender sobre tipos de visualização de dados que vão além dos gráficos de barras, linhas e tortas.</li>
</ul>
<p>Ao longo dos posts você irá aprender a utilizar algumas das bibliotecas Python mais famosas na área de Ciência de Dados: Requests, Pandas, Seaborn, MatplotLib, Plotly e muito mais.</p>
<p>Então, não perca mais tempo e comece a leitura agora mesmo!</p>
<section id="aviso" class="level3">
<h3 class="anchored" data-anchor-id="aviso">AVISO!!!</h3>
<p>Essa série de posts é destinada a um público menos experiente, que ainda está aprendendo a programar em Python, bem como aqueles que estão iniciando seu caminho na área de Ciência de Dados. Se você já domina a linguagem, os artigos fora da série de Visualização de Dados com certeza serão mais interessantes!</p>
<p>Um abraço, Walter.</p>


</section>

 ]]></description>
  <category>Visualização</category>
  <category>Python</category>
  <category>Pandas</category>
  <category>ptbr</category>
  <guid>https://blog.wvcode.com.br/posts/data-010/</guid>
  <pubDate>Thu, 02 Feb 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
